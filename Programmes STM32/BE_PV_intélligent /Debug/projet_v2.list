
projet_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ecc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002f88  08002f88  00012f88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800300c  0800300c  0001300c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003010  08003010  00013010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08003014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b54  20000070  08003084  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000bc4  08003084  00020bc4  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010ada  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002654  00000000  00000000  00030b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007415  00000000  00000000  000331c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009d8  00000000  00000000  0003a5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b70  00000000  00000000  0003afb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006130  00000000  00000000  0003bb28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003282  00000000  00000000  00041c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00044eda  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ec0  00000000  00000000  00044f58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002f70 	.word	0x08002f70

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08002f70 	.word	0x08002f70

08000104 <__gnu_thumb1_case_uqi>:
 8000104:	b402      	push	{r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0049      	lsls	r1, r1, #1
 800010c:	5c09      	ldrb	r1, [r1, r0]
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	448e      	add	lr, r1
 8000112:	bc02      	pop	{r1}
 8000114:	4770      	bx	lr
 8000116:	46c0      	nop			; (mov r8, r8)

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000418:	b570      	push	{r4, r5, r6, lr}
 800041a:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800041c:	20fa      	movs	r0, #250	; 0xfa
 800041e:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <HAL_InitTick+0x3c>)
 8000420:	0080      	lsls	r0, r0, #2
 8000422:	7819      	ldrb	r1, [r3, #0]
 8000424:	f7ff fe82 	bl	800012c <__udivsi3>
 8000428:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <HAL_InitTick+0x40>)
 800042a:	0001      	movs	r1, r0
 800042c:	6818      	ldr	r0, [r3, #0]
 800042e:	f7ff fe7d 	bl	800012c <__udivsi3>
 8000432:	f000 f879 	bl	8000528 <HAL_SYSTICK_Config>
 8000436:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000438:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800043a:	2c00      	cmp	r4, #0
 800043c:	d109      	bne.n	8000452 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800043e:	2d03      	cmp	r5, #3
 8000440:	d807      	bhi.n	8000452 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000442:	3802      	subs	r0, #2
 8000444:	0022      	movs	r2, r4
 8000446:	0029      	movs	r1, r5
 8000448:	f000 f83e 	bl	80004c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800044c:	0020      	movs	r0, r4
 800044e:	4b03      	ldr	r3, [pc, #12]	; (800045c <HAL_InitTick+0x44>)
 8000450:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000452:	bd70      	pop	{r4, r5, r6, pc}
 8000454:	20000000 	.word	0x20000000
 8000458:	20000008 	.word	0x20000008
 800045c:	20000004 	.word	0x20000004

08000460 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000460:	2310      	movs	r3, #16
 8000462:	4a06      	ldr	r2, [pc, #24]	; (800047c <HAL_Init+0x1c>)
{
 8000464:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000466:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000468:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800046a:	430b      	orrs	r3, r1
 800046c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800046e:	f7ff ffd3 	bl	8000418 <HAL_InitTick>
  HAL_MspInit();
 8000472:	f002 f879 	bl	8002568 <HAL_MspInit>
}
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	40022000 	.word	0x40022000

08000480 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000480:	4a03      	ldr	r2, [pc, #12]	; (8000490 <HAL_IncTick+0x10>)
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <HAL_IncTick+0x14>)
 8000484:	6811      	ldr	r1, [r2, #0]
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	185b      	adds	r3, r3, r1
 800048a:	6013      	str	r3, [r2, #0]
}
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	200000a4 	.word	0x200000a4
 8000494:	20000000 	.word	0x20000000

08000498 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000498:	4b01      	ldr	r3, [pc, #4]	; (80004a0 <HAL_GetTick+0x8>)
 800049a:	6818      	ldr	r0, [r3, #0]
}
 800049c:	4770      	bx	lr
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	200000a4 	.word	0x200000a4

080004a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80004a8:	f7ff fff6 	bl	8000498 <HAL_GetTick>
 80004ac:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004ae:	1c63      	adds	r3, r4, #1
 80004b0:	d002      	beq.n	80004b8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80004b2:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <HAL_Delay+0x20>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80004b8:	f7ff ffee 	bl	8000498 <HAL_GetTick>
 80004bc:	1b40      	subs	r0, r0, r5
 80004be:	4284      	cmp	r4, r0
 80004c0:	d8fa      	bhi.n	80004b8 <HAL_Delay+0x14>
  {
  }
}
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	20000000 	.word	0x20000000

080004c8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80004cc:	2800      	cmp	r0, #0
 80004ce:	db12      	blt.n	80004f6 <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d0:	0883      	lsrs	r3, r0, #2
 80004d2:	4a13      	ldr	r2, [pc, #76]	; (8000520 <HAL_NVIC_SetPriority+0x58>)
 80004d4:	2403      	movs	r4, #3
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	189b      	adds	r3, r3, r2
 80004da:	22ff      	movs	r2, #255	; 0xff
 80004dc:	4020      	ands	r0, r4
 80004de:	40a0      	lsls	r0, r4
 80004e0:	0014      	movs	r4, r2
 80004e2:	25c0      	movs	r5, #192	; 0xc0
 80004e4:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004e6:	4011      	ands	r1, r2
 80004e8:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ea:	00ad      	lsls	r5, r5, #2
 80004ec:	595e      	ldr	r6, [r3, r5]
 80004ee:	43a6      	bics	r6, r4
 80004f0:	4331      	orrs	r1, r6
 80004f2:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80004f4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f6:	2403      	movs	r4, #3
 80004f8:	230f      	movs	r3, #15
 80004fa:	b2c0      	uxtb	r0, r0
 80004fc:	4003      	ands	r3, r0
 80004fe:	4020      	ands	r0, r4
 8000500:	40a0      	lsls	r0, r4
 8000502:	34fc      	adds	r4, #252	; 0xfc
 8000504:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000506:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000508:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800050a:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800050c:	3b08      	subs	r3, #8
 800050e:	4a05      	ldr	r2, [pc, #20]	; (8000524 <HAL_NVIC_SetPriority+0x5c>)
 8000510:	089b      	lsrs	r3, r3, #2
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	189b      	adds	r3, r3, r2
 8000516:	69da      	ldr	r2, [r3, #28]
 8000518:	43aa      	bics	r2, r5
 800051a:	4311      	orrs	r1, r2
 800051c:	61d9      	str	r1, [r3, #28]
 800051e:	e7e9      	b.n	80004f4 <HAL_NVIC_SetPriority+0x2c>
 8000520:	e000e100 	.word	0xe000e100
 8000524:	e000ed00 	.word	0xe000ed00

08000528 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000528:	4a09      	ldr	r2, [pc, #36]	; (8000550 <HAL_SYSTICK_Config+0x28>)
 800052a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 800052c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800052e:	4293      	cmp	r3, r2
 8000530:	d80d      	bhi.n	800054e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000532:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000536:	4808      	ldr	r0, [pc, #32]	; (8000558 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000538:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800053a:	6a03      	ldr	r3, [r0, #32]
 800053c:	0609      	lsls	r1, r1, #24
 800053e:	021b      	lsls	r3, r3, #8
 8000540:	0a1b      	lsrs	r3, r3, #8
 8000542:	430b      	orrs	r3, r1
 8000544:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000546:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000548:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800054a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800054c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800054e:	4770      	bx	lr
 8000550:	00ffffff 	.word	0x00ffffff
 8000554:	e000e010 	.word	0xe000e010
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800055e:	4a56      	ldr	r2, [pc, #344]	; (80006b8 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000560:	680b      	ldr	r3, [r1, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000562:	1882      	adds	r2, r0, r2
 8000564:	1e54      	subs	r4, r2, #1
 8000566:	41a2      	sbcs	r2, r4
{ 
 8000568:	b089      	sub	sp, #36	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800056a:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 800056c:	2300      	movs	r3, #0
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800056e:	3204      	adds	r2, #4
 8000570:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000572:	9a03      	ldr	r2, [sp, #12]
 8000574:	40da      	lsrs	r2, r3
 8000576:	d101      	bne.n	800057c <HAL_GPIO_Init+0x20>
      }
    }

    position++;
  } 
}
 8000578:	b009      	add	sp, #36	; 0x24
 800057a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800057c:	2201      	movs	r2, #1
 800057e:	409a      	lsls	r2, r3
 8000580:	4694      	mov	ip, r2
 8000582:	4664      	mov	r4, ip
 8000584:	9a03      	ldr	r2, [sp, #12]
 8000586:	4022      	ands	r2, r4
 8000588:	9202      	str	r2, [sp, #8]
    if (iocurrent != 0x00u)
 800058a:	d100      	bne.n	800058e <HAL_GPIO_Init+0x32>
 800058c:	e092      	b.n	80006b4 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800058e:	684a      	ldr	r2, [r1, #4]
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	2210      	movs	r2, #16
 8000594:	9e01      	ldr	r6, [sp, #4]
 8000596:	4396      	bics	r6, r2
 8000598:	2e02      	cmp	r6, #2
 800059a:	d10d      	bne.n	80005b8 <HAL_GPIO_Init+0x5c>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800059c:	2407      	movs	r4, #7
 800059e:	270f      	movs	r7, #15
 80005a0:	401c      	ands	r4, r3
 80005a2:	00a4      	lsls	r4, r4, #2
 80005a4:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3u];
 80005a6:	08da      	lsrs	r2, r3, #3
 80005a8:	0092      	lsls	r2, r2, #2
 80005aa:	1882      	adds	r2, r0, r2
 80005ac:	6a15      	ldr	r5, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80005ae:	43bd      	bics	r5, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80005b0:	690f      	ldr	r7, [r1, #16]
 80005b2:	40a7      	lsls	r7, r4
 80005b4:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3u] = temp;
 80005b6:	6215      	str	r5, [r2, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80005b8:	2203      	movs	r2, #3
 80005ba:	0014      	movs	r4, r2
 80005bc:	005d      	lsls	r5, r3, #1
 80005be:	40ac      	lsls	r4, r5
 80005c0:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80005c2:	6807      	ldr	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005c4:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80005c6:	4027      	ands	r7, r4
 80005c8:	9704      	str	r7, [sp, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80005ca:	9f01      	ldr	r7, [sp, #4]
 80005cc:	403a      	ands	r2, r7
 80005ce:	40aa      	lsls	r2, r5
 80005d0:	9f04      	ldr	r7, [sp, #16]
 80005d2:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 80005d4:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005d6:	2e01      	cmp	r6, #1
 80005d8:	d80e      	bhi.n	80005f8 <HAL_GPIO_Init+0x9c>
        temp |= (GPIO_Init->Speed << (position * 2u));
 80005da:	68ca      	ldr	r2, [r1, #12]
        temp = GPIOx->OSPEEDR;
 80005dc:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80005de:	40aa      	lsls	r2, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80005e0:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80005e2:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 80005e4:	6082      	str	r2, [r0, #8]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005e6:	4662      	mov	r2, ip
        temp = GPIOx->OTYPER;
 80005e8:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005ea:	4396      	bics	r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80005ec:	9a01      	ldr	r2, [sp, #4]
 80005ee:	06d2      	lsls	r2, r2, #27
 80005f0:	0fd2      	lsrs	r2, r2, #31
 80005f2:	409a      	lsls	r2, r3
 80005f4:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80005f6:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80005f8:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80005fa:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80005fc:	688a      	ldr	r2, [r1, #8]
 80005fe:	40aa      	lsls	r2, r5
 8000600:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000602:	9a01      	ldr	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 8000604:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000606:	00d2      	lsls	r2, r2, #3
 8000608:	d554      	bpl.n	80006b4 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060a:	2601      	movs	r6, #1
 800060c:	4a2b      	ldr	r2, [pc, #172]	; (80006bc <HAL_GPIO_Init+0x160>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800060e:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000610:	6994      	ldr	r4, [r2, #24]
 8000612:	4334      	orrs	r4, r6
 8000614:	6194      	str	r4, [r2, #24]
 8000616:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000618:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061a:	4032      	ands	r2, r6
 800061c:	9207      	str	r2, [sp, #28]
 800061e:	9a07      	ldr	r2, [sp, #28]
 8000620:	4a27      	ldr	r2, [pc, #156]	; (80006c0 <HAL_GPIO_Init+0x164>)
 8000622:	00a4      	lsls	r4, r4, #2
 8000624:	18a4      	adds	r4, r4, r2
        temp = SYSCFG->EXTICR[position >> 2u];
 8000626:	68a2      	ldr	r2, [r4, #8]
 8000628:	4694      	mov	ip, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800062a:	2203      	movs	r2, #3
 800062c:	4015      	ands	r5, r2
 800062e:	00ad      	lsls	r5, r5, #2
 8000630:	320c      	adds	r2, #12
 8000632:	40aa      	lsls	r2, r5
 8000634:	4667      	mov	r7, ip
 8000636:	4397      	bics	r7, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000638:	2290      	movs	r2, #144	; 0x90
 800063a:	05d2      	lsls	r2, r2, #23
 800063c:	4694      	mov	ip, r2
 800063e:	2200      	movs	r2, #0
 8000640:	4560      	cmp	r0, ip
 8000642:	d00d      	beq.n	8000660 <HAL_GPIO_Init+0x104>
 8000644:	4a1f      	ldr	r2, [pc, #124]	; (80006c4 <HAL_GPIO_Init+0x168>)
 8000646:	4694      	mov	ip, r2
 8000648:	0032      	movs	r2, r6
 800064a:	4560      	cmp	r0, ip
 800064c:	d008      	beq.n	8000660 <HAL_GPIO_Init+0x104>
 800064e:	4e1e      	ldr	r6, [pc, #120]	; (80006c8 <HAL_GPIO_Init+0x16c>)
 8000650:	1892      	adds	r2, r2, r2
 8000652:	42b0      	cmp	r0, r6
 8000654:	d004      	beq.n	8000660 <HAL_GPIO_Init+0x104>
 8000656:	4e1d      	ldr	r6, [pc, #116]	; (80006cc <HAL_GPIO_Init+0x170>)
 8000658:	3201      	adds	r2, #1
 800065a:	42b0      	cmp	r0, r6
 800065c:	d000      	beq.n	8000660 <HAL_GPIO_Init+0x104>
 800065e:	9a05      	ldr	r2, [sp, #20]
 8000660:	40aa      	lsls	r2, r5
 8000662:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000664:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000666:	4a1a      	ldr	r2, [pc, #104]	; (80006d0 <HAL_GPIO_Init+0x174>)
        temp &= ~(iocurrent);
 8000668:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 800066a:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 800066c:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800066e:	9f01      	ldr	r7, [sp, #4]
        temp &= ~(iocurrent);
 8000670:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000672:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000674:	03ff      	lsls	r7, r7, #15
 8000676:	d401      	bmi.n	800067c <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8000678:	0035      	movs	r5, r6
 800067a:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 800067c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800067e:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000680:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000682:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8000684:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000686:	03bf      	lsls	r7, r7, #14
 8000688:	d401      	bmi.n	800068e <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 800068a:	0035      	movs	r5, r6
 800068c:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 800068e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000690:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000692:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000694:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8000696:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000698:	02ff      	lsls	r7, r7, #11
 800069a:	d401      	bmi.n	80006a0 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 800069c:	0035      	movs	r5, r6
 800069e:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80006a0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80006a2:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80006a4:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006a6:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80006a8:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006aa:	02bf      	lsls	r7, r7, #10
 80006ac:	d401      	bmi.n	80006b2 <HAL_GPIO_Init+0x156>
        temp &= ~(iocurrent);
 80006ae:	4025      	ands	r5, r4
 80006b0:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80006b2:	60d6      	str	r6, [r2, #12]
    position++;
 80006b4:	3301      	adds	r3, #1
 80006b6:	e75c      	b.n	8000572 <HAL_GPIO_Init+0x16>
 80006b8:	b7fff000 	.word	0xb7fff000
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010000 	.word	0x40010000
 80006c4:	48000400 	.word	0x48000400
 80006c8:	48000800 	.word	0x48000800
 80006cc:	48000c00 	.word	0x48000c00
 80006d0:	40010400 	.word	0x40010400

080006d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006d4:	2a00      	cmp	r2, #0
 80006d6:	d001      	beq.n	80006dc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80006d8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80006da:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80006dc:	6281      	str	r1, [r0, #40]	; 0x28
}
 80006de:	e7fc      	b.n	80006da <HAL_GPIO_WritePin+0x6>

080006e0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80006e0:	6803      	ldr	r3, [r0, #0]
 80006e2:	699a      	ldr	r2, [r3, #24]
 80006e4:	0792      	lsls	r2, r2, #30
 80006e6:	d501      	bpl.n	80006ec <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80006e8:	2200      	movs	r2, #0
 80006ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80006ec:	2201      	movs	r2, #1
 80006ee:	6999      	ldr	r1, [r3, #24]
 80006f0:	4211      	tst	r1, r2
 80006f2:	d102      	bne.n	80006fa <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80006f4:	6999      	ldr	r1, [r3, #24]
 80006f6:	430a      	orrs	r2, r1
 80006f8:	619a      	str	r2, [r3, #24]
  }
}
 80006fa:	4770      	bx	lr

080006fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	9e04      	ldr	r6, [sp, #16]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000700:	0589      	lsls	r1, r1, #22
 8000702:	4333      	orrs	r3, r6
 8000704:	0d89      	lsrs	r1, r1, #22
 8000706:	4319      	orrs	r1, r3
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	6804      	ldr	r4, [r0, #0]
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	0d70      	lsrs	r0, r6, #21
 8000710:	4018      	ands	r0, r3
 8000712:	4b04      	ldr	r3, [pc, #16]	; (8000724 <I2C_TransferConfig+0x28>)
 8000714:	6865      	ldr	r5, [r4, #4]
 8000716:	0412      	lsls	r2, r2, #16
 8000718:	4318      	orrs	r0, r3
 800071a:	4385      	bics	r5, r0
 800071c:	4311      	orrs	r1, r2
 800071e:	4329      	orrs	r1, r5
 8000720:	6061      	str	r1, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	03ff63ff 	.word	0x03ff63ff

08000728 <I2C_WaitOnFlagUntilTimeout>:
{
 8000728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800072a:	0004      	movs	r4, r0
 800072c:	000e      	movs	r6, r1
 800072e:	0017      	movs	r7, r2
 8000730:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000732:	6822      	ldr	r2, [r4, #0]
 8000734:	6993      	ldr	r3, [r2, #24]
 8000736:	4033      	ands	r3, r6
 8000738:	1b9b      	subs	r3, r3, r6
 800073a:	4259      	negs	r1, r3
 800073c:	414b      	adcs	r3, r1
 800073e:	42bb      	cmp	r3, r7
 8000740:	d001      	beq.n	8000746 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8000742:	2000      	movs	r0, #0
 8000744:	e017      	b.n	8000776 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8000746:	1c6b      	adds	r3, r5, #1
 8000748:	d0f4      	beq.n	8000734 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800074a:	f7ff fea5 	bl	8000498 <HAL_GetTick>
 800074e:	9b06      	ldr	r3, [sp, #24]
 8000750:	1ac0      	subs	r0, r0, r3
 8000752:	4285      	cmp	r5, r0
 8000754:	d301      	bcc.n	800075a <I2C_WaitOnFlagUntilTimeout+0x32>
 8000756:	2d00      	cmp	r5, #0
 8000758:	d1eb      	bne.n	8000732 <I2C_WaitOnFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800075a:	2220      	movs	r2, #32
 800075c:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800075e:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000760:	4313      	orrs	r3, r2
 8000762:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000764:	0023      	movs	r3, r4
 8000766:	3341      	adds	r3, #65	; 0x41
 8000768:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800076a:	0022      	movs	r2, r4
 800076c:	2300      	movs	r3, #0
 800076e:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000770:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000772:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000774:	7023      	strb	r3, [r4, #0]
}
 8000776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000778 <I2C_IsAcknowledgeFailed>:
{
 8000778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800077a:	6803      	ldr	r3, [r0, #0]
{
 800077c:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800077e:	6998      	ldr	r0, [r3, #24]
 8000780:	2310      	movs	r3, #16
{
 8000782:	000e      	movs	r6, r1
 8000784:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000786:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000788:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800078a:	2800      	cmp	r0, #0
 800078c:	d118      	bne.n	80007c0 <I2C_IsAcknowledgeFailed+0x48>
}
 800078e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000790:	1c72      	adds	r2, r6, #1
 8000792:	d016      	beq.n	80007c2 <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000794:	f7ff fe80 	bl	8000498 <HAL_GetTick>
 8000798:	1bc0      	subs	r0, r0, r7
 800079a:	4286      	cmp	r6, r0
 800079c:	d301      	bcc.n	80007a2 <I2C_IsAcknowledgeFailed+0x2a>
 800079e:	2e00      	cmp	r6, #0
 80007a0:	d10e      	bne.n	80007c0 <I2C_IsAcknowledgeFailed+0x48>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80007a2:	2220      	movs	r2, #32
 80007a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007a6:	4313      	orrs	r3, r2
 80007a8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80007aa:	0023      	movs	r3, r4
 80007ac:	3341      	adds	r3, #65	; 0x41
 80007ae:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80007b0:	0022      	movs	r2, r4
 80007b2:	2300      	movs	r3, #0
 80007b4:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80007b6:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80007b8:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 80007ba:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 80007bc:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 80007be:	e7e6      	b.n	800078e <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80007c0:	6823      	ldr	r3, [r4, #0]
 80007c2:	699a      	ldr	r2, [r3, #24]
 80007c4:	422a      	tst	r2, r5
 80007c6:	d0e3      	beq.n	8000790 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80007c8:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 80007ca:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80007cc:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80007ce:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80007d0:	f7ff ff86 	bl	80006e0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80007d4:	6822      	ldr	r2, [r4, #0]
 80007d6:	4906      	ldr	r1, [pc, #24]	; (80007f0 <I2C_IsAcknowledgeFailed+0x78>)
 80007d8:	6853      	ldr	r3, [r2, #4]
 80007da:	400b      	ands	r3, r1
 80007dc:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80007de:	2304      	movs	r3, #4
 80007e0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80007e2:	4313      	orrs	r3, r2
 80007e4:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80007e6:	0023      	movs	r3, r4
 80007e8:	3341      	adds	r3, #65	; 0x41
 80007ea:	701d      	strb	r5, [r3, #0]
 80007ec:	e7e0      	b.n	80007b0 <I2C_IsAcknowledgeFailed+0x38>
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	fe00e800 	.word	0xfe00e800

080007f4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80007f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007f6:	0004      	movs	r4, r0
 80007f8:	000d      	movs	r5, r1
 80007fa:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80007fc:	2702      	movs	r7, #2
 80007fe:	6823      	ldr	r3, [r4, #0]
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	423b      	tst	r3, r7
 8000804:	d001      	beq.n	800080a <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8000806:	2000      	movs	r0, #0
}
 8000808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800080a:	0032      	movs	r2, r6
 800080c:	0029      	movs	r1, r5
 800080e:	0020      	movs	r0, r4
 8000810:	f7ff ffb2 	bl	8000778 <I2C_IsAcknowledgeFailed>
 8000814:	2800      	cmp	r0, #0
 8000816:	d115      	bne.n	8000844 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000818:	1c6b      	adds	r3, r5, #1
 800081a:	d0f0      	beq.n	80007fe <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800081c:	f7ff fe3c 	bl	8000498 <HAL_GetTick>
 8000820:	1b80      	subs	r0, r0, r6
 8000822:	4285      	cmp	r5, r0
 8000824:	d301      	bcc.n	800082a <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8000826:	2d00      	cmp	r5, #0
 8000828:	d1e9      	bne.n	80007fe <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800082a:	2220      	movs	r2, #32
 800082c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800082e:	4313      	orrs	r3, r2
 8000830:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000832:	0023      	movs	r3, r4
 8000834:	3341      	adds	r3, #65	; 0x41
 8000836:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000838:	0022      	movs	r2, r4
 800083a:	2300      	movs	r3, #0
 800083c:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 800083e:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000840:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000842:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8000844:	2001      	movs	r0, #1
 8000846:	e7df      	b.n	8000808 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08000848 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084a:	0004      	movs	r4, r0
 800084c:	000d      	movs	r5, r1
 800084e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000850:	2720      	movs	r7, #32
 8000852:	6823      	ldr	r3, [r4, #0]
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	423b      	tst	r3, r7
 8000858:	d001      	beq.n	800085e <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800085a:	2000      	movs	r0, #0
}
 800085c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800085e:	0032      	movs	r2, r6
 8000860:	0029      	movs	r1, r5
 8000862:	0020      	movs	r0, r4
 8000864:	f7ff ff88 	bl	8000778 <I2C_IsAcknowledgeFailed>
 8000868:	2800      	cmp	r0, #0
 800086a:	d113      	bne.n	8000894 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800086c:	f7ff fe14 	bl	8000498 <HAL_GetTick>
 8000870:	1b80      	subs	r0, r0, r6
 8000872:	4285      	cmp	r5, r0
 8000874:	d301      	bcc.n	800087a <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8000876:	2d00      	cmp	r5, #0
 8000878:	d1eb      	bne.n	8000852 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800087a:	2220      	movs	r2, #32
 800087c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800087e:	4313      	orrs	r3, r2
 8000880:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000882:	0023      	movs	r3, r4
 8000884:	3341      	adds	r3, #65	; 0x41
 8000886:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000888:	0022      	movs	r2, r4
 800088a:	2300      	movs	r3, #0
 800088c:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 800088e:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000890:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8000892:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8000894:	2001      	movs	r0, #1
 8000896:	e7e1      	b.n	800085c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08000898 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800089a:	0004      	movs	r4, r0
 800089c:	000d      	movs	r5, r1
 800089e:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80008a0:	2604      	movs	r6, #4
 80008a2:	6823      	ldr	r3, [r4, #0]
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	4233      	tst	r3, r6
 80008a8:	d111      	bne.n	80008ce <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80008aa:	003a      	movs	r2, r7
 80008ac:	0029      	movs	r1, r5
 80008ae:	0020      	movs	r0, r4
 80008b0:	f7ff ff62 	bl	8000778 <I2C_IsAcknowledgeFailed>
 80008b4:	2800      	cmp	r0, #0
 80008b6:	d11a      	bne.n	80008ee <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80008b8:	2120      	movs	r1, #32
 80008ba:	6823      	ldr	r3, [r4, #0]
 80008bc:	699a      	ldr	r2, [r3, #24]
 80008be:	420a      	tst	r2, r1
 80008c0:	d017      	beq.n	80008f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80008c2:	699a      	ldr	r2, [r3, #24]
 80008c4:	4232      	tst	r2, r6
 80008c6:	d004      	beq.n	80008d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 80008c8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80008ca:	2a00      	cmp	r2, #0
 80008cc:	d001      	beq.n	80008d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 80008ce:	2000      	movs	r0, #0
}
 80008d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80008d2:	2120      	movs	r1, #32
 80008d4:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	480e      	ldr	r0, [pc, #56]	; (8000914 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 80008da:	4002      	ands	r2, r0
 80008dc:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80008de:	0022      	movs	r2, r4
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008e0:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80008e2:	3241      	adds	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008e4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80008e6:	7011      	strb	r1, [r2, #0]
        __HAL_UNLOCK(hi2c);
 80008e8:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80008ea:	7053      	strb	r3, [r2, #1]
      __HAL_UNLOCK(hi2c);
 80008ec:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80008ee:	2001      	movs	r0, #1
 80008f0:	e7ee      	b.n	80008d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80008f2:	f7ff fdd1 	bl	8000498 <HAL_GetTick>
 80008f6:	1bc0      	subs	r0, r0, r7
 80008f8:	4285      	cmp	r5, r0
 80008fa:	d301      	bcc.n	8000900 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 80008fc:	2d00      	cmp	r5, #0
 80008fe:	d1d0      	bne.n	80008a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000900:	2220      	movs	r2, #32
 8000902:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000904:	4313      	orrs	r3, r2
 8000906:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000908:	0023      	movs	r3, r4
 800090a:	3341      	adds	r3, #65	; 0x41
 800090c:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 800090e:	3440      	adds	r4, #64	; 0x40
 8000910:	2300      	movs	r3, #0
 8000912:	e7eb      	b.n	80008ec <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8000914:	fe00e800 	.word	0xfe00e800

08000918 <HAL_I2C_Init>:
{
 8000918:	b570      	push	{r4, r5, r6, lr}
 800091a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800091c:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800091e:	2c00      	cmp	r4, #0
 8000920:	d03f      	beq.n	80009a2 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000922:	0025      	movs	r5, r4
 8000924:	3541      	adds	r5, #65	; 0x41
 8000926:	782b      	ldrb	r3, [r5, #0]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d105      	bne.n	800093a <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800092e:	0022      	movs	r2, r4
 8000930:	3240      	adds	r2, #64	; 0x40
 8000932:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8000934:	0020      	movs	r0, r4
 8000936:	f001 f975 	bl	8001c24 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800093a:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800093c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800093e:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8000940:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000942:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	68a6      	ldr	r6, [r4, #8]
 8000948:	438a      	bics	r2, r1
 800094a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800094c:	6861      	ldr	r1, [r4, #4]
 800094e:	4a1a      	ldr	r2, [pc, #104]	; (80009b8 <HAL_I2C_Init+0xa0>)
 8000950:	400a      	ands	r2, r1
 8000952:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000954:	6899      	ldr	r1, [r3, #8]
 8000956:	4a19      	ldr	r2, [pc, #100]	; (80009bc <HAL_I2C_Init+0xa4>)
 8000958:	4011      	ands	r1, r2
 800095a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800095c:	2801      	cmp	r0, #1
 800095e:	d121      	bne.n	80009a4 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	0209      	lsls	r1, r1, #8
 8000964:	4331      	orrs	r1, r6
 8000966:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000968:	6858      	ldr	r0, [r3, #4]
 800096a:	4915      	ldr	r1, [pc, #84]	; (80009c0 <HAL_I2C_Init+0xa8>)
 800096c:	4301      	orrs	r1, r0
 800096e:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000970:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000972:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000974:	400a      	ands	r2, r1
 8000976:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000978:	6961      	ldr	r1, [r4, #20]
 800097a:	6922      	ldr	r2, [r4, #16]
 800097c:	430a      	orrs	r2, r1
 800097e:	69a1      	ldr	r1, [r4, #24]
 8000980:	0209      	lsls	r1, r1, #8
 8000982:	430a      	orrs	r2, r1
 8000984:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000986:	6a21      	ldr	r1, [r4, #32]
 8000988:	69e2      	ldr	r2, [r4, #28]
 800098a:	430a      	orrs	r2, r1
 800098c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800098e:	2201      	movs	r2, #1
 8000990:	6819      	ldr	r1, [r3, #0]
 8000992:	430a      	orrs	r2, r1
 8000994:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000996:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000998:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800099a:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 800099c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800099e:	3442      	adds	r4, #66	; 0x42
 80009a0:	7020      	strb	r0, [r4, #0]
}
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80009a4:	2184      	movs	r1, #132	; 0x84
 80009a6:	0209      	lsls	r1, r1, #8
 80009a8:	4331      	orrs	r1, r6
 80009aa:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80009ac:	2802      	cmp	r0, #2
 80009ae:	d1db      	bne.n	8000968 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80009b0:	2180      	movs	r1, #128	; 0x80
 80009b2:	0109      	lsls	r1, r1, #4
 80009b4:	6059      	str	r1, [r3, #4]
 80009b6:	e7d7      	b.n	8000968 <HAL_I2C_Init+0x50>
 80009b8:	f0ffffff 	.word	0xf0ffffff
 80009bc:	ffff7fff 	.word	0xffff7fff
 80009c0:	02008000 	.word	0x02008000

080009c4 <HAL_I2C_Master_Transmit>:
{
 80009c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80009c6:	0005      	movs	r5, r0
{
 80009c8:	b087      	sub	sp, #28
 80009ca:	9103      	str	r1, [sp, #12]
 80009cc:	9204      	str	r2, [sp, #16]
 80009ce:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80009d0:	3541      	adds	r5, #65	; 0x41
 80009d2:	782b      	ldrb	r3, [r5, #0]
{
 80009d4:	0004      	movs	r4, r0
    return HAL_BUSY;
 80009d6:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80009d8:	2b20      	cmp	r3, #32
 80009da:	d114      	bne.n	8000a06 <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 80009dc:	0023      	movs	r3, r4
 80009de:	3340      	adds	r3, #64	; 0x40
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	2a01      	cmp	r2, #1
 80009e4:	d00f      	beq.n	8000a06 <HAL_I2C_Master_Transmit+0x42>
 80009e6:	2601      	movs	r6, #1
 80009e8:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80009ea:	f7ff fd55 	bl	8000498 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80009ee:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80009f0:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80009f2:	9000      	str	r0, [sp, #0]
 80009f4:	2319      	movs	r3, #25
 80009f6:	0032      	movs	r2, r6
 80009f8:	0209      	lsls	r1, r1, #8
 80009fa:	0020      	movs	r0, r4
 80009fc:	f7ff fe94 	bl	8000728 <I2C_WaitOnFlagUntilTimeout>
 8000a00:	2800      	cmp	r0, #0
 8000a02:	d002      	beq.n	8000a0a <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 8000a04:	2001      	movs	r0, #1
}
 8000a06:	b007      	add	sp, #28
 8000a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000a0a:	2321      	movs	r3, #33	; 0x21
 8000a0c:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000a0e:	0025      	movs	r5, r4
 8000a10:	3b11      	subs	r3, #17
 8000a12:	3542      	adds	r5, #66	; 0x42
 8000a14:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8000a16:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a18:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000a1a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000a1c:	466b      	mov	r3, sp
 8000a1e:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8000a20:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000a22:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000a24:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000a26:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <HAL_I2C_Master_Transmit+0x124>)
 8000a28:	2aff      	cmp	r2, #255	; 0xff
 8000a2a:	d921      	bls.n	8000a70 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000a2c:	22ff      	movs	r2, #255	; 0xff
 8000a2e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	045b      	lsls	r3, r3, #17
 8000a36:	9903      	ldr	r1, [sp, #12]
 8000a38:	0020      	movs	r0, r4
 8000a3a:	f7ff fe5f 	bl	80006fc <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000a3e:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8000a40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a42:	003a      	movs	r2, r7
 8000a44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000a46:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d119      	bne.n	8000a80 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a4c:	f7ff fefc 	bl	8000848 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000a50:	2800      	cmp	r0, #0
 8000a52:	d1d7      	bne.n	8000a04 <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a54:	2120      	movs	r1, #32
 8000a56:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000a58:	4e24      	ldr	r6, [pc, #144]	; (8000aec <HAL_I2C_Master_Transmit+0x128>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a5a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000a5c:	685a      	ldr	r2, [r3, #4]
 8000a5e:	4032      	ands	r2, r6
 8000a60:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000a62:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8000a64:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000a66:	3341      	adds	r3, #65	; 0x41
 8000a68:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000a6a:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000a6c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000a6e:	e7ca      	b.n	8000a06 <HAL_I2C_Master_Transmit+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8000a70:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000a72:	b292      	uxth	r2, r2
 8000a74:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	049b      	lsls	r3, r3, #18
 8000a7e:	e7da      	b.n	8000a36 <HAL_I2C_Master_Transmit+0x72>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a80:	f7ff feb8 	bl	80007f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8000a84:	2800      	cmp	r0, #0
 8000a86:	d1bd      	bne.n	8000a04 <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a8a:	6822      	ldr	r2, [r4, #0]
 8000a8c:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8000a8e:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000a90:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000a92:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000a94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000a96:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000a9e:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000aa0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000aa2:	b292      	uxth	r2, r2
 8000aa4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d0ca      	beq.n	8000a40 <HAL_I2C_Master_Transmit+0x7c>
 8000aaa:	2a00      	cmp	r2, #0
 8000aac:	d1c8      	bne.n	8000a40 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000aae:	9700      	str	r7, [sp, #0]
 8000ab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000ab2:	2180      	movs	r1, #128	; 0x80
 8000ab4:	0020      	movs	r0, r4
 8000ab6:	f7ff fe37 	bl	8000728 <I2C_WaitOnFlagUntilTimeout>
 8000aba:	2800      	cmp	r0, #0
 8000abc:	d1a2      	bne.n	8000a04 <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000abe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ac0:	2bff      	cmp	r3, #255	; 0xff
 8000ac2:	d909      	bls.n	8000ad8 <HAL_I2C_Master_Transmit+0x114>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ac8:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000aca:	045b      	lsls	r3, r3, #17
 8000acc:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ace:	9903      	ldr	r1, [sp, #12]
 8000ad0:	0020      	movs	r0, r4
 8000ad2:	f7ff fe13 	bl	80006fc <I2C_TransferConfig>
 8000ad6:	e7b3      	b.n	8000a40 <HAL_I2C_Master_Transmit+0x7c>
 8000ad8:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8000ada:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000adc:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8000ade:	b292      	uxth	r2, r2
 8000ae0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	9000      	str	r0, [sp, #0]
 8000ae6:	e7f2      	b.n	8000ace <HAL_I2C_Master_Transmit+0x10a>
 8000ae8:	80002000 	.word	0x80002000
 8000aec:	fe00e800 	.word	0xfe00e800

08000af0 <HAL_I2C_Master_Receive>:
{
 8000af0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000af2:	0005      	movs	r5, r0
{
 8000af4:	b087      	sub	sp, #28
 8000af6:	9103      	str	r1, [sp, #12]
 8000af8:	9204      	str	r2, [sp, #16]
 8000afa:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000afc:	3541      	adds	r5, #65	; 0x41
 8000afe:	782b      	ldrb	r3, [r5, #0]
{
 8000b00:	0004      	movs	r4, r0
    return HAL_BUSY;
 8000b02:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b04:	2b20      	cmp	r3, #32
 8000b06:	d114      	bne.n	8000b32 <HAL_I2C_Master_Receive+0x42>
    __HAL_LOCK(hi2c);
 8000b08:	0023      	movs	r3, r4
 8000b0a:	3340      	adds	r3, #64	; 0x40
 8000b0c:	781a      	ldrb	r2, [r3, #0]
 8000b0e:	2a01      	cmp	r2, #1
 8000b10:	d00f      	beq.n	8000b32 <HAL_I2C_Master_Receive+0x42>
 8000b12:	2601      	movs	r6, #1
 8000b14:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8000b16:	f7ff fcbf 	bl	8000498 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000b1a:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000b1c:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000b1e:	9000      	str	r0, [sp, #0]
 8000b20:	2319      	movs	r3, #25
 8000b22:	0032      	movs	r2, r6
 8000b24:	0209      	lsls	r1, r1, #8
 8000b26:	0020      	movs	r0, r4
 8000b28:	f7ff fdfe 	bl	8000728 <I2C_WaitOnFlagUntilTimeout>
 8000b2c:	2800      	cmp	r0, #0
 8000b2e:	d002      	beq.n	8000b36 <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8000b30:	2001      	movs	r0, #1
}
 8000b32:	b007      	add	sp, #28
 8000b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000b36:	2322      	movs	r3, #34	; 0x22
 8000b38:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000b3a:	0025      	movs	r5, r4
 8000b3c:	3b12      	subs	r3, #18
 8000b3e:	3542      	adds	r5, #66	; 0x42
 8000b40:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8000b42:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b44:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000b46:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000b48:	466b      	mov	r3, sp
 8000b4a:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8000b4c:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000b4e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b50:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000b52:	4b31      	ldr	r3, [pc, #196]	; (8000c18 <HAL_I2C_Master_Receive+0x128>)
 8000b54:	2aff      	cmp	r2, #255	; 0xff
 8000b56:	d921      	bls.n	8000b9c <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b58:	22ff      	movs	r2, #255	; 0xff
 8000b5a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2380      	movs	r3, #128	; 0x80
 8000b60:	045b      	lsls	r3, r3, #17
 8000b62:	9903      	ldr	r1, [sp, #12]
 8000b64:	0020      	movs	r0, r4
 8000b66:	f7ff fdc9 	bl	80006fc <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b6a:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8000b6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b6e:	003a      	movs	r2, r7
 8000b70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000b72:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d119      	bne.n	8000bac <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b78:	f7ff fe66 	bl	8000848 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	d1d7      	bne.n	8000b30 <HAL_I2C_Master_Receive+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b80:	2120      	movs	r1, #32
 8000b82:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000b84:	4e25      	ldr	r6, [pc, #148]	; (8000c1c <HAL_I2C_Master_Receive+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b86:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	4032      	ands	r2, r6
 8000b8c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000b8e:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8000b90:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000b92:	3341      	adds	r3, #65	; 0x41
 8000b94:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000b96:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000b98:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000b9a:	e7ca      	b.n	8000b32 <HAL_I2C_Master_Receive+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8000b9c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000b9e:	b292      	uxth	r2, r2
 8000ba0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	049b      	lsls	r3, r3, #18
 8000baa:	e7da      	b.n	8000b62 <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000bac:	f7ff fe74 	bl	8000898 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	d1bd      	bne.n	8000b30 <HAL_I2C_Master_Receive+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000bb4:	6823      	ldr	r3, [r4, #0]
 8000bb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bba:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8000bbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000bbe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000bc4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000bc6:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000bce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000bd0:	b292      	uxth	r2, r2
 8000bd2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d0c9      	beq.n	8000b6c <HAL_I2C_Master_Receive+0x7c>
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	d1c7      	bne.n	8000b6c <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000bdc:	9700      	str	r7, [sp, #0]
 8000bde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000be0:	2180      	movs	r1, #128	; 0x80
 8000be2:	0020      	movs	r0, r4
 8000be4:	f7ff fda0 	bl	8000728 <I2C_WaitOnFlagUntilTimeout>
 8000be8:	2800      	cmp	r0, #0
 8000bea:	d1a1      	bne.n	8000b30 <HAL_I2C_Master_Receive+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000bec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000bee:	2bff      	cmp	r3, #255	; 0xff
 8000bf0:	d909      	bls.n	8000c06 <HAL_I2C_Master_Receive+0x116>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000bf6:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000bf8:	045b      	lsls	r3, r3, #17
 8000bfa:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000bfc:	9903      	ldr	r1, [sp, #12]
 8000bfe:	0020      	movs	r0, r4
 8000c00:	f7ff fd7c 	bl	80006fc <I2C_TransferConfig>
 8000c04:	e7b2      	b.n	8000b6c <HAL_I2C_Master_Receive+0x7c>
 8000c06:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8000c08:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c0a:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8000c0c:	b292      	uxth	r2, r2
 8000c0e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	9000      	str	r0, [sp, #0]
 8000c14:	e7f2      	b.n	8000bfc <HAL_I2C_Master_Receive+0x10c>
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	80002400 	.word	0x80002400
 8000c1c:	fe00e800 	.word	0xfe00e800

08000c20 <HAL_I2C_IsDeviceReady>:
{
 8000c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c22:	001d      	movs	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 8000c24:	2300      	movs	r3, #0
{
 8000c26:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t I2C_Trials = 0UL;
 8000c28:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c2a:	0003      	movs	r3, r0
 8000c2c:	3341      	adds	r3, #65	; 0x41
{
 8000c2e:	9105      	str	r1, [sp, #20]
 8000c30:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c32:	9302      	str	r3, [sp, #8]
 8000c34:	781b      	ldrb	r3, [r3, #0]
{
 8000c36:	0004      	movs	r4, r0
    return HAL_BUSY;
 8000c38:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c3a:	2b20      	cmp	r3, #32
 8000c3c:	d156      	bne.n	8000cec <HAL_I2C_IsDeviceReady+0xcc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000c3e:	6823      	ldr	r3, [r4, #0]
 8000c40:	699a      	ldr	r2, [r3, #24]
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	021b      	lsls	r3, r3, #8
 8000c46:	4013      	ands	r3, r2
 8000c48:	d150      	bne.n	8000cec <HAL_I2C_IsDeviceReady+0xcc>
    __HAL_LOCK(hi2c);
 8000c4a:	0021      	movs	r1, r4
 8000c4c:	3140      	adds	r1, #64	; 0x40
 8000c4e:	780a      	ldrb	r2, [r1, #0]
 8000c50:	2a01      	cmp	r2, #1
 8000c52:	d04b      	beq.n	8000cec <HAL_I2C_IsDeviceReady+0xcc>
 8000c54:	2201      	movs	r2, #1
 8000c56:	700a      	strb	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c58:	2124      	movs	r1, #36	; 0x24
 8000c5a:	9802      	ldr	r0, [sp, #8]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c5c:	9203      	str	r2, [sp, #12]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c5e:	7001      	strb	r1, [r0, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c60:	6463      	str	r3, [r4, #68]	; 0x44
 8000c62:	9b05      	ldr	r3, [sp, #20]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000c64:	68e1      	ldr	r1, [r4, #12]
 8000c66:	059b      	lsls	r3, r3, #22
 8000c68:	6822      	ldr	r2, [r4, #0]
 8000c6a:	0d9b      	lsrs	r3, r3, #22
 8000c6c:	2901      	cmp	r1, #1
 8000c6e:	d11f      	bne.n	8000cb0 <HAL_I2C_IsDeviceReady+0x90>
 8000c70:	4933      	ldr	r1, [pc, #204]	; (8000d40 <HAL_I2C_IsDeviceReady+0x120>)
 8000c72:	430b      	orrs	r3, r1
 8000c74:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8000c76:	f7ff fc0f 	bl	8000498 <HAL_GetTick>
 8000c7a:	0006      	movs	r6, r0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c7c:	6822      	ldr	r2, [r4, #0]
 8000c7e:	9903      	ldr	r1, [sp, #12]
 8000c80:	6993      	ldr	r3, [r2, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000c82:	6992      	ldr	r2, [r2, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c84:	095b      	lsrs	r3, r3, #5
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000c86:	0912      	lsrs	r2, r2, #4
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c88:	400b      	ands	r3, r1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000c8a:	400a      	ands	r2, r1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	d012      	beq.n	8000cb6 <HAL_I2C_IsDeviceReady+0x96>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000c90:	2710      	movs	r7, #16
 8000c92:	6823      	ldr	r3, [r4, #0]
 8000c94:	699a      	ldr	r2, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000c96:	9600      	str	r6, [sp, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000c98:	403a      	ands	r2, r7
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000c9a:	002b      	movs	r3, r5
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	d127      	bne.n	8000cf0 <HAL_I2C_IsDeviceReady+0xd0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000ca0:	2120      	movs	r1, #32
 8000ca2:	0020      	movs	r0, r4
 8000ca4:	f7ff fd40 	bl	8000728 <I2C_WaitOnFlagUntilTimeout>
 8000ca8:	2800      	cmp	r0, #0
 8000caa:	d017      	beq.n	8000cdc <HAL_I2C_IsDeviceReady+0xbc>
    return HAL_ERROR;
 8000cac:	2001      	movs	r0, #1
 8000cae:	e01d      	b.n	8000cec <HAL_I2C_IsDeviceReady+0xcc>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000cb0:	21a0      	movs	r1, #160	; 0xa0
 8000cb2:	0189      	lsls	r1, r1, #6
 8000cb4:	e7dd      	b.n	8000c72 <HAL_I2C_IsDeviceReady+0x52>
        if (Timeout != HAL_MAX_DELAY)
 8000cb6:	1c6b      	adds	r3, r5, #1
 8000cb8:	d0e0      	beq.n	8000c7c <HAL_I2C_IsDeviceReady+0x5c>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000cba:	f7ff fbed 	bl	8000498 <HAL_GetTick>
 8000cbe:	1b80      	subs	r0, r0, r6
 8000cc0:	4285      	cmp	r5, r0
 8000cc2:	d301      	bcc.n	8000cc8 <HAL_I2C_IsDeviceReady+0xa8>
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	d1d9      	bne.n	8000c7c <HAL_I2C_IsDeviceReady+0x5c>
    hi2c->State = HAL_I2C_STATE_READY;
 8000cc8:	2320      	movs	r3, #32
 8000cca:	9a02      	ldr	r2, [sp, #8]
    __HAL_UNLOCK(hi2c);
 8000ccc:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000cce:	7013      	strb	r3, [r2, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000cd0:	6862      	ldr	r2, [r4, #4]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hi2c);
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	7023      	strb	r3, [r4, #0]
 8000cda:	e7e7      	b.n	8000cac <HAL_I2C_IsDeviceReady+0x8c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cdc:	2320      	movs	r3, #32
 8000cde:	6822      	ldr	r2, [r4, #0]
 8000ce0:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8000ce2:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 8000ce4:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8000ce6:	3241      	adds	r2, #65	; 0x41
 8000ce8:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8000cea:	7020      	strb	r0, [r4, #0]
}
 8000cec:	b009      	add	sp, #36	; 0x24
 8000cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2120      	movs	r1, #32
 8000cf4:	0020      	movs	r0, r4
 8000cf6:	f7ff fd17 	bl	8000728 <I2C_WaitOnFlagUntilTimeout>
 8000cfa:	1e02      	subs	r2, r0, #0
 8000cfc:	d1d6      	bne.n	8000cac <HAL_I2C_IsDeviceReady+0x8c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000cfe:	6823      	ldr	r3, [r4, #0]
      if (I2C_Trials == Trials)
 8000d00:	9804      	ldr	r0, [sp, #16]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d02:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000d04:	2720      	movs	r7, #32
 8000d06:	61df      	str	r7, [r3, #28]
      if (I2C_Trials == Trials)
 8000d08:	9907      	ldr	r1, [sp, #28]
 8000d0a:	4281      	cmp	r1, r0
 8000d0c:	d10e      	bne.n	8000d2c <HAL_I2C_IsDeviceReady+0x10c>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8000d0e:	2180      	movs	r1, #128	; 0x80
 8000d10:	6858      	ldr	r0, [r3, #4]
 8000d12:	01c9      	lsls	r1, r1, #7
 8000d14:	4301      	orrs	r1, r0
 8000d16:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000d18:	0020      	movs	r0, r4
 8000d1a:	9600      	str	r6, [sp, #0]
 8000d1c:	002b      	movs	r3, r5
 8000d1e:	0039      	movs	r1, r7
 8000d20:	f7ff fd02 	bl	8000728 <I2C_WaitOnFlagUntilTimeout>
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d1c1      	bne.n	8000cac <HAL_I2C_IsDeviceReady+0x8c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000d28:	6823      	ldr	r3, [r4, #0]
 8000d2a:	61df      	str	r7, [r3, #28]
      I2C_Trials++;
 8000d2c:	9b07      	ldr	r3, [sp, #28]
    while (I2C_Trials < Trials);
 8000d2e:	9a04      	ldr	r2, [sp, #16]
      I2C_Trials++;
 8000d30:	3301      	adds	r3, #1
 8000d32:	9307      	str	r3, [sp, #28]
    while (I2C_Trials < Trials);
 8000d34:	9b07      	ldr	r3, [sp, #28]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d900      	bls.n	8000d3c <HAL_I2C_IsDeviceReady+0x11c>
 8000d3a:	e792      	b.n	8000c62 <HAL_I2C_IsDeviceReady+0x42>
 8000d3c:	e7c4      	b.n	8000cc8 <HAL_I2C_IsDeviceReady+0xa8>
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	02002000 	.word	0x02002000

08000d44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000d44:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d46:	0004      	movs	r4, r0
 8000d48:	3441      	adds	r4, #65	; 0x41
 8000d4a:	7822      	ldrb	r2, [r4, #0]
{
 8000d4c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d4e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000d50:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d52:	2a20      	cmp	r2, #32
 8000d54:	d118      	bne.n	8000d88 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000d56:	001d      	movs	r5, r3
 8000d58:	3540      	adds	r5, #64	; 0x40
 8000d5a:	782e      	ldrb	r6, [r5, #0]
 8000d5c:	2e01      	cmp	r6, #1
 8000d5e:	d013      	beq.n	8000d88 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000d60:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d62:	3022      	adds	r0, #34	; 0x22
 8000d64:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000d66:	681e      	ldr	r6, [r3, #0]
 8000d68:	3823      	subs	r0, #35	; 0x23
 8000d6a:	4386      	bics	r6, r0
 8000d6c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000d6e:	681e      	ldr	r6, [r3, #0]
 8000d70:	4f06      	ldr	r7, [pc, #24]	; (8000d8c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000d72:	403e      	ands	r6, r7
 8000d74:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000d76:	681e      	ldr	r6, [r3, #0]
 8000d78:	4331      	orrs	r1, r6
 8000d7a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000d7c:	6819      	ldr	r1, [r3, #0]
 8000d7e:	4308      	orrs	r0, r1
 8000d80:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000d82:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000d84:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000d86:	7028      	strb	r0, [r5, #0]
  }
}
 8000d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	ffffefff 	.word	0xffffefff

08000d90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000d90:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d92:	0005      	movs	r5, r0
 8000d94:	3541      	adds	r5, #65	; 0x41
 8000d96:	782a      	ldrb	r2, [r5, #0]
{
 8000d98:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d9a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000d9c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d9e:	2a20      	cmp	r2, #32
 8000da0:	d117      	bne.n	8000dd2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8000da2:	001c      	movs	r4, r3
 8000da4:	3440      	adds	r4, #64	; 0x40
 8000da6:	7826      	ldrb	r6, [r4, #0]
 8000da8:	2e01      	cmp	r6, #1
 8000daa:	d012      	beq.n	8000dd2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000dac:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000dae:	3022      	adds	r0, #34	; 0x22
 8000db0:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000db2:	681e      	ldr	r6, [r3, #0]
 8000db4:	3823      	subs	r0, #35	; 0x23
 8000db6:	4386      	bics	r6, r0
 8000db8:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8000dba:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000dbc:	4f05      	ldr	r7, [pc, #20]	; (8000dd4 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8000dbe:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8000dc0:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8000dc2:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8000dc4:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000dc6:	6819      	ldr	r1, [r3, #0]
 8000dc8:	4308      	orrs	r0, r1
 8000dca:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000dcc:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000dce:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000dd0:	7020      	strb	r0, [r4, #0]
  }
}
 8000dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dd4:	fffff0ff 	.word	0xfffff0ff

08000dd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dda:	0004      	movs	r4, r0
 8000ddc:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dde:	2800      	cmp	r0, #0
 8000de0:	d102      	bne.n	8000de8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000de2:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8000de4:	b005      	add	sp, #20
 8000de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000de8:	6803      	ldr	r3, [r0, #0]
 8000dea:	07db      	lsls	r3, r3, #31
 8000dec:	d433      	bmi.n	8000e56 <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	079b      	lsls	r3, r3, #30
 8000df2:	d500      	bpl.n	8000df6 <HAL_RCC_OscConfig+0x1e>
 8000df4:	e087      	b.n	8000f06 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000df6:	6823      	ldr	r3, [r4, #0]
 8000df8:	071b      	lsls	r3, r3, #28
 8000dfa:	d500      	bpl.n	8000dfe <HAL_RCC_OscConfig+0x26>
 8000dfc:	e0c8      	b.n	8000f90 <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dfe:	6823      	ldr	r3, [r4, #0]
 8000e00:	075b      	lsls	r3, r3, #29
 8000e02:	d500      	bpl.n	8000e06 <HAL_RCC_OscConfig+0x2e>
 8000e04:	e0eb      	b.n	8000fde <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000e06:	6823      	ldr	r3, [r4, #0]
 8000e08:	06db      	lsls	r3, r3, #27
 8000e0a:	d51a      	bpl.n	8000e42 <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000e0c:	6962      	ldr	r2, [r4, #20]
 8000e0e:	4dbc      	ldr	r5, [pc, #752]	; (8001100 <HAL_RCC_OscConfig+0x328>)
 8000e10:	2304      	movs	r3, #4
 8000e12:	2a01      	cmp	r2, #1
 8000e14:	d000      	beq.n	8000e18 <HAL_RCC_OscConfig+0x40>
 8000e16:	e157      	b.n	80010c8 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e18:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e1a:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e1c:	430b      	orrs	r3, r1
 8000e1e:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000e20:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e22:	431a      	orrs	r2, r3
 8000e24:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000e26:	f7ff fb37 	bl	8000498 <HAL_GetTick>
 8000e2a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e2c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e2e:	4233      	tst	r3, r6
 8000e30:	d100      	bne.n	8000e34 <HAL_RCC_OscConfig+0x5c>
 8000e32:	e142      	b.n	80010ba <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000e34:	21f8      	movs	r1, #248	; 0xf8
 8000e36:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000e38:	69a3      	ldr	r3, [r4, #24]
 8000e3a:	438a      	bics	r2, r1
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	636b      	str	r3, [r5, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000e42:	6823      	ldr	r3, [r4, #0]
 8000e44:	069b      	lsls	r3, r3, #26
 8000e46:	d500      	bpl.n	8000e4a <HAL_RCC_OscConfig+0x72>
 8000e48:	e166      	b.n	8001118 <HAL_RCC_OscConfig+0x340>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e4c:	2a00      	cmp	r2, #0
 8000e4e:	d000      	beq.n	8000e52 <HAL_RCC_OscConfig+0x7a>
 8000e50:	e1a3      	b.n	800119a <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 8000e52:	2000      	movs	r0, #0
 8000e54:	e7c6      	b.n	8000de4 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e56:	210c      	movs	r1, #12
 8000e58:	4da9      	ldr	r5, [pc, #676]	; (8001100 <HAL_RCC_OscConfig+0x328>)
 8000e5a:	686a      	ldr	r2, [r5, #4]
 8000e5c:	400a      	ands	r2, r1
 8000e5e:	2a04      	cmp	r2, #4
 8000e60:	d00b      	beq.n	8000e7a <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e62:	686b      	ldr	r3, [r5, #4]
 8000e64:	400b      	ands	r3, r1
 8000e66:	2b08      	cmp	r3, #8
 8000e68:	d10e      	bne.n	8000e88 <HAL_RCC_OscConfig+0xb0>
 8000e6a:	22c0      	movs	r2, #192	; 0xc0
 8000e6c:	686b      	ldr	r3, [r5, #4]
 8000e6e:	0252      	lsls	r2, r2, #9
 8000e70:	4013      	ands	r3, r2
 8000e72:	2280      	movs	r2, #128	; 0x80
 8000e74:	0252      	lsls	r2, r2, #9
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d106      	bne.n	8000e88 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e7a:	682b      	ldr	r3, [r5, #0]
 8000e7c:	039b      	lsls	r3, r3, #14
 8000e7e:	d5b6      	bpl.n	8000dee <HAL_RCC_OscConfig+0x16>
 8000e80:	6863      	ldr	r3, [r4, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1b3      	bne.n	8000dee <HAL_RCC_OscConfig+0x16>
 8000e86:	e7ac      	b.n	8000de2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e88:	6863      	ldr	r3, [r4, #4]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d113      	bne.n	8000eb6 <HAL_RCC_OscConfig+0xde>
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	682a      	ldr	r2, [r5, #0]
 8000e92:	025b      	lsls	r3, r3, #9
 8000e94:	4313      	orrs	r3, r2
 8000e96:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e98:	f7ff fafe 	bl	8000498 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000e9e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea0:	02b6      	lsls	r6, r6, #10
 8000ea2:	682b      	ldr	r3, [r5, #0]
 8000ea4:	4233      	tst	r3, r6
 8000ea6:	d1a2      	bne.n	8000dee <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ea8:	f7ff faf6 	bl	8000498 <HAL_GetTick>
 8000eac:	1bc0      	subs	r0, r0, r7
 8000eae:	2864      	cmp	r0, #100	; 0x64
 8000eb0:	d9f7      	bls.n	8000ea2 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	e796      	b.n	8000de4 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d115      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x10e>
 8000eba:	682b      	ldr	r3, [r5, #0]
 8000ebc:	4a91      	ldr	r2, [pc, #580]	; (8001104 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ebe:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	602b      	str	r3, [r5, #0]
 8000ec4:	682b      	ldr	r3, [r5, #0]
 8000ec6:	4a90      	ldr	r2, [pc, #576]	; (8001108 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec8:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eca:	4013      	ands	r3, r2
 8000ecc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ece:	f7ff fae3 	bl	8000498 <HAL_GetTick>
 8000ed2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed4:	682b      	ldr	r3, [r5, #0]
 8000ed6:	4233      	tst	r3, r6
 8000ed8:	d089      	beq.n	8000dee <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eda:	f7ff fadd 	bl	8000498 <HAL_GetTick>
 8000ede:	1bc0      	subs	r0, r0, r7
 8000ee0:	2864      	cmp	r0, #100	; 0x64
 8000ee2:	d9f7      	bls.n	8000ed4 <HAL_RCC_OscConfig+0xfc>
 8000ee4:	e7e5      	b.n	8000eb2 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee6:	2b05      	cmp	r3, #5
 8000ee8:	d105      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x11e>
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	682a      	ldr	r2, [r5, #0]
 8000eee:	02db      	lsls	r3, r3, #11
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	602b      	str	r3, [r5, #0]
 8000ef4:	e7cb      	b.n	8000e8e <HAL_RCC_OscConfig+0xb6>
 8000ef6:	682b      	ldr	r3, [r5, #0]
 8000ef8:	4a82      	ldr	r2, [pc, #520]	; (8001104 <HAL_RCC_OscConfig+0x32c>)
 8000efa:	4013      	ands	r3, r2
 8000efc:	602b      	str	r3, [r5, #0]
 8000efe:	682b      	ldr	r3, [r5, #0]
 8000f00:	4a81      	ldr	r2, [pc, #516]	; (8001108 <HAL_RCC_OscConfig+0x330>)
 8000f02:	4013      	ands	r3, r2
 8000f04:	e7c7      	b.n	8000e96 <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f06:	220c      	movs	r2, #12
 8000f08:	4d7d      	ldr	r5, [pc, #500]	; (8001100 <HAL_RCC_OscConfig+0x328>)
 8000f0a:	686b      	ldr	r3, [r5, #4]
 8000f0c:	4213      	tst	r3, r2
 8000f0e:	d00b      	beq.n	8000f28 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f10:	686b      	ldr	r3, [r5, #4]
 8000f12:	4013      	ands	r3, r2
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d116      	bne.n	8000f46 <HAL_RCC_OscConfig+0x16e>
 8000f18:	22c0      	movs	r2, #192	; 0xc0
 8000f1a:	686b      	ldr	r3, [r5, #4]
 8000f1c:	0252      	lsls	r2, r2, #9
 8000f1e:	4013      	ands	r3, r2
 8000f20:	2280      	movs	r2, #128	; 0x80
 8000f22:	0212      	lsls	r2, r2, #8
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d10e      	bne.n	8000f46 <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f28:	682b      	ldr	r3, [r5, #0]
 8000f2a:	079b      	lsls	r3, r3, #30
 8000f2c:	d503      	bpl.n	8000f36 <HAL_RCC_OscConfig+0x15e>
 8000f2e:	68e3      	ldr	r3, [r4, #12]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d000      	beq.n	8000f36 <HAL_RCC_OscConfig+0x15e>
 8000f34:	e755      	b.n	8000de2 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f36:	21f8      	movs	r1, #248	; 0xf8
 8000f38:	682a      	ldr	r2, [r5, #0]
 8000f3a:	6923      	ldr	r3, [r4, #16]
 8000f3c:	438a      	bics	r2, r1
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	4313      	orrs	r3, r2
 8000f42:	602b      	str	r3, [r5, #0]
 8000f44:	e757      	b.n	8000df6 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f46:	68e2      	ldr	r2, [r4, #12]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	2a00      	cmp	r2, #0
 8000f4c:	d00f      	beq.n	8000f6e <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 8000f4e:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f50:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000f52:	4313      	orrs	r3, r2
 8000f54:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f56:	f7ff fa9f 	bl	8000498 <HAL_GetTick>
 8000f5a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f5c:	682b      	ldr	r3, [r5, #0]
 8000f5e:	4233      	tst	r3, r6
 8000f60:	d1e9      	bne.n	8000f36 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f62:	f7ff fa99 	bl	8000498 <HAL_GetTick>
 8000f66:	1bc0      	subs	r0, r0, r7
 8000f68:	2802      	cmp	r0, #2
 8000f6a:	d9f7      	bls.n	8000f5c <HAL_RCC_OscConfig+0x184>
 8000f6c:	e7a1      	b.n	8000eb2 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 8000f6e:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f70:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000f72:	439a      	bics	r2, r3
 8000f74:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000f76:	f7ff fa8f 	bl	8000498 <HAL_GetTick>
 8000f7a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f7c:	682b      	ldr	r3, [r5, #0]
 8000f7e:	4233      	tst	r3, r6
 8000f80:	d100      	bne.n	8000f84 <HAL_RCC_OscConfig+0x1ac>
 8000f82:	e738      	b.n	8000df6 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f84:	f7ff fa88 	bl	8000498 <HAL_GetTick>
 8000f88:	1bc0      	subs	r0, r0, r7
 8000f8a:	2802      	cmp	r0, #2
 8000f8c:	d9f6      	bls.n	8000f7c <HAL_RCC_OscConfig+0x1a4>
 8000f8e:	e790      	b.n	8000eb2 <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f90:	69e2      	ldr	r2, [r4, #28]
 8000f92:	2301      	movs	r3, #1
 8000f94:	4d5a      	ldr	r5, [pc, #360]	; (8001100 <HAL_RCC_OscConfig+0x328>)
 8000f96:	2a00      	cmp	r2, #0
 8000f98:	d010      	beq.n	8000fbc <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 8000f9a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f9c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000fa2:	f7ff fa79 	bl	8000498 <HAL_GetTick>
 8000fa6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fa8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000faa:	4233      	tst	r3, r6
 8000fac:	d000      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x1d8>
 8000fae:	e726      	b.n	8000dfe <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fa72 	bl	8000498 <HAL_GetTick>
 8000fb4:	1bc0      	subs	r0, r0, r7
 8000fb6:	2802      	cmp	r0, #2
 8000fb8:	d9f6      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x1d0>
 8000fba:	e77a      	b.n	8000eb2 <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 8000fbc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fbe:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000fc0:	439a      	bics	r2, r3
 8000fc2:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000fc4:	f7ff fa68 	bl	8000498 <HAL_GetTick>
 8000fc8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000fcc:	4233      	tst	r3, r6
 8000fce:	d100      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x1fa>
 8000fd0:	e715      	b.n	8000dfe <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fd2:	f7ff fa61 	bl	8000498 <HAL_GetTick>
 8000fd6:	1bc0      	subs	r0, r0, r7
 8000fd8:	2802      	cmp	r0, #2
 8000fda:	d9f6      	bls.n	8000fca <HAL_RCC_OscConfig+0x1f2>
 8000fdc:	e769      	b.n	8000eb2 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fde:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000fe0:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fe2:	4d47      	ldr	r5, [pc, #284]	; (8001100 <HAL_RCC_OscConfig+0x328>)
 8000fe4:	0552      	lsls	r2, r2, #21
 8000fe6:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000fe8:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fea:	4213      	tst	r3, r2
 8000fec:	d108      	bne.n	8001000 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	69eb      	ldr	r3, [r5, #28]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61eb      	str	r3, [r5, #28]
 8000ff4:	69eb      	ldr	r3, [r5, #28]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	9303      	str	r3, [sp, #12]
 8000ffa:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001000:	2780      	movs	r7, #128	; 0x80
 8001002:	4e42      	ldr	r6, [pc, #264]	; (800110c <HAL_RCC_OscConfig+0x334>)
 8001004:	007f      	lsls	r7, r7, #1
 8001006:	6833      	ldr	r3, [r6, #0]
 8001008:	423b      	tst	r3, r7
 800100a:	d006      	beq.n	800101a <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800100c:	68a3      	ldr	r3, [r4, #8]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d113      	bne.n	800103a <HAL_RCC_OscConfig+0x262>
 8001012:	6a2a      	ldr	r2, [r5, #32]
 8001014:	4313      	orrs	r3, r2
 8001016:	622b      	str	r3, [r5, #32]
 8001018:	e030      	b.n	800107c <HAL_RCC_OscConfig+0x2a4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800101a:	6833      	ldr	r3, [r6, #0]
 800101c:	433b      	orrs	r3, r7
 800101e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001020:	f7ff fa3a 	bl	8000498 <HAL_GetTick>
 8001024:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001026:	6833      	ldr	r3, [r6, #0]
 8001028:	423b      	tst	r3, r7
 800102a:	d1ef      	bne.n	800100c <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800102c:	f7ff fa34 	bl	8000498 <HAL_GetTick>
 8001030:	9b01      	ldr	r3, [sp, #4]
 8001032:	1ac0      	subs	r0, r0, r3
 8001034:	2864      	cmp	r0, #100	; 0x64
 8001036:	d9f6      	bls.n	8001026 <HAL_RCC_OscConfig+0x24e>
 8001038:	e73b      	b.n	8000eb2 <HAL_RCC_OscConfig+0xda>
 800103a:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800103c:	2b00      	cmp	r3, #0
 800103e:	d114      	bne.n	800106a <HAL_RCC_OscConfig+0x292>
 8001040:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001042:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001044:	4393      	bics	r3, r2
 8001046:	622b      	str	r3, [r5, #32]
 8001048:	6a2b      	ldr	r3, [r5, #32]
 800104a:	3203      	adds	r2, #3
 800104c:	4393      	bics	r3, r2
 800104e:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001050:	f7ff fa22 	bl	8000498 <HAL_GetTick>
 8001054:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001056:	6a2b      	ldr	r3, [r5, #32]
 8001058:	423b      	tst	r3, r7
 800105a:	d025      	beq.n	80010a8 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800105c:	f7ff fa1c 	bl	8000498 <HAL_GetTick>
 8001060:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <HAL_RCC_OscConfig+0x338>)
 8001062:	1b80      	subs	r0, r0, r6
 8001064:	4298      	cmp	r0, r3
 8001066:	d9f6      	bls.n	8001056 <HAL_RCC_OscConfig+0x27e>
 8001068:	e723      	b.n	8000eb2 <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800106a:	2b05      	cmp	r3, #5
 800106c:	d10b      	bne.n	8001086 <HAL_RCC_OscConfig+0x2ae>
 800106e:	6a29      	ldr	r1, [r5, #32]
 8001070:	3b01      	subs	r3, #1
 8001072:	430b      	orrs	r3, r1
 8001074:	622b      	str	r3, [r5, #32]
 8001076:	6a2b      	ldr	r3, [r5, #32]
 8001078:	431a      	orrs	r2, r3
 800107a:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 800107c:	f7ff fa0c 	bl	8000498 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001080:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001082:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001084:	e00d      	b.n	80010a2 <HAL_RCC_OscConfig+0x2ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001086:	6a2b      	ldr	r3, [r5, #32]
 8001088:	4393      	bics	r3, r2
 800108a:	2204      	movs	r2, #4
 800108c:	622b      	str	r3, [r5, #32]
 800108e:	6a2b      	ldr	r3, [r5, #32]
 8001090:	4393      	bics	r3, r2
 8001092:	e7c0      	b.n	8001016 <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001094:	f7ff fa00 	bl	8000498 <HAL_GetTick>
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <HAL_RCC_OscConfig+0x338>)
 800109a:	1b80      	subs	r0, r0, r6
 800109c:	4298      	cmp	r0, r3
 800109e:	d900      	bls.n	80010a2 <HAL_RCC_OscConfig+0x2ca>
 80010a0:	e707      	b.n	8000eb2 <HAL_RCC_OscConfig+0xda>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a2:	6a2b      	ldr	r3, [r5, #32]
 80010a4:	423b      	tst	r3, r7
 80010a6:	d0f5      	beq.n	8001094 <HAL_RCC_OscConfig+0x2bc>
    if(pwrclkchanged == SET)
 80010a8:	9b00      	ldr	r3, [sp, #0]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d000      	beq.n	80010b0 <HAL_RCC_OscConfig+0x2d8>
 80010ae:	e6aa      	b.n	8000e06 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010b0:	69eb      	ldr	r3, [r5, #28]
 80010b2:	4a18      	ldr	r2, [pc, #96]	; (8001114 <HAL_RCC_OscConfig+0x33c>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	61eb      	str	r3, [r5, #28]
 80010b8:	e6a5      	b.n	8000e06 <HAL_RCC_OscConfig+0x2e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010ba:	f7ff f9ed 	bl	8000498 <HAL_GetTick>
 80010be:	1bc0      	subs	r0, r0, r7
 80010c0:	2802      	cmp	r0, #2
 80010c2:	d800      	bhi.n	80010c6 <HAL_RCC_OscConfig+0x2ee>
 80010c4:	e6b2      	b.n	8000e2c <HAL_RCC_OscConfig+0x54>
 80010c6:	e6f4      	b.n	8000eb2 <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80010c8:	3205      	adds	r2, #5
 80010ca:	d103      	bne.n	80010d4 <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI14ADC_ENABLE();
 80010cc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80010ce:	439a      	bics	r2, r3
 80010d0:	636a      	str	r2, [r5, #52]	; 0x34
 80010d2:	e6af      	b.n	8000e34 <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 80010d4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010d6:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80010d8:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80010da:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80010dc:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80010de:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80010e0:	4393      	bics	r3, r2
 80010e2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80010e4:	f7ff f9d8 	bl	8000498 <HAL_GetTick>
 80010e8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80010ec:	4233      	tst	r3, r6
 80010ee:	d100      	bne.n	80010f2 <HAL_RCC_OscConfig+0x31a>
 80010f0:	e6a7      	b.n	8000e42 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010f2:	f7ff f9d1 	bl	8000498 <HAL_GetTick>
 80010f6:	1bc0      	subs	r0, r0, r7
 80010f8:	2802      	cmp	r0, #2
 80010fa:	d9f6      	bls.n	80010ea <HAL_RCC_OscConfig+0x312>
 80010fc:	e6d9      	b.n	8000eb2 <HAL_RCC_OscConfig+0xda>
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	40021000 	.word	0x40021000
 8001104:	fffeffff 	.word	0xfffeffff
 8001108:	fffbffff 	.word	0xfffbffff
 800110c:	40007000 	.word	0x40007000
 8001110:	00001388 	.word	0x00001388
 8001114:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001118:	210c      	movs	r1, #12
 800111a:	4d53      	ldr	r5, [pc, #332]	; (8001268 <HAL_RCC_OscConfig+0x490>)
 800111c:	686a      	ldr	r2, [r5, #4]
 800111e:	400a      	ands	r2, r1
 8001120:	428a      	cmp	r2, r1
 8001122:	d009      	beq.n	8001138 <HAL_RCC_OscConfig+0x360>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001124:	686b      	ldr	r3, [r5, #4]
 8001126:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001128:	2b08      	cmp	r3, #8
 800112a:	d10e      	bne.n	800114a <HAL_RCC_OscConfig+0x372>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800112c:	22c0      	movs	r2, #192	; 0xc0
 800112e:	686b      	ldr	r3, [r5, #4]
 8001130:	0252      	lsls	r2, r2, #9
 8001132:	4013      	ands	r3, r2
 8001134:	4293      	cmp	r3, r2
 8001136:	d108      	bne.n	800114a <HAL_RCC_OscConfig+0x372>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001138:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800113a:	03db      	lsls	r3, r3, #15
 800113c:	d400      	bmi.n	8001140 <HAL_RCC_OscConfig+0x368>
 800113e:	e684      	b.n	8000e4a <HAL_RCC_OscConfig+0x72>
 8001140:	6a23      	ldr	r3, [r4, #32]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d000      	beq.n	8001148 <HAL_RCC_OscConfig+0x370>
 8001146:	e64c      	b.n	8000de2 <HAL_RCC_OscConfig+0xa>
 8001148:	e67f      	b.n	8000e4a <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800114a:	6a23      	ldr	r3, [r4, #32]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d011      	beq.n	8001174 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_HSI48_ENABLE();
 8001150:	2680      	movs	r6, #128	; 0x80
 8001152:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001154:	0276      	lsls	r6, r6, #9
 8001156:	4333      	orrs	r3, r6
 8001158:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 800115a:	f7ff f99d 	bl	8000498 <HAL_GetTick>
 800115e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001160:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001162:	4233      	tst	r3, r6
 8001164:	d000      	beq.n	8001168 <HAL_RCC_OscConfig+0x390>
 8001166:	e670      	b.n	8000e4a <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001168:	f7ff f996 	bl	8000498 <HAL_GetTick>
 800116c:	1bc0      	subs	r0, r0, r7
 800116e:	2802      	cmp	r0, #2
 8001170:	d9f6      	bls.n	8001160 <HAL_RCC_OscConfig+0x388>
 8001172:	e69e      	b.n	8000eb2 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 8001174:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001176:	4a3d      	ldr	r2, [pc, #244]	; (800126c <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001178:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 800117a:	4013      	ands	r3, r2
 800117c:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 800117e:	f7ff f98b 	bl	8000498 <HAL_GetTick>
 8001182:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001184:	0276      	lsls	r6, r6, #9
 8001186:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001188:	4233      	tst	r3, r6
 800118a:	d100      	bne.n	800118e <HAL_RCC_OscConfig+0x3b6>
 800118c:	e65d      	b.n	8000e4a <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800118e:	f7ff f983 	bl	8000498 <HAL_GetTick>
 8001192:	1bc0      	subs	r0, r0, r7
 8001194:	2802      	cmp	r0, #2
 8001196:	d9f6      	bls.n	8001186 <HAL_RCC_OscConfig+0x3ae>
 8001198:	e68b      	b.n	8000eb2 <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800119a:	200c      	movs	r0, #12
 800119c:	4b32      	ldr	r3, [pc, #200]	; (8001268 <HAL_RCC_OscConfig+0x490>)
 800119e:	6859      	ldr	r1, [r3, #4]
 80011a0:	001d      	movs	r5, r3
 80011a2:	4001      	ands	r1, r0
 80011a4:	2908      	cmp	r1, #8
 80011a6:	d044      	beq.n	8001232 <HAL_RCC_OscConfig+0x45a>
        __HAL_RCC_PLL_DISABLE();
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4931      	ldr	r1, [pc, #196]	; (8001270 <HAL_RCC_OscConfig+0x498>)
 80011ac:	400b      	ands	r3, r1
 80011ae:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011b0:	2a02      	cmp	r2, #2
 80011b2:	d12f      	bne.n	8001214 <HAL_RCC_OscConfig+0x43c>
        tickstart = HAL_GetTick();
 80011b4:	f7ff f970 	bl	8000498 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80011ba:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011bc:	04b6      	lsls	r6, r6, #18
 80011be:	682b      	ldr	r3, [r5, #0]
 80011c0:	4233      	tst	r3, r6
 80011c2:	d121      	bne.n	8001208 <HAL_RCC_OscConfig+0x430>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011c4:	220f      	movs	r2, #15
 80011c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80011c8:	4393      	bics	r3, r2
 80011ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80011cc:	4313      	orrs	r3, r2
 80011ce:	62eb      	str	r3, [r5, #44]	; 0x2c
 80011d0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80011d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011d4:	686a      	ldr	r2, [r5, #4]
 80011d6:	430b      	orrs	r3, r1
 80011d8:	4926      	ldr	r1, [pc, #152]	; (8001274 <HAL_RCC_OscConfig+0x49c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011da:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011dc:	400a      	ands	r2, r1
 80011de:	4313      	orrs	r3, r2
 80011e0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	682a      	ldr	r2, [r5, #0]
 80011e6:	045b      	lsls	r3, r3, #17
 80011e8:	4313      	orrs	r3, r2
 80011ea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011ec:	f7ff f954 	bl	8000498 <HAL_GetTick>
 80011f0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011f2:	04a4      	lsls	r4, r4, #18
 80011f4:	682b      	ldr	r3, [r5, #0]
 80011f6:	4223      	tst	r3, r4
 80011f8:	d000      	beq.n	80011fc <HAL_RCC_OscConfig+0x424>
 80011fa:	e62a      	b.n	8000e52 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011fc:	f7ff f94c 	bl	8000498 <HAL_GetTick>
 8001200:	1b80      	subs	r0, r0, r6
 8001202:	2802      	cmp	r0, #2
 8001204:	d9f6      	bls.n	80011f4 <HAL_RCC_OscConfig+0x41c>
 8001206:	e654      	b.n	8000eb2 <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001208:	f7ff f946 	bl	8000498 <HAL_GetTick>
 800120c:	1bc0      	subs	r0, r0, r7
 800120e:	2802      	cmp	r0, #2
 8001210:	d9d5      	bls.n	80011be <HAL_RCC_OscConfig+0x3e6>
 8001212:	e64e      	b.n	8000eb2 <HAL_RCC_OscConfig+0xda>
        tickstart = HAL_GetTick();
 8001214:	f7ff f940 	bl	8000498 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001218:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 800121a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800121c:	04a4      	lsls	r4, r4, #18
 800121e:	682b      	ldr	r3, [r5, #0]
 8001220:	4223      	tst	r3, r4
 8001222:	d100      	bne.n	8001226 <HAL_RCC_OscConfig+0x44e>
 8001224:	e615      	b.n	8000e52 <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001226:	f7ff f937 	bl	8000498 <HAL_GetTick>
 800122a:	1b80      	subs	r0, r0, r6
 800122c:	2802      	cmp	r0, #2
 800122e:	d9f6      	bls.n	800121e <HAL_RCC_OscConfig+0x446>
 8001230:	e63f      	b.n	8000eb2 <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001232:	2a01      	cmp	r2, #1
 8001234:	d100      	bne.n	8001238 <HAL_RCC_OscConfig+0x460>
 8001236:	e5d4      	b.n	8000de2 <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001238:	22c0      	movs	r2, #192	; 0xc0
        pll_config  = RCC->CFGR;
 800123a:	6858      	ldr	r0, [r3, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800123c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800123e:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8001240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001242:	4002      	ands	r2, r0
 8001244:	428a      	cmp	r2, r1
 8001246:	d000      	beq.n	800124a <HAL_RCC_OscConfig+0x472>
 8001248:	e5cb      	b.n	8000de2 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800124a:	220f      	movs	r2, #15
 800124c:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800124e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001250:	4293      	cmp	r3, r2
 8001252:	d000      	beq.n	8001256 <HAL_RCC_OscConfig+0x47e>
 8001254:	e5c5      	b.n	8000de2 <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001256:	23f0      	movs	r3, #240	; 0xf0
 8001258:	039b      	lsls	r3, r3, #14
 800125a:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800125c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800125e:	1ac0      	subs	r0, r0, r3
 8001260:	1e43      	subs	r3, r0, #1
 8001262:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8001264:	b2c0      	uxtb	r0, r0
 8001266:	e5bd      	b.n	8000de4 <HAL_RCC_OscConfig+0xc>
 8001268:	40021000 	.word	0x40021000
 800126c:	fffeffff 	.word	0xfffeffff
 8001270:	feffffff 	.word	0xfeffffff
 8001274:	ffc27fff 	.word	0xffc27fff

08001278 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001278:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800127a:	4c19      	ldr	r4, [pc, #100]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800127c:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800127e:	2210      	movs	r2, #16
 8001280:	0021      	movs	r1, r4
 8001282:	4668      	mov	r0, sp
 8001284:	f001 fa4a 	bl	800271c <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001288:	0021      	movs	r1, r4
 800128a:	ad04      	add	r5, sp, #16
 800128c:	2210      	movs	r2, #16
 800128e:	3110      	adds	r1, #16
 8001290:	0028      	movs	r0, r5
 8001292:	f001 fa43 	bl	800271c <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001296:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001298:	4e12      	ldr	r6, [pc, #72]	; (80012e4 <HAL_RCC_GetSysClockFreq+0x6c>)
 800129a:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800129c:	401a      	ands	r2, r3
 800129e:	2a08      	cmp	r2, #8
 80012a0:	d004      	beq.n	80012ac <HAL_RCC_GetSysClockFreq+0x34>
 80012a2:	2a0c      	cmp	r2, #12
 80012a4:	d11a      	bne.n	80012dc <HAL_RCC_GetSysClockFreq+0x64>
      break;
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80012a6:	4810      	ldr	r0, [pc, #64]	; (80012e8 <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80012a8:	b008      	add	sp, #32
 80012aa:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80012ac:	200f      	movs	r0, #15
 80012ae:	466a      	mov	r2, sp
 80012b0:	0c99      	lsrs	r1, r3, #18
 80012b2:	4001      	ands	r1, r0
 80012b4:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80012b6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80012b8:	4002      	ands	r2, r0
 80012ba:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80012bc:	22c0      	movs	r2, #192	; 0xc0
 80012be:	2080      	movs	r0, #128	; 0x80
 80012c0:	0252      	lsls	r2, r2, #9
 80012c2:	4013      	ands	r3, r2
 80012c4:	0240      	lsls	r0, r0, #9
 80012c6:	4283      	cmp	r3, r0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80012ca:	4808      	ldr	r0, [pc, #32]	; (80012ec <HAL_RCC_GetSysClockFreq+0x74>)
 80012cc:	e002      	b.n	80012d4 <HAL_RCC_GetSysClockFreq+0x5c>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d1fb      	bne.n	80012ca <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <HAL_RCC_GetSysClockFreq+0x70>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80012d4:	f7fe ff2a 	bl	800012c <__udivsi3>
 80012d8:	4360      	muls	r0, r4
 80012da:	e7e5      	b.n	80012a8 <HAL_RCC_GetSysClockFreq+0x30>
      sysclockfreq = HSE_VALUE;
 80012dc:	4803      	ldr	r0, [pc, #12]	; (80012ec <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 80012de:	e7e3      	b.n	80012a8 <HAL_RCC_GetSysClockFreq+0x30>
 80012e0:	08002f88 	.word	0x08002f88
 80012e4:	40021000 	.word	0x40021000
 80012e8:	02dc6c00 	.word	0x02dc6c00
 80012ec:	007a1200 	.word	0x007a1200

080012f0 <HAL_RCC_ClockConfig>:
{
 80012f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012f2:	0005      	movs	r5, r0
 80012f4:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 80012f6:	2800      	cmp	r0, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80012fa:	2001      	movs	r0, #1
}
 80012fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012fe:	2201      	movs	r2, #1
 8001300:	4c3b      	ldr	r4, [pc, #236]	; (80013f0 <HAL_RCC_ClockConfig+0x100>)
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	4013      	ands	r3, r2
 8001306:	428b      	cmp	r3, r1
 8001308:	d31c      	bcc.n	8001344 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800130a:	6829      	ldr	r1, [r5, #0]
 800130c:	078b      	lsls	r3, r1, #30
 800130e:	d422      	bmi.n	8001356 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001310:	07cb      	lsls	r3, r1, #31
 8001312:	d42f      	bmi.n	8001374 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001314:	2301      	movs	r3, #1
 8001316:	6822      	ldr	r2, [r4, #0]
 8001318:	401a      	ands	r2, r3
 800131a:	4297      	cmp	r7, r2
 800131c:	d359      	bcc.n	80013d2 <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800131e:	682b      	ldr	r3, [r5, #0]
 8001320:	4c34      	ldr	r4, [pc, #208]	; (80013f4 <HAL_RCC_ClockConfig+0x104>)
 8001322:	075b      	lsls	r3, r3, #29
 8001324:	d45d      	bmi.n	80013e2 <HAL_RCC_ClockConfig+0xf2>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001326:	f7ff ffa7 	bl	8001278 <HAL_RCC_GetSysClockFreq>
 800132a:	6863      	ldr	r3, [r4, #4]
 800132c:	4a32      	ldr	r2, [pc, #200]	; (80013f8 <HAL_RCC_ClockConfig+0x108>)
 800132e:	061b      	lsls	r3, r3, #24
 8001330:	0f1b      	lsrs	r3, r3, #28
 8001332:	5cd3      	ldrb	r3, [r2, r3]
 8001334:	40d8      	lsrs	r0, r3
 8001336:	4b31      	ldr	r3, [pc, #196]	; (80013fc <HAL_RCC_ClockConfig+0x10c>)
 8001338:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff f86c 	bl	8000418 <HAL_InitTick>
  return HAL_OK;
 8001340:	2000      	movs	r0, #0
 8001342:	e7db      	b.n	80012fc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001344:	6823      	ldr	r3, [r4, #0]
 8001346:	4393      	bics	r3, r2
 8001348:	430b      	orrs	r3, r1
 800134a:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800134c:	6823      	ldr	r3, [r4, #0]
 800134e:	4013      	ands	r3, r2
 8001350:	4299      	cmp	r1, r3
 8001352:	d1d2      	bne.n	80012fa <HAL_RCC_ClockConfig+0xa>
 8001354:	e7d9      	b.n	800130a <HAL_RCC_ClockConfig+0x1a>
 8001356:	4a27      	ldr	r2, [pc, #156]	; (80013f4 <HAL_RCC_ClockConfig+0x104>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001358:	074b      	lsls	r3, r1, #29
 800135a:	d504      	bpl.n	8001366 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800135c:	23e0      	movs	r3, #224	; 0xe0
 800135e:	6850      	ldr	r0, [r2, #4]
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4303      	orrs	r3, r0
 8001364:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001366:	20f0      	movs	r0, #240	; 0xf0
 8001368:	6853      	ldr	r3, [r2, #4]
 800136a:	4383      	bics	r3, r0
 800136c:	68a8      	ldr	r0, [r5, #8]
 800136e:	4303      	orrs	r3, r0
 8001370:	6053      	str	r3, [r2, #4]
 8001372:	e7cd      	b.n	8001310 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001374:	686a      	ldr	r2, [r5, #4]
 8001376:	4e1f      	ldr	r6, [pc, #124]	; (80013f4 <HAL_RCC_ClockConfig+0x104>)
 8001378:	2a01      	cmp	r2, #1
 800137a:	d11a      	bne.n	80013b2 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137c:	6833      	ldr	r3, [r6, #0]
 800137e:	039b      	lsls	r3, r3, #14
 8001380:	d5bb      	bpl.n	80012fa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001382:	2103      	movs	r1, #3
 8001384:	6873      	ldr	r3, [r6, #4]
 8001386:	438b      	bics	r3, r1
 8001388:	4313      	orrs	r3, r2
 800138a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800138c:	f7ff f884 	bl	8000498 <HAL_GetTick>
 8001390:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001392:	230c      	movs	r3, #12
 8001394:	6872      	ldr	r2, [r6, #4]
 8001396:	401a      	ands	r2, r3
 8001398:	686b      	ldr	r3, [r5, #4]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	429a      	cmp	r2, r3
 800139e:	d0b9      	beq.n	8001314 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013a0:	f7ff f87a 	bl	8000498 <HAL_GetTick>
 80013a4:	9b01      	ldr	r3, [sp, #4]
 80013a6:	1ac0      	subs	r0, r0, r3
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_RCC_ClockConfig+0x110>)
 80013aa:	4298      	cmp	r0, r3
 80013ac:	d9f1      	bls.n	8001392 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 80013ae:	2003      	movs	r0, #3
 80013b0:	e7a4      	b.n	80012fc <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013b2:	2a02      	cmp	r2, #2
 80013b4:	d103      	bne.n	80013be <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b6:	6833      	ldr	r3, [r6, #0]
 80013b8:	019b      	lsls	r3, r3, #6
 80013ba:	d4e2      	bmi.n	8001382 <HAL_RCC_ClockConfig+0x92>
 80013bc:	e79d      	b.n	80012fa <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80013be:	2a03      	cmp	r2, #3
 80013c0:	d103      	bne.n	80013ca <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013c2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80013c4:	03db      	lsls	r3, r3, #15
 80013c6:	d4dc      	bmi.n	8001382 <HAL_RCC_ClockConfig+0x92>
 80013c8:	e797      	b.n	80012fa <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ca:	6833      	ldr	r3, [r6, #0]
 80013cc:	079b      	lsls	r3, r3, #30
 80013ce:	d4d8      	bmi.n	8001382 <HAL_RCC_ClockConfig+0x92>
 80013d0:	e793      	b.n	80012fa <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d2:	6822      	ldr	r2, [r4, #0]
 80013d4:	439a      	bics	r2, r3
 80013d6:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d8:	6822      	ldr	r2, [r4, #0]
 80013da:	421a      	tst	r2, r3
 80013dc:	d000      	beq.n	80013e0 <HAL_RCC_ClockConfig+0xf0>
 80013de:	e78c      	b.n	80012fa <HAL_RCC_ClockConfig+0xa>
 80013e0:	e79d      	b.n	800131e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013e2:	6863      	ldr	r3, [r4, #4]
 80013e4:	4a07      	ldr	r2, [pc, #28]	; (8001404 <HAL_RCC_ClockConfig+0x114>)
 80013e6:	4013      	ands	r3, r2
 80013e8:	68ea      	ldr	r2, [r5, #12]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	6063      	str	r3, [r4, #4]
 80013ee:	e79a      	b.n	8001326 <HAL_RCC_ClockConfig+0x36>
 80013f0:	40022000 	.word	0x40022000
 80013f4:	40021000 	.word	0x40021000
 80013f8:	08002fbe 	.word	0x08002fbe
 80013fc:	20000008 	.word	0x20000008
 8001400:	00001388 	.word	0x00001388
 8001404:	fffff8ff 	.word	0xfffff8ff

08001408 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <HAL_RCC_GetPCLK1Freq+0x14>)
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <HAL_RCC_GetPCLK1Freq+0x18>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	055b      	lsls	r3, r3, #21
 8001410:	0f5b      	lsrs	r3, r3, #29
 8001412:	5cd3      	ldrb	r3, [r2, r3]
 8001414:	4a03      	ldr	r2, [pc, #12]	; (8001424 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001416:	6810      	ldr	r0, [r2, #0]
 8001418:	40d8      	lsrs	r0, r3
}    
 800141a:	4770      	bx	lr
 800141c:	40021000 	.word	0x40021000
 8001420:	08002fce 	.word	0x08002fce
 8001424:	20000008 	.word	0x20000008

08001428 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001428:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800142a:	6803      	ldr	r3, [r0, #0]
{
 800142c:	b085      	sub	sp, #20
 800142e:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001430:	03db      	lsls	r3, r3, #15
 8001432:	d528      	bpl.n	8001486 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001434:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001436:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001438:	4c44      	ldr	r4, [pc, #272]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800143a:	0552      	lsls	r2, r2, #21
 800143c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800143e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001440:	4213      	tst	r3, r2
 8001442:	d108      	bne.n	8001456 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001444:	69e3      	ldr	r3, [r4, #28]
 8001446:	4313      	orrs	r3, r2
 8001448:	61e3      	str	r3, [r4, #28]
 800144a:	69e3      	ldr	r3, [r4, #28]
 800144c:	4013      	ands	r3, r2
 800144e:	9303      	str	r3, [sp, #12]
 8001450:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001452:	2301      	movs	r3, #1
 8001454:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001456:	2780      	movs	r7, #128	; 0x80
 8001458:	4e3d      	ldr	r6, [pc, #244]	; (8001550 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 800145a:	007f      	lsls	r7, r7, #1
 800145c:	6833      	ldr	r3, [r6, #0]
 800145e:	423b      	tst	r3, r7
 8001460:	d041      	beq.n	80014e6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001462:	22c0      	movs	r2, #192	; 0xc0
 8001464:	6a23      	ldr	r3, [r4, #32]
 8001466:	0092      	lsls	r2, r2, #2
 8001468:	4013      	ands	r3, r2
 800146a:	4e3a      	ldr	r6, [pc, #232]	; (8001554 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800146c:	d14d      	bne.n	800150a <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800146e:	6a23      	ldr	r3, [r4, #32]
 8001470:	401e      	ands	r6, r3
 8001472:	686b      	ldr	r3, [r5, #4]
 8001474:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001476:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001478:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 800147a:	2b01      	cmp	r3, #1
 800147c:	d103      	bne.n	8001486 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800147e:	69e3      	ldr	r3, [r4, #28]
 8001480:	4a35      	ldr	r2, [pc, #212]	; (8001558 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001482:	4013      	ands	r3, r2
 8001484:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001486:	682b      	ldr	r3, [r5, #0]
 8001488:	07da      	lsls	r2, r3, #31
 800148a:	d506      	bpl.n	800149a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800148c:	2003      	movs	r0, #3
 800148e:	492f      	ldr	r1, [pc, #188]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001490:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001492:	4382      	bics	r2, r0
 8001494:	68a8      	ldr	r0, [r5, #8]
 8001496:	4302      	orrs	r2, r0
 8001498:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800149a:	079a      	lsls	r2, r3, #30
 800149c:	d506      	bpl.n	80014ac <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800149e:	492b      	ldr	r1, [pc, #172]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80014a0:	482e      	ldr	r0, [pc, #184]	; (800155c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80014a2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80014a4:	4002      	ands	r2, r0
 80014a6:	68e8      	ldr	r0, [r5, #12]
 80014a8:	4302      	orrs	r2, r0
 80014aa:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80014ac:	035a      	lsls	r2, r3, #13
 80014ae:	d506      	bpl.n	80014be <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80014b0:	4926      	ldr	r1, [pc, #152]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80014b2:	482b      	ldr	r0, [pc, #172]	; (8001560 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80014b4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80014b6:	4002      	ands	r2, r0
 80014b8:	6928      	ldr	r0, [r5, #16]
 80014ba:	4302      	orrs	r2, r0
 80014bc:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80014be:	069a      	lsls	r2, r3, #26
 80014c0:	d506      	bpl.n	80014d0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80014c2:	2010      	movs	r0, #16
 80014c4:	4921      	ldr	r1, [pc, #132]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80014c6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80014c8:	4382      	bics	r2, r0
 80014ca:	6968      	ldr	r0, [r5, #20]
 80014cc:	4302      	orrs	r2, r0
 80014ce:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80014d0:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80014d2:	055b      	lsls	r3, r3, #21
 80014d4:	d517      	bpl.n	8001506 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80014d6:	2140      	movs	r1, #64	; 0x40
 80014d8:	4a1c      	ldr	r2, [pc, #112]	; (800154c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80014da:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80014dc:	438b      	bics	r3, r1
 80014de:	69a9      	ldr	r1, [r5, #24]
 80014e0:	430b      	orrs	r3, r1
 80014e2:	6313      	str	r3, [r2, #48]	; 0x30
 80014e4:	e00f      	b.n	8001506 <HAL_RCCEx_PeriphCLKConfig+0xde>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e6:	6833      	ldr	r3, [r6, #0]
 80014e8:	433b      	orrs	r3, r7
 80014ea:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80014ec:	f7fe ffd4 	bl	8000498 <HAL_GetTick>
 80014f0:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f2:	6833      	ldr	r3, [r6, #0]
 80014f4:	423b      	tst	r3, r7
 80014f6:	d1b4      	bne.n	8001462 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f8:	f7fe ffce 	bl	8000498 <HAL_GetTick>
 80014fc:	9b01      	ldr	r3, [sp, #4]
 80014fe:	1ac0      	subs	r0, r0, r3
 8001500:	2864      	cmp	r0, #100	; 0x64
 8001502:	d9f6      	bls.n	80014f2 <HAL_RCCEx_PeriphCLKConfig+0xca>
          return HAL_TIMEOUT;
 8001504:	2003      	movs	r0, #3
}
 8001506:	b005      	add	sp, #20
 8001508:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800150a:	6869      	ldr	r1, [r5, #4]
 800150c:	400a      	ands	r2, r1
 800150e:	4293      	cmp	r3, r2
 8001510:	d0ad      	beq.n	800146e <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001512:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001514:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001516:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001518:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 800151a:	025b      	lsls	r3, r3, #9
 800151c:	4303      	orrs	r3, r0
 800151e:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001520:	6a23      	ldr	r3, [r4, #32]
 8001522:	4810      	ldr	r0, [pc, #64]	; (8001564 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001524:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001526:	4003      	ands	r3, r0
 8001528:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 800152a:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800152c:	07d3      	lsls	r3, r2, #31
 800152e:	d59e      	bpl.n	800146e <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8001530:	f7fe ffb2 	bl	8000498 <HAL_GetTick>
 8001534:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001536:	2202      	movs	r2, #2
 8001538:	6a23      	ldr	r3, [r4, #32]
 800153a:	4213      	tst	r3, r2
 800153c:	d197      	bne.n	800146e <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153e:	f7fe ffab 	bl	8000498 <HAL_GetTick>
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001544:	1bc0      	subs	r0, r0, r7
 8001546:	4298      	cmp	r0, r3
 8001548:	d9f5      	bls.n	8001536 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800154a:	e7db      	b.n	8001504 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800154c:	40021000 	.word	0x40021000
 8001550:	40007000 	.word	0x40007000
 8001554:	fffffcff 	.word	0xfffffcff
 8001558:	efffffff 	.word	0xefffffff
 800155c:	fffcffff 	.word	0xfffcffff
 8001560:	fff3ffff 	.word	0xfff3ffff
 8001564:	fffeffff 	.word	0xfffeffff
 8001568:	00001388 	.word	0x00001388

0800156c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800156c:	b570      	push	{r4, r5, r6, lr}
 800156e:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001570:	6925      	ldr	r5, [r4, #16]
 8001572:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001574:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001576:	432a      	orrs	r2, r5
 8001578:	6965      	ldr	r5, [r4, #20]
 800157a:	69c1      	ldr	r1, [r0, #28]
 800157c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	4d65      	ldr	r5, [pc, #404]	; (8001718 <UART_SetConfig+0x1ac>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001582:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001584:	4028      	ands	r0, r5
 8001586:	4302      	orrs	r2, r0
 8001588:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	4863      	ldr	r0, [pc, #396]	; (800171c <UART_SetConfig+0x1b0>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 800158e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001590:	4002      	ands	r2, r0
 8001592:	68e0      	ldr	r0, [r4, #12]
 8001594:	4302      	orrs	r2, r0
 8001596:	605a      	str	r2, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8001598:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800159a:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 800159c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800159e:	4d60      	ldr	r5, [pc, #384]	; (8001720 <UART_SetConfig+0x1b4>)
 80015a0:	4028      	ands	r0, r5
 80015a2:	4302      	orrs	r2, r0
 80015a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015a6:	4a5f      	ldr	r2, [pc, #380]	; (8001724 <UART_SetConfig+0x1b8>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d113      	bne.n	80015d4 <UART_SetConfig+0x68>
 80015ac:	2203      	movs	r2, #3
 80015ae:	4b5e      	ldr	r3, [pc, #376]	; (8001728 <UART_SetConfig+0x1bc>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4013      	ands	r3, r2
 80015b4:	4a5d      	ldr	r2, [pc, #372]	; (800172c <UART_SetConfig+0x1c0>)
 80015b6:	5cd0      	ldrb	r0, [r2, r3]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	4299      	cmp	r1, r3
 80015be:	d100      	bne.n	80015c2 <UART_SetConfig+0x56>
 80015c0:	e09c      	b.n	80016fc <UART_SetConfig+0x190>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80015c2:	2808      	cmp	r0, #8
 80015c4:	d861      	bhi.n	800168a <UART_SetConfig+0x11e>
 80015c6:	f7fe fd9d 	bl	8000104 <__gnu_thumb1_case_uqi>
 80015ca:	6062      	.short	0x6062
 80015cc:	60776067 	.word	0x60776067
 80015d0:	6060      	.short	0x6060
 80015d2:	7a          	.byte	0x7a
 80015d3:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015d4:	4a56      	ldr	r2, [pc, #344]	; (8001730 <UART_SetConfig+0x1c4>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d138      	bne.n	800164c <UART_SetConfig+0xe0>
 80015da:	22c0      	movs	r2, #192	; 0xc0
 80015dc:	2080      	movs	r0, #128	; 0x80
 80015de:	4b52      	ldr	r3, [pc, #328]	; (8001728 <UART_SetConfig+0x1bc>)
 80015e0:	0292      	lsls	r2, r2, #10
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	0240      	lsls	r0, r0, #9
 80015e6:	4013      	ands	r3, r2
 80015e8:	4283      	cmp	r3, r0
 80015ea:	d100      	bne.n	80015ee <UART_SetConfig+0x82>
 80015ec:	e07f      	b.n	80016ee <UART_SetConfig+0x182>
 80015ee:	d808      	bhi.n	8001602 <UART_SetConfig+0x96>
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d100      	bne.n	80015f6 <UART_SetConfig+0x8a>
 80015f4:	e071      	b.n	80016da <UART_SetConfig+0x16e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015f6:	2380      	movs	r3, #128	; 0x80
      ret = HAL_ERROR;
 80015f8:	2001      	movs	r0, #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	4299      	cmp	r1, r3
 80015fe:	d144      	bne.n	800168a <UART_SetConfig+0x11e>
 8001600:	e020      	b.n	8001644 <UART_SetConfig+0xd8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001602:	2080      	movs	r0, #128	; 0x80
 8001604:	0280      	lsls	r0, r0, #10
 8001606:	4283      	cmp	r3, r0
 8001608:	d05e      	beq.n	80016c8 <UART_SetConfig+0x15c>
 800160a:	4293      	cmp	r3, r2
 800160c:	d1f3      	bne.n	80015f6 <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	4299      	cmp	r1, r3
 8001614:	d140      	bne.n	8001698 <UART_SetConfig+0x12c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001616:	6863      	ldr	r3, [r4, #4]
 8001618:	0858      	lsrs	r0, r3, #1
 800161a:	4b46      	ldr	r3, [pc, #280]	; (8001734 <UART_SetConfig+0x1c8>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800161c:	18c0      	adds	r0, r0, r3
 800161e:	6861      	ldr	r1, [r4, #4]
 8001620:	f7fe fd84 	bl	800012c <__udivsi3>
 8001624:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001626:	0003      	movs	r3, r0
 8001628:	4a43      	ldr	r2, [pc, #268]	; (8001738 <UART_SetConfig+0x1cc>)
 800162a:	3b10      	subs	r3, #16
 800162c:	4293      	cmp	r3, r2
 800162e:	d82c      	bhi.n	800168a <UART_SetConfig+0x11e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001630:	230f      	movs	r3, #15
 8001632:	0002      	movs	r2, r0
 8001634:	439a      	bics	r2, r3
 8001636:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001638:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 800163a:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800163c:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 800163e:	4318      	orrs	r0, r3
 8001640:	60d0      	str	r0, [r2, #12]
 8001642:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001644:	2300      	movs	r3, #0
 8001646:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001648:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 800164a:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800164c:	4a3b      	ldr	r2, [pc, #236]	; (800173c <UART_SetConfig+0x1d0>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d10c      	bne.n	800166c <UART_SetConfig+0x100>
 8001652:	22c0      	movs	r2, #192	; 0xc0
 8001654:	2080      	movs	r0, #128	; 0x80
 8001656:	4b34      	ldr	r3, [pc, #208]	; (8001728 <UART_SetConfig+0x1bc>)
 8001658:	0312      	lsls	r2, r2, #12
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	02c0      	lsls	r0, r0, #11
 800165e:	4013      	ands	r3, r2
 8001660:	4283      	cmp	r3, r0
 8001662:	d044      	beq.n	80016ee <UART_SetConfig+0x182>
 8001664:	d9c4      	bls.n	80015f0 <UART_SetConfig+0x84>
 8001666:	2080      	movs	r0, #128	; 0x80
 8001668:	0300      	lsls	r0, r0, #12
 800166a:	e7cc      	b.n	8001606 <UART_SetConfig+0x9a>
 800166c:	4a34      	ldr	r2, [pc, #208]	; (8001740 <UART_SetConfig+0x1d4>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d033      	beq.n	80016da <UART_SetConfig+0x16e>
 8001672:	4a34      	ldr	r2, [pc, #208]	; (8001744 <UART_SetConfig+0x1d8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d030      	beq.n	80016da <UART_SetConfig+0x16e>
 8001678:	4a33      	ldr	r2, [pc, #204]	; (8001748 <UART_SetConfig+0x1dc>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d02d      	beq.n	80016da <UART_SetConfig+0x16e>
 800167e:	4a33      	ldr	r2, [pc, #204]	; (800174c <UART_SetConfig+0x1e0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d02a      	beq.n	80016da <UART_SetConfig+0x16e>
 8001684:	4a32      	ldr	r2, [pc, #200]	; (8001750 <UART_SetConfig+0x1e4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d027      	beq.n	80016da <UART_SetConfig+0x16e>
      ret = HAL_ERROR;
 800168a:	2001      	movs	r0, #1
 800168c:	e7da      	b.n	8001644 <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800168e:	f7ff febb 	bl	8001408 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001692:	6863      	ldr	r3, [r4, #4]
 8001694:	085b      	lsrs	r3, r3, #1
 8001696:	e002      	b.n	800169e <UART_SetConfig+0x132>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001698:	6863      	ldr	r3, [r4, #4]
 800169a:	0858      	lsrs	r0, r3, #1
 800169c:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <UART_SetConfig+0x1e8>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800169e:	18c0      	adds	r0, r0, r3
 80016a0:	6861      	ldr	r1, [r4, #4]
 80016a2:	f7fe fd43 	bl	800012c <__udivsi3>
 80016a6:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80016a8:	0003      	movs	r3, r0
 80016aa:	4a23      	ldr	r2, [pc, #140]	; (8001738 <UART_SetConfig+0x1cc>)
 80016ac:	3b10      	subs	r3, #16
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d8eb      	bhi.n	800168a <UART_SetConfig+0x11e>
      huart->Instance->BRR = usartdiv;
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	60d8      	str	r0, [r3, #12]
 80016b6:	e7c4      	b.n	8001642 <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetSysClockFreq();
 80016b8:	f7ff fdde 	bl	8001278 <HAL_RCC_GetSysClockFreq>
 80016bc:	e7e9      	b.n	8001692 <UART_SetConfig+0x126>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80016be:	6863      	ldr	r3, [r4, #4]
 80016c0:	0858      	lsrs	r0, r3, #1
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	e7ea      	b.n	800169e <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	4299      	cmp	r1, r3
 80016ce:	d1f6      	bne.n	80016be <UART_SetConfig+0x152>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80016d0:	6863      	ldr	r3, [r4, #4]
 80016d2:	0858      	lsrs	r0, r3, #1
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	025b      	lsls	r3, r3, #9
 80016d8:	e7a0      	b.n	800161c <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	4299      	cmp	r1, r3
 80016e0:	d1d5      	bne.n	800168e <UART_SetConfig+0x122>
        pclk = HAL_RCC_GetPCLK1Freq();
 80016e2:	f7ff fe91 	bl	8001408 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80016e6:	6863      	ldr	r3, [r4, #4]
 80016e8:	0040      	lsls	r0, r0, #1
 80016ea:	085b      	lsrs	r3, r3, #1
 80016ec:	e796      	b.n	800161c <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	4299      	cmp	r1, r3
 80016f4:	d1e0      	bne.n	80016b8 <UART_SetConfig+0x14c>
        pclk = HAL_RCC_GetSysClockFreq();
 80016f6:	f7ff fdbf 	bl	8001278 <HAL_RCC_GetSysClockFreq>
 80016fa:	e7f4      	b.n	80016e6 <UART_SetConfig+0x17a>
    switch (clocksource)
 80016fc:	2808      	cmp	r0, #8
 80016fe:	d8c4      	bhi.n	800168a <UART_SetConfig+0x11e>
 8001700:	f7fe fd0a 	bl	8000118 <__gnu_thumb1_case_shi>
 8001704:	ffc3ffef 	.word	0xffc3ffef
 8001708:	ffc3ff89 	.word	0xffc3ff89
 800170c:	ffc3fff9 	.word	0xffc3fff9
 8001710:	ffc3ffc3 	.word	0xffc3ffc3
 8001714:	ffe6      	.short	0xffe6
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	efff69f3 	.word	0xefff69f3
 800171c:	ffffcfff 	.word	0xffffcfff
 8001720:	fffff4ff 	.word	0xfffff4ff
 8001724:	40013800 	.word	0x40013800
 8001728:	40021000 	.word	0x40021000
 800172c:	08002fa8 	.word	0x08002fa8
 8001730:	40004400 	.word	0x40004400
 8001734:	00f42400 	.word	0x00f42400
 8001738:	0000ffef 	.word	0x0000ffef
 800173c:	40004800 	.word	0x40004800
 8001740:	40004c00 	.word	0x40004c00
 8001744:	40005000 	.word	0x40005000
 8001748:	40011400 	.word	0x40011400
 800174c:	40011800 	.word	0x40011800
 8001750:	40011c00 	.word	0x40011c00
 8001754:	007a1200 	.word	0x007a1200

08001758 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001758:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800175a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800175c:	07da      	lsls	r2, r3, #31
 800175e:	d506      	bpl.n	800176e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001760:	6801      	ldr	r1, [r0, #0]
 8001762:	4c28      	ldr	r4, [pc, #160]	; (8001804 <UART_AdvFeatureConfig+0xac>)
 8001764:	684a      	ldr	r2, [r1, #4]
 8001766:	4022      	ands	r2, r4
 8001768:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800176a:	4322      	orrs	r2, r4
 800176c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800176e:	079a      	lsls	r2, r3, #30
 8001770:	d506      	bpl.n	8001780 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001772:	6801      	ldr	r1, [r0, #0]
 8001774:	4c24      	ldr	r4, [pc, #144]	; (8001808 <UART_AdvFeatureConfig+0xb0>)
 8001776:	684a      	ldr	r2, [r1, #4]
 8001778:	4022      	ands	r2, r4
 800177a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800177c:	4322      	orrs	r2, r4
 800177e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001780:	075a      	lsls	r2, r3, #29
 8001782:	d506      	bpl.n	8001792 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001784:	6801      	ldr	r1, [r0, #0]
 8001786:	4c21      	ldr	r4, [pc, #132]	; (800180c <UART_AdvFeatureConfig+0xb4>)
 8001788:	684a      	ldr	r2, [r1, #4]
 800178a:	4022      	ands	r2, r4
 800178c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800178e:	4322      	orrs	r2, r4
 8001790:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001792:	071a      	lsls	r2, r3, #28
 8001794:	d506      	bpl.n	80017a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001796:	6801      	ldr	r1, [r0, #0]
 8001798:	4c1d      	ldr	r4, [pc, #116]	; (8001810 <UART_AdvFeatureConfig+0xb8>)
 800179a:	684a      	ldr	r2, [r1, #4]
 800179c:	4022      	ands	r2, r4
 800179e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80017a0:	4322      	orrs	r2, r4
 80017a2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80017a4:	06da      	lsls	r2, r3, #27
 80017a6:	d506      	bpl.n	80017b6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80017a8:	6801      	ldr	r1, [r0, #0]
 80017aa:	4c1a      	ldr	r4, [pc, #104]	; (8001814 <UART_AdvFeatureConfig+0xbc>)
 80017ac:	688a      	ldr	r2, [r1, #8]
 80017ae:	4022      	ands	r2, r4
 80017b0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80017b2:	4322      	orrs	r2, r4
 80017b4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80017b6:	069a      	lsls	r2, r3, #26
 80017b8:	d506      	bpl.n	80017c8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80017ba:	6801      	ldr	r1, [r0, #0]
 80017bc:	4c16      	ldr	r4, [pc, #88]	; (8001818 <UART_AdvFeatureConfig+0xc0>)
 80017be:	688a      	ldr	r2, [r1, #8]
 80017c0:	4022      	ands	r2, r4
 80017c2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80017c4:	4322      	orrs	r2, r4
 80017c6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80017c8:	065a      	lsls	r2, r3, #25
 80017ca:	d510      	bpl.n	80017ee <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80017cc:	6801      	ldr	r1, [r0, #0]
 80017ce:	4d13      	ldr	r5, [pc, #76]	; (800181c <UART_AdvFeatureConfig+0xc4>)
 80017d0:	684a      	ldr	r2, [r1, #4]
 80017d2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80017d4:	402a      	ands	r2, r5
 80017d6:	4322      	orrs	r2, r4
 80017d8:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80017da:	2280      	movs	r2, #128	; 0x80
 80017dc:	0352      	lsls	r2, r2, #13
 80017de:	4294      	cmp	r4, r2
 80017e0:	d105      	bne.n	80017ee <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80017e2:	684a      	ldr	r2, [r1, #4]
 80017e4:	4c0e      	ldr	r4, [pc, #56]	; (8001820 <UART_AdvFeatureConfig+0xc8>)
 80017e6:	4022      	ands	r2, r4
 80017e8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80017ea:	4322      	orrs	r2, r4
 80017ec:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80017ee:	061b      	lsls	r3, r3, #24
 80017f0:	d506      	bpl.n	8001800 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80017f2:	6802      	ldr	r2, [r0, #0]
 80017f4:	490b      	ldr	r1, [pc, #44]	; (8001824 <UART_AdvFeatureConfig+0xcc>)
 80017f6:	6853      	ldr	r3, [r2, #4]
 80017f8:	400b      	ands	r3, r1
 80017fa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80017fc:	430b      	orrs	r3, r1
 80017fe:	6053      	str	r3, [r2, #4]
  }
}
 8001800:	bd30      	pop	{r4, r5, pc}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	fffdffff 	.word	0xfffdffff
 8001808:	fffeffff 	.word	0xfffeffff
 800180c:	fffbffff 	.word	0xfffbffff
 8001810:	ffff7fff 	.word	0xffff7fff
 8001814:	ffffefff 	.word	0xffffefff
 8001818:	ffffdfff 	.word	0xffffdfff
 800181c:	ffefffff 	.word	0xffefffff
 8001820:	ff9fffff 	.word	0xff9fffff
 8001824:	fff7ffff 	.word	0xfff7ffff

08001828 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800182a:	2780      	movs	r7, #128	; 0x80
{
 800182c:	0004      	movs	r4, r0
 800182e:	000e      	movs	r6, r1
 8001830:	0015      	movs	r5, r2
 8001832:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001834:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001836:	6822      	ldr	r2, [r4, #0]
 8001838:	69d3      	ldr	r3, [r2, #28]
 800183a:	4033      	ands	r3, r6
 800183c:	1b9b      	subs	r3, r3, r6
 800183e:	4259      	negs	r1, r3
 8001840:	414b      	adcs	r3, r1
 8001842:	42ab      	cmp	r3, r5
 8001844:	d001      	beq.n	800184a <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001846:	2000      	movs	r0, #0
 8001848:	e01c      	b.n	8001884 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800184a:	9b08      	ldr	r3, [sp, #32]
 800184c:	3301      	adds	r3, #1
 800184e:	d0f3      	beq.n	8001838 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001850:	f7fe fe22 	bl	8000498 <HAL_GetTick>
 8001854:	9b01      	ldr	r3, [sp, #4]
 8001856:	9a08      	ldr	r2, [sp, #32]
 8001858:	1ac0      	subs	r0, r0, r3
 800185a:	6823      	ldr	r3, [r4, #0]
 800185c:	4282      	cmp	r2, r0
 800185e:	d301      	bcc.n	8001864 <UART_WaitOnFlagUntilTimeout+0x3c>
 8001860:	2a00      	cmp	r2, #0
 8001862:	d110      	bne.n	8001886 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4913      	ldr	r1, [pc, #76]	; (80018b4 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8001868:	400a      	ands	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	31a3      	adds	r1, #163	; 0xa3
 8001870:	31ff      	adds	r1, #255	; 0xff
 8001872:	438a      	bics	r2, r1
 8001874:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001876:	2320      	movs	r3, #32
 8001878:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800187a:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 800187c:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800187e:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8001880:	3470      	adds	r4, #112	; 0x70
 8001882:	7023      	strb	r3, [r4, #0]
}
 8001884:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001886:	2104      	movs	r1, #4
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	420a      	tst	r2, r1
 800188c:	d0d3      	beq.n	8001836 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800188e:	69da      	ldr	r2, [r3, #28]
 8001890:	423a      	tst	r2, r7
 8001892:	d0d0      	beq.n	8001836 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001894:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4906      	ldr	r1, [pc, #24]	; (80018b4 <UART_WaitOnFlagUntilTimeout+0x8c>)
 800189a:	400a      	ands	r2, r1
 800189c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	31a3      	adds	r1, #163	; 0xa3
 80018a2:	31ff      	adds	r1, #255	; 0xff
 80018a4:	438a      	bics	r2, r1
 80018a6:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80018a8:	2320      	movs	r3, #32
 80018aa:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80018ac:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80018ae:	67e3      	str	r3, [r4, #124]	; 0x7c
 80018b0:	e7e4      	b.n	800187c <UART_WaitOnFlagUntilTimeout+0x54>
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	fffffe5f 	.word	0xfffffe5f

080018b8 <HAL_UART_Transmit>:
{
 80018b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ba:	b087      	sub	sp, #28
 80018bc:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 80018be:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 80018c0:	0004      	movs	r4, r0
 80018c2:	000d      	movs	r5, r1
 80018c4:	0017      	movs	r7, r2
    return HAL_BUSY;
 80018c6:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80018c8:	2b20      	cmp	r3, #32
 80018ca:	d149      	bne.n	8001960 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 80018cc:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80018ce:	2900      	cmp	r1, #0
 80018d0:	d046      	beq.n	8001960 <HAL_UART_Transmit+0xa8>
 80018d2:	2a00      	cmp	r2, #0
 80018d4:	d044      	beq.n	8001960 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	68a2      	ldr	r2, [r4, #8]
 80018da:	015b      	lsls	r3, r3, #5
 80018dc:	429a      	cmp	r2, r3
 80018de:	d104      	bne.n	80018ea <HAL_UART_Transmit+0x32>
 80018e0:	6923      	ldr	r3, [r4, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 80018e6:	4201      	tst	r1, r0
 80018e8:	d13a      	bne.n	8001960 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 80018ea:	0023      	movs	r3, r4
 80018ec:	3370      	adds	r3, #112	; 0x70
 80018ee:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80018f0:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80018f2:	2a01      	cmp	r2, #1
 80018f4:	d034      	beq.n	8001960 <HAL_UART_Transmit+0xa8>
 80018f6:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018f8:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 80018fa:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018fc:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018fe:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001900:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 8001902:	f7fe fdc9 	bl	8000498 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8001906:	0023      	movs	r3, r4
 8001908:	3350      	adds	r3, #80	; 0x50
 800190a:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 800190c:	3302      	adds	r3, #2
 800190e:	9303      	str	r3, [sp, #12]
 8001910:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001916:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001918:	015b      	lsls	r3, r3, #5
 800191a:	429a      	cmp	r2, r3
 800191c:	d104      	bne.n	8001928 <HAL_UART_Transmit+0x70>
 800191e:	6923      	ldr	r3, [r4, #16]
 8001920:	42b3      	cmp	r3, r6
 8001922:	d101      	bne.n	8001928 <HAL_UART_Transmit+0x70>
 8001924:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8001926:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8001928:	0023      	movs	r3, r4
 800192a:	3352      	adds	r3, #82	; 0x52
 800192c:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800192e:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8001930:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 8001936:	2a00      	cmp	r2, #0
 8001938:	d10a      	bne.n	8001950 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800193a:	2140      	movs	r1, #64	; 0x40
 800193c:	0020      	movs	r0, r4
 800193e:	f7ff ff73 	bl	8001828 <UART_WaitOnFlagUntilTimeout>
 8001942:	2800      	cmp	r0, #0
 8001944:	d10b      	bne.n	800195e <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 8001946:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001948:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 800194a:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 800194c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800194e:	e007      	b.n	8001960 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001950:	2200      	movs	r2, #0
 8001952:	2180      	movs	r1, #128	; 0x80
 8001954:	0020      	movs	r0, r4
 8001956:	f7ff ff67 	bl	8001828 <UART_WaitOnFlagUntilTimeout>
 800195a:	2800      	cmp	r0, #0
 800195c:	d002      	beq.n	8001964 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 800195e:	2003      	movs	r0, #3
}
 8001960:	b007      	add	sp, #28
 8001962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001964:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8001966:	2d00      	cmp	r5, #0
 8001968:	d10b      	bne.n	8001982 <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800196a:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 800196c:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800196e:	05db      	lsls	r3, r3, #23
 8001970:	0ddb      	lsrs	r3, r3, #23
 8001972:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001974:	9b03      	ldr	r3, [sp, #12]
 8001976:	9a03      	ldr	r2, [sp, #12]
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	3b01      	subs	r3, #1
 800197c:	b29b      	uxth	r3, r3
 800197e:	8013      	strh	r3, [r2, #0]
 8001980:	e7d2      	b.n	8001928 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001982:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8001984:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001986:	8513      	strh	r3, [r2, #40]	; 0x28
 8001988:	e7f4      	b.n	8001974 <HAL_UART_Transmit+0xbc>
	...

0800198c <UART_CheckIdleState>:
{
 800198c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800198e:	2600      	movs	r6, #0
{
 8001990:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001992:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001994:	f7fe fd80 	bl	8000498 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001998:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800199a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	071b      	lsls	r3, r3, #28
 80019a0:	d415      	bmi.n	80019ce <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	075b      	lsls	r3, r3, #29
 80019a8:	d50a      	bpl.n	80019c0 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <UART_CheckIdleState+0x5c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	03c9      	lsls	r1, r1, #15
 80019b4:	002b      	movs	r3, r5
 80019b6:	0020      	movs	r0, r4
 80019b8:	f7ff ff36 	bl	8001828 <UART_WaitOnFlagUntilTimeout>
 80019bc:	2800      	cmp	r0, #0
 80019be:	d111      	bne.n	80019e4 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80019c0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80019c2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80019c4:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80019c6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80019c8:	3470      	adds	r4, #112	; 0x70
 80019ca:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80019cc:	e00b      	b.n	80019e6 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80019ce:	2180      	movs	r1, #128	; 0x80
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <UART_CheckIdleState+0x5c>)
 80019d2:	0032      	movs	r2, r6
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	0389      	lsls	r1, r1, #14
 80019d8:	0003      	movs	r3, r0
 80019da:	0020      	movs	r0, r4
 80019dc:	f7ff ff24 	bl	8001828 <UART_WaitOnFlagUntilTimeout>
 80019e0:	2800      	cmp	r0, #0
 80019e2:	d0de      	beq.n	80019a2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80019e4:	2003      	movs	r0, #3
}
 80019e6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80019e8:	01ffffff 	.word	0x01ffffff

080019ec <HAL_UART_Init>:
{
 80019ec:	b510      	push	{r4, lr}
 80019ee:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80019f0:	d101      	bne.n	80019f6 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80019f2:	2001      	movs	r0, #1
}
 80019f4:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80019f6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d104      	bne.n	8001a06 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80019fc:	0002      	movs	r2, r0
 80019fe:	3270      	adds	r2, #112	; 0x70
 8001a00:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001a02:	f000 fe09 	bl	8002618 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001a06:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001a08:	2101      	movs	r1, #1
 8001a0a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001a0c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001a0e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a10:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001a12:	438b      	bics	r3, r1
 8001a14:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a16:	f7ff fda9 	bl	800156c <UART_SetConfig>
 8001a1a:	2801      	cmp	r0, #1
 8001a1c:	d0e9      	beq.n	80019f2 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8001a24:	0020      	movs	r0, r4
 8001a26:	f7ff fe97 	bl	8001758 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a2a:	6823      	ldr	r3, [r4, #0]
 8001a2c:	4907      	ldr	r1, [pc, #28]	; (8001a4c <HAL_UART_Init+0x60>)
 8001a2e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001a30:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a32:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a34:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	438a      	bics	r2, r1
 8001a3c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	6819      	ldr	r1, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001a46:	f7ff ffa1 	bl	800198c <UART_CheckIdleState>
 8001a4a:	e7d3      	b.n	80019f4 <HAL_UART_Init+0x8>
 8001a4c:	ffffb7ff 	.word	0xffffb7ff

08001a50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a52:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	2214      	movs	r2, #20
 8001a56:	2100      	movs	r1, #0
 8001a58:	a805      	add	r0, sp, #20
 8001a5a:	f000 fe68 	bl	800272e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5e:	2080      	movs	r0, #128	; 0x80
 8001a60:	4b3e      	ldr	r3, [pc, #248]	; (8001b5c <MX_GPIO_Init+0x10c>)
 8001a62:	0300      	lsls	r0, r0, #12
 8001a64:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8001a66:	26a4      	movs	r6, #164	; 0xa4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a68:	4301      	orrs	r1, r0
 8001a6a:	6159      	str	r1, [r3, #20]
 8001a6c:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8001a6e:	2590      	movs	r5, #144	; 0x90
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a70:	4002      	ands	r2, r0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a72:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a74:	9201      	str	r2, [sp, #4]
 8001a76:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a78:	6959      	ldr	r1, [r3, #20]
 8001a7a:	03c0      	lsls	r0, r0, #15
 8001a7c:	4301      	orrs	r1, r0
 8001a7e:	6159      	str	r1, [r3, #20]
 8001a80:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8001a82:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a84:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a88:	9202      	str	r2, [sp, #8]
 8001a8a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8c:	6959      	ldr	r1, [r3, #20]
 8001a8e:	0280      	lsls	r0, r0, #10
 8001a90:	4301      	orrs	r1, r0
 8001a92:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a94:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a98:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	4002      	ands	r2, r0
 8001a9c:	9203      	str	r2, [sp, #12]
 8001a9e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa0:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8001aa2:	00f6      	lsls	r6, r6, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	615a      	str	r2, [r3, #20]
 8001aa8:	695b      	ldr	r3, [r3, #20]

  /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_1, GPIO_PIN_RESET);

   /*Configure GPIO pin Output Level */
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001aaa:	4f2d      	ldr	r7, [pc, #180]	; (8001b60 <MX_GPIO_Init+0x110>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aac:	400b      	ands	r3, r1
 8001aae:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8001ab0:	0031      	movs	r1, r6
 8001ab2:	0028      	movs	r0, r5
 8001ab4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 8001ab8:	f7fe fe0c 	bl	80006d4 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_1, GPIO_PIN_RESET);
 8001abc:	0028      	movs	r0, r5
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2112      	movs	r1, #18
 8001ac2:	f7fe fe07 	bl	80006d4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001ac6:	0038      	movs	r0, r7
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2103      	movs	r1, #3
 8001acc:	f7fe fe02 	bl	80006d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8001ad0:	0028      	movs	r0, r5
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	21c0      	movs	r1, #192	; 0xc0
 8001ad6:	f7fe fdfd 	bl	80006d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2130      	movs	r1, #48	; 0x30
 8001ade:	4821      	ldr	r0, [pc, #132]	; (8001b64 <MX_GPIO_Init+0x114>)
 8001ae0:	f7fe fdf8 	bl	80006d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ae4:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8001ae8:	019b      	lsls	r3, r3, #6
 8001aea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aec:	4b1e      	ldr	r3, [pc, #120]	; (8001b68 <MX_GPIO_Init+0x118>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001aee:	a905      	add	r1, sp, #20
 8001af0:	0038      	movs	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001af2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001af6:	f7fe fd31 	bl	800055c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA8 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_10;
 8001afa:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afc:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	a905      	add	r1, sp, #20
 8001b00:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b02:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b08:	f7fe fd28 	bl	800055c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA4 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_1;
 8001b0c:	2312      	movs	r3, #18
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	a905      	add	r1, sp, #20
 8001b10:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_1;
 8001b12:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b14:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f7fe fd1f 	bl	800055c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b1e:	23c0      	movs	r3, #192	; 0xc0
 8001b20:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b22:	3bbe      	subs	r3, #190	; 0xbe
 8001b24:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b28:	199b      	adds	r3, r3, r6
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	0028      	movs	r0, r5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b2c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2e:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f7fe fd14 	bl	800055c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b34:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	a905      	add	r1, sp, #20
 8001b38:	480a      	ldr	r0, [pc, #40]	; (8001b64 <MX_GPIO_Init+0x114>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b3a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f7fe fd0b 	bl	800055c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b46:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b48:	a905      	add	r1, sp, #20
 8001b4a:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b4c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b54:	f7fe fd02 	bl	800055c <HAL_GPIO_Init>

}
 8001b58:	b00b      	add	sp, #44	; 0x2c
 8001b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	48000800 	.word	0x48000800
 8001b64:	48000400 	.word	0x48000400
 8001b68:	10210000 	.word	0x10210000

08001b6c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b6c:	b510      	push	{r4, lr}

  hi2c1.Instance = I2C1;
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <MX_I2C1_Init+0x50>)
 8001b70:	4c13      	ldr	r4, [pc, #76]	; (8001bc0 <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b72:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8001b74:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001b76:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b78:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 8001b7a:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b7c:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b7e:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8001b80:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b82:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b84:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b86:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b88:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b8a:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b8c:	f7fe fec4 	bl	8000918 <HAL_I2C_Init>
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d001      	beq.n	8001b98 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8001b94:	f000 fb08 	bl	80021a8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b98:	2100      	movs	r1, #0
 8001b9a:	0020      	movs	r0, r4
 8001b9c:	f7ff f8d2 	bl	8000d44 <HAL_I2CEx_ConfigAnalogFilter>
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8001ba4:	f000 fb00 	bl	80021a8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ba8:	2100      	movs	r1, #0
 8001baa:	0020      	movs	r0, r4
 8001bac:	f7ff f8f0 	bl	8000d90 <HAL_I2CEx_ConfigDigitalFilter>
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bb4:	f000 faf8 	bl	80021a8 <Error_Handler>
  }

}
 8001bb8:	bd10      	pop	{r4, pc}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	40005400 	.word	0x40005400
 8001bc0:	200000a8 	.word	0x200000a8
 8001bc4:	2000090e 	.word	0x2000090e

08001bc8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001bc8:	b510      	push	{r4, lr}

  hi2c2.Instance = I2C2;
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <MX_I2C2_Init+0x50>)
 8001bcc:	4c13      	ldr	r4, [pc, #76]	; (8001c1c <MX_I2C2_Init+0x54>)
  hi2c2.Init.Timing = 0x20303E5D;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bce:	2201      	movs	r2, #1
  hi2c2.Instance = I2C2;
 8001bd0:	6023      	str	r3, [r4, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <MX_I2C2_Init+0x58>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bd4:	0020      	movs	r0, r4
  hi2c2.Init.Timing = 0x20303E5D;
 8001bd6:	6063      	str	r3, [r4, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001bd8:	2300      	movs	r3, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bda:	60e2      	str	r2, [r4, #12]
  hi2c2.Init.OwnAddress1 = 0;
 8001bdc:	60a3      	str	r3, [r4, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bde:	6123      	str	r3, [r4, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001be0:	6163      	str	r3, [r4, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001be2:	61a3      	str	r3, [r4, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001be4:	61e3      	str	r3, [r4, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001be6:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001be8:	f7fe fe96 	bl	8000918 <HAL_I2C_Init>
 8001bec:	2800      	cmp	r0, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_I2C2_Init+0x2c>
  {
    Error_Handler();
 8001bf0:	f000 fada 	bl	80021a8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	0020      	movs	r0, r4
 8001bf8:	f7ff f8a4 	bl	8000d44 <HAL_I2CEx_ConfigAnalogFilter>
 8001bfc:	2800      	cmp	r0, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_I2C2_Init+0x3c>
  {
    Error_Handler();
 8001c00:	f000 fad2 	bl	80021a8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c04:	2100      	movs	r1, #0
 8001c06:	0020      	movs	r0, r4
 8001c08:	f7ff f8c2 	bl	8000d90 <HAL_I2CEx_ConfigDigitalFilter>
 8001c0c:	2800      	cmp	r0, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c10:	f000 faca 	bl	80021a8 <Error_Handler>
  }

}
 8001c14:	bd10      	pop	{r4, pc}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	40005800 	.word	0x40005800
 8001c1c:	200000f4 	.word	0x200000f4
 8001c20:	20303e5d 	.word	0x20303e5d

08001c24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c24:	b510      	push	{r4, lr}
 8001c26:	0004      	movs	r4, r0
 8001c28:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2a:	2214      	movs	r2, #20
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	a805      	add	r0, sp, #20
 8001c30:	f000 fd7d 	bl	800272e <memset>
  if(i2cHandle->Instance==I2C1)
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	4a25      	ldr	r2, [pc, #148]	; (8001ccc <HAL_I2C_MspInit+0xa8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d122      	bne.n	8001c82 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3c:	2180      	movs	r1, #128	; 0x80
 8001c3e:	4c24      	ldr	r4, [pc, #144]	; (8001cd0 <HAL_I2C_MspInit+0xac>)
 8001c40:	02c9      	lsls	r1, r1, #11
 8001c42:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c44:	4823      	ldr	r0, [pc, #140]	; (8001cd4 <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	430a      	orrs	r2, r1
 8001c48:	6162      	str	r2, [r4, #20]
 8001c4a:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c4c:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4e:	400b      	ands	r3, r1
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c54:	23c0      	movs	r3, #192	; 0xc0
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c5a:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c5e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c60:	3b11      	subs	r3, #17
 8001c62:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c64:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001c66:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c68:	f7fe fc78 	bl	800055c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c6c:	2180      	movs	r1, #128	; 0x80
 8001c6e:	69e2      	ldr	r2, [r4, #28]
 8001c70:	0389      	lsls	r1, r1, #14
 8001c72:	430a      	orrs	r2, r1
 8001c74:	61e2      	str	r2, [r4, #28]
 8001c76:	69e3      	ldr	r3, [r4, #28]
 8001c78:	400b      	ands	r3, r1
 8001c7a:	9302      	str	r3, [sp, #8]
 8001c7c:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001c7e:	b00a      	add	sp, #40	; 0x28
 8001c80:	bd10      	pop	{r4, pc}
  else if(i2cHandle->Instance==I2C2)
 8001c82:	4a15      	ldr	r2, [pc, #84]	; (8001cd8 <HAL_I2C_MspInit+0xb4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d1fa      	bne.n	8001c7e <HAL_I2C_MspInit+0x5a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c88:	2180      	movs	r1, #128	; 0x80
 8001c8a:	4c11      	ldr	r4, [pc, #68]	; (8001cd0 <HAL_I2C_MspInit+0xac>)
 8001c8c:	02c9      	lsls	r1, r1, #11
 8001c8e:	6962      	ldr	r2, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c90:	4810      	ldr	r0, [pc, #64]	; (8001cd4 <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c92:	430a      	orrs	r2, r1
 8001c94:	6162      	str	r2, [r4, #20]
 8001c96:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c98:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	400b      	ands	r3, r1
 8001c9c:	9303      	str	r3, [sp, #12]
 8001c9e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ca0:	23c0      	movs	r3, #192	; 0xc0
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ca6:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca8:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001caa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cac:	3b11      	subs	r3, #17
 8001cae:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb0:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8001cb2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb4:	f7fe fc52 	bl	800055c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cb8:	2180      	movs	r1, #128	; 0x80
 8001cba:	69e2      	ldr	r2, [r4, #28]
 8001cbc:	03c9      	lsls	r1, r1, #15
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	61e2      	str	r2, [r4, #28]
 8001cc2:	69e3      	ldr	r3, [r4, #28]
 8001cc4:	400b      	ands	r3, r1
 8001cc6:	9304      	str	r3, [sp, #16]
 8001cc8:	9b04      	ldr	r3, [sp, #16]
}
 8001cca:	e7d8      	b.n	8001c7e <HAL_I2C_MspInit+0x5a>
 8001ccc:	40005400 	.word	0x40005400
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	48000400 	.word	0x48000400
 8001cd8:	40005800 	.word	0x40005800

08001cdc <lcd_init>:

/* Fonction qui permet d'initialiser l'écran LCD */
void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
	I2C_HandleTypeDef* Handle = I2Cx;
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES et 5x10points
 8001cdc:	230c      	movs	r3, #12
 8001cde:	780a      	ldrb	r2, [r1, #0]
{
 8001ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES et 5x10points
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	700b      	strb	r3, [r1, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8001ce6:	2380      	movs	r3, #128	; 0x80
{
 8001ce8:	0004      	movs	r4, r0
 8001cea:	b087      	sub	sp, #28
	data[0] = 0x80;
 8001cec:	ad03      	add	r5, sp, #12
 8001cee:	702b      	strb	r3, [r5, #0]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8001cf0:	3b54      	subs	r3, #84	; 0x54
 8001cf2:	4313      	orrs	r3, r2
{
 8001cf4:	000e      	movs	r6, r1

	HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
	HAL_Delay(50);

    HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8001cf6:	4f4d      	ldr	r7, [pc, #308]	; (8001e2c <lcd_init+0x150>)
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8001cf8:	706b      	strb	r3, [r5, #1]
	HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8001cfa:	2205      	movs	r2, #5
 8001cfc:	2364      	movs	r3, #100	; 0x64
 8001cfe:	217c      	movs	r1, #124	; 0x7c
 8001d00:	f7fe ff8e 	bl	8000c20 <HAL_I2C_IsDeviceReady>
	HAL_Delay(50);
 8001d04:	2032      	movs	r0, #50	; 0x32
 8001d06:	f7fe fbcd 	bl	80004a4 <HAL_Delay>
    HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8001d0a:	002a      	movs	r2, r5
 8001d0c:	9700      	str	r7, [sp, #0]
 8001d0e:	2302      	movs	r3, #2
 8001d10:	217c      	movs	r1, #124	; 0x7c
 8001d12:	0020      	movs	r0, r4
 8001d14:	f7fe fe56 	bl	80009c4 <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 8001d18:	2032      	movs	r0, #50	; 0x32
 8001d1a:	f7fe fbc3 	bl	80004a4 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001d1e:	002a      	movs	r2, r5
 8001d20:	9700      	str	r7, [sp, #0]
 8001d22:	2302      	movs	r3, #2
 8001d24:	217c      	movs	r1, #124	; 0x7c
 8001d26:	0020      	movs	r0, r4
 8001d28:	f7fe fe4c 	bl	80009c4 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8001d2c:	2005      	movs	r0, #5
 8001d2e:	f7fe fbb9 	bl	80004a4 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001d32:	9700      	str	r7, [sp, #0]
 8001d34:	002a      	movs	r2, r5
 8001d36:	2302      	movs	r3, #2
 8001d38:	217c      	movs	r1, #124	; 0x7c
 8001d3a:	0020      	movs	r0, r4
 8001d3c:	f7fe fe42 	bl	80009c4 <HAL_I2C_Master_Transmit>

	// CONTROL -> Affichage ON, Curseur OFF & Blink OFF
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001d40:	2304      	movs	r3, #4
 8001d42:	7073      	strb	r3, [r6, #1]
    // On applique le masque de displaycontrol
	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8001d44:	230c      	movs	r3, #12
 8001d46:	706b      	strb	r3, [r5, #1]
	// On envoie au lcd les registres de configuration a modifier 
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8001d48:	23fa      	movs	r3, #250	; 0xfa
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	002a      	movs	r2, r5
 8001d50:	2302      	movs	r3, #2
 8001d52:	217c      	movs	r1, #124	; 0x7c
 8001d54:	0020      	movs	r0, r4
 8001d56:	f7fe fe35 	bl	80009c4 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY; // On efface ce qui est affiché sur l'écran
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	706b      	strb	r3, [r5, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001d5e:	23fa      	movs	r3, #250	; 0xfa
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	002a      	movs	r2, r5
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	217c      	movs	r1, #124	; 0x7c
 8001d68:	2302      	movs	r3, #2
 8001d6a:	0020      	movs	r0, r4
 8001d6c:	f7fe fe2a 	bl	80009c4 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8001d70:	2002      	movs	r0, #2
 8001d72:	f7fe fb97 	bl	80004a4 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8001d76:	2306      	movs	r3, #6
 8001d78:	706b      	strb	r3, [r5, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001d7a:	23fa      	movs	r3, #250	; 0xfa
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001d7c:	2702      	movs	r7, #2
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001d7e:	009b      	lsls	r3, r3, #2
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001d80:	70b7      	strb	r7, [r6, #2]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001d82:	002a      	movs	r2, r5
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	217c      	movs	r1, #124	; 0x7c
 8001d88:	003b      	movs	r3, r7
 8001d8a:	0020      	movs	r0, r4
 8001d8c:	f7fe fe1a 	bl	80009c4 <HAL_I2C_Master_Transmit>

	// BACKLIGHT INIT
	uint8_t data_backlight[2];
	data_backlight[0] = REG_MODE1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	ad04      	add	r5, sp, #16
 8001d94:	702b      	strb	r3, [r5, #0]
	data_backlight[1] = 0;
 8001d96:	706b      	strb	r3, [r5, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001d98:	23fa      	movs	r3, #250	; 0xfa
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	002a      	movs	r2, r5
 8001da0:	003b      	movs	r3, r7
 8001da2:	21c4      	movs	r1, #196	; 0xc4
 8001da4:	0020      	movs	r0, r4
 8001da6:	f7fe fe0d 	bl	80009c4 <HAL_I2C_Master_Transmit>

	data_backlight[0] = REG_OUTPUT;
 8001daa:	2308      	movs	r3, #8
 8001dac:	702b      	strb	r3, [r5, #0]
	data_backlight[1] = 0xFF;
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001dae:	23fa      	movs	r3, #250	; 0xfa
	data_backlight[1] = 0xFF;
 8001db0:	26ff      	movs	r6, #255	; 0xff
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001db2:	009b      	lsls	r3, r3, #2
	data_backlight[1] = 0xFF;
 8001db4:	706e      	strb	r6, [r5, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001db6:	002a      	movs	r2, r5
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	21c4      	movs	r1, #196	; 0xc4
 8001dbc:	003b      	movs	r3, r7
 8001dbe:	0020      	movs	r0, r4
 8001dc0:	f7fe fe00 	bl	80009c4 <HAL_I2C_Master_Transmit>

	data_backlight[0] = REG_MODE2;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	702b      	strb	r3, [r5, #0]
	data_backlight[1] = 0x20;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	706b      	strb	r3, [r5, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001dcc:	23fa      	movs	r3, #250	; 0xfa
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	002a      	movs	r2, r5
 8001dd4:	003b      	movs	r3, r7
 8001dd6:	21c4      	movs	r1, #196	; 0xc4
 8001dd8:	0020      	movs	r0, r4
 8001dda:	f7fe fdf3 	bl	80009c4 <HAL_I2C_Master_Transmit>

	// RGB WHITE
	// On utilise l'adresse RGB_ADDRESS pour configurer le rétroéclairage
	uint8_t data_rgb[2];
	data_rgb[0] = REG_RED;
 8001dde:	2304      	movs	r3, #4
 8001de0:	ad05      	add	r5, sp, #20
 8001de2:	702b      	strb	r3, [r5, #0]
	data_rgb[1] = 255;
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001de4:	23fa      	movs	r3, #250	; 0xfa
 8001de6:	009b      	lsls	r3, r3, #2
	data_rgb[1] = 255;
 8001de8:	706e      	strb	r6, [r5, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001dea:	002a      	movs	r2, r5
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	21c4      	movs	r1, #196	; 0xc4
 8001df0:	003b      	movs	r3, r7
 8001df2:	0020      	movs	r0, r4
 8001df4:	f7fe fde6 	bl	80009c4 <HAL_I2C_Master_Transmit>

	data_rgb[0] = REG_GREEN;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	702b      	strb	r3, [r5, #0]
	data_rgb[1] = 255;
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001dfc:	23fa      	movs	r3, #250	; 0xfa
 8001dfe:	009b      	lsls	r3, r3, #2
	data_rgb[1] = 255;
 8001e00:	706e      	strb	r6, [r5, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001e02:	002a      	movs	r2, r5
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	21c4      	movs	r1, #196	; 0xc4
 8001e08:	003b      	movs	r3, r7
 8001e0a:	0020      	movs	r0, r4
 8001e0c:	f7fe fdda 	bl	80009c4 <HAL_I2C_Master_Transmit>

	data_rgb[0] = REG_BLUE;
	data_rgb[1] = 255;
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001e10:	23fa      	movs	r3, #250	; 0xfa
 8001e12:	009b      	lsls	r3, r3, #2
	data_rgb[0] = REG_BLUE;
 8001e14:	702f      	strb	r7, [r5, #0]
	data_rgb[1] = 255;
 8001e16:	706e      	strb	r6, [r5, #1]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001e18:	002a      	movs	r2, r5
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	21c4      	movs	r1, #196	; 0xc4
 8001e1e:	003b      	movs	r3, r7
 8001e20:	0020      	movs	r0, r4
 8001e22:	f7fe fdcf 	bl	80009c4 <HAL_I2C_Master_Transmit>

}
 8001e26:	b007      	add	sp, #28
 8001e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	00001388 	.word	0x00001388

08001e30 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}
/* Fonction qui permet d'afficher une chaîne de caractères sur l'écran LCD */
void lcd_print(char *str)
{
 8001e30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//I2C_HandleTypeDef* Handle = I2Cx;
    char data[2];
    data[0] = 0x40;
 8001e32:	2340      	movs	r3, #64	; 0x40
    int i=0;
    while(str[i] != '\0')
    {
            data[1] = str[i];
            HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001e34:	26fa      	movs	r6, #250	; 0xfa
 8001e36:	0004      	movs	r4, r0
    data[0] = 0x40;
 8001e38:	ad03      	add	r5, sp, #12
 8001e3a:	702b      	strb	r3, [r5, #0]
            HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001e3c:	00b6      	lsls	r6, r6, #2
 8001e3e:	3401      	adds	r4, #1
    while(str[i] != '\0')
 8001e40:	1e63      	subs	r3, r4, #1
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d100      	bne.n	8001e4a <lcd_print+0x1a>
            i++;
   }
}
 8001e48:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
            data[1] = str[i];
 8001e4a:	706b      	strb	r3, [r5, #1]
            HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001e4c:	002a      	movs	r2, r5
 8001e4e:	9600      	str	r6, [sp, #0]
 8001e50:	2302      	movs	r3, #2
 8001e52:	217c      	movs	r1, #124	; 0x7c
 8001e54:	4801      	ldr	r0, [pc, #4]	; (8001e5c <lcd_print+0x2c>)
 8001e56:	f7fe fdb5 	bl	80009c4 <HAL_I2C_Master_Transmit>
 8001e5a:	e7f0      	b.n	8001e3e <lcd_print+0xe>
 8001e5c:	200000a8 	.word	0x200000a8

08001e60 <lcd_locate>:
/* Fonction qui permet de positionner le curseur */
void lcd_locate(I2C_HandleTypeDef* I2Cx,char col, char row)
{
 8001e60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	I2C_HandleTypeDef* Handle = I2Cx;
    if(row == 0)
    {
        col = col | 0x80;
 8001e62:	2380      	movs	r3, #128	; 0x80
    if(row == 0)
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d000      	beq.n	8001e6a <lcd_locate+0xa>
    }
    else
    {
        col = col | 0xc0;
 8001e68:	23c0      	movs	r3, #192	; 0xc0
 8001e6a:	4319      	orrs	r1, r3
    }

    char data[2];
    data[0] = 0x80;
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	aa03      	add	r2, sp, #12
 8001e70:	7013      	strb	r3, [r2, #0]
    data[1] = col;
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001e72:	23fa      	movs	r3, #250	; 0xfa
 8001e74:	009b      	lsls	r3, r3, #2
    data[1] = col;
 8001e76:	7051      	strb	r1, [r2, #1]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	217c      	movs	r1, #124	; 0x7c
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	f7fe fda1 	bl	80009c4 <HAL_I2C_Master_Transmit>
}
 8001e82:	b005      	add	sp, #20
 8001e84:	bd00      	pop	{pc}
	...

08001e88 <lcd_clear>:

void lcd_clear()
{
 8001e88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t data[2];
	data[0] = 0x80;
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	aa03      	add	r2, sp, #12
 8001e8e:	7013      	strb	r3, [r2, #0]
	data[1] = LCD_CLEARDISPLAY; // On efface ce qui est affiché sur l'écran
 8001e90:	3b7f      	subs	r3, #127	; 0x7f
 8001e92:	7053      	strb	r3, [r2, #1]
    HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001e94:	23fa      	movs	r3, #250	; 0xfa
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	217c      	movs	r1, #124	; 0x7c
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	4804      	ldr	r0, [pc, #16]	; (8001eb0 <lcd_clear+0x28>)
 8001ea0:	f7fe fd90 	bl	80009c4 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8001ea4:	2002      	movs	r0, #2
 8001ea6:	f7fe fafd 	bl	80004a4 <HAL_Delay>
}
 8001eaa:	b005      	add	sp, #20
 8001eac:	bd00      	pop	{pc}
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	200000a8 	.word	0x200000a8

08001eb4 <ReadByte>:




uint8_t ReadByte(I2C_HandleTypeDef *hi2c, uint8_t address)
{
 8001eb4:	b570      	push	{r4, r5, r6, lr}
 8001eb6:	220f      	movs	r2, #15
uint8_t value;



	HAL_I2C_Master_Transmit(hi2c,SI114X_ADDR<<1,&address,1,1000);
 8001eb8:	26fa      	movs	r6, #250	; 0xfa
    HAL_I2C_Master_Receive(hi2c,SI114X_ADDR<<1,&value,1,1000);
 8001eba:	2417      	movs	r4, #23
{
 8001ebc:	0005      	movs	r5, r0
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	446a      	add	r2, sp
	HAL_I2C_Master_Transmit(hi2c,SI114X_ADDR<<1,&address,1,1000);
 8001ec2:	00b6      	lsls	r6, r6, #2
{
 8001ec4:	7011      	strb	r1, [r2, #0]
    HAL_I2C_Master_Receive(hi2c,SI114X_ADDR<<1,&value,1,1000);
 8001ec6:	446c      	add	r4, sp
	HAL_I2C_Master_Transmit(hi2c,SI114X_ADDR<<1,&address,1,1000);
 8001ec8:	9600      	str	r6, [sp, #0]
 8001eca:	2301      	movs	r3, #1
 8001ecc:	21c0      	movs	r1, #192	; 0xc0
 8001ece:	f7fe fd79 	bl	80009c4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(hi2c,SI114X_ADDR<<1,&value,1,1000);
 8001ed2:	9600      	str	r6, [sp, #0]
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	0022      	movs	r2, r4
 8001ed8:	21c0      	movs	r1, #192	; 0xc0
 8001eda:	0028      	movs	r0, r5
 8001edc:	f7fe fe08 	bl	8000af0 <HAL_I2C_Master_Receive>


    return value;
 8001ee0:	7820      	ldrb	r0, [r4, #0]
}
 8001ee2:	b006      	add	sp, #24
 8001ee4:	bd70      	pop	{r4, r5, r6, pc}

08001ee6 <WriteByte>:
/*--------------------------------------------------------*/


void WriteByte( I2C_HandleTypeDef* hi2c, uint8_t address, uint8_t val) {
 8001ee6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dataraw[2];

	dataraw[0]=address;
	dataraw[1]=val;

HAL_I2C_Master_Transmit(hi2c,SI114X_ADDR<<1,(uint8_t *)dataraw,2,1000);
 8001ee8:	23fa      	movs	r3, #250	; 0xfa
	dataraw[0]=address;
 8001eea:	ac03      	add	r4, sp, #12
HAL_I2C_Master_Transmit(hi2c,SI114X_ADDR<<1,(uint8_t *)dataraw,2,1000);
 8001eec:	009b      	lsls	r3, r3, #2
	dataraw[0]=address;
 8001eee:	7021      	strb	r1, [r4, #0]
	dataraw[1]=val;
 8001ef0:	7062      	strb	r2, [r4, #1]
HAL_I2C_Master_Transmit(hi2c,SI114X_ADDR<<1,(uint8_t *)dataraw,2,1000);
 8001ef2:	21c0      	movs	r1, #192	; 0xc0
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	0022      	movs	r2, r4
 8001ef8:	2302      	movs	r3, #2
 8001efa:	f7fe fd63 	bl	80009c4 <HAL_I2C_Master_Transmit>

}
 8001efe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001f00 <ReadHalfWord>:
/*--------------------------------------------------------//
read half word(2 bytes) data from si114x

 */
uint16_t ReadHalfWord(I2C_HandleTypeDef* hi2c,uint8_t Reg, uint8_t addr)
{
 8001f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f02:	0006      	movs	r6, r0
  uint8_t value[2];
  uint16_t Value;


 HAL_I2C_Master_Transmit(hi2c,addr<<1,&(Reg),1,1000);
 8001f04:	27fa      	movs	r7, #250	; 0xfa
{
 8001f06:	200f      	movs	r0, #15
 8001f08:	b087      	sub	sp, #28
 8001f0a:	4468      	add	r0, sp
 HAL_I2C_Master_Transmit(hi2c,addr<<1,&(Reg),1,1000);
 8001f0c:	0054      	lsls	r4, r2, #1
 8001f0e:	00bf      	lsls	r7, r7, #2
{
 8001f10:	7001      	strb	r1, [r0, #0]
 HAL_I2C_Master_Receive(hi2c,addr<<1,(uint8_t *)value,2,1000);
 8001f12:	ad05      	add	r5, sp, #20
 HAL_I2C_Master_Transmit(hi2c,addr<<1,&(Reg),1,1000);
 8001f14:	0002      	movs	r2, r0
 8001f16:	0021      	movs	r1, r4
 8001f18:	9700      	str	r7, [sp, #0]
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	0030      	movs	r0, r6
 8001f1e:	f7fe fd51 	bl	80009c4 <HAL_I2C_Master_Transmit>
 HAL_I2C_Master_Receive(hi2c,addr<<1,(uint8_t *)value,2,1000);
 8001f22:	9700      	str	r7, [sp, #0]
 8001f24:	2302      	movs	r3, #2
 8001f26:	002a      	movs	r2, r5
 8001f28:	0021      	movs	r1, r4
 8001f2a:	0030      	movs	r0, r6
 8001f2c:	f7fe fde0 	bl	8000af0 <HAL_I2C_Master_Receive>



	 Value =  value[0] ;
	 Value |= (uint16_t)value[1] << 8 ;
 8001f30:	786b      	ldrb	r3, [r5, #1]
 8001f32:	7828      	ldrb	r0, [r5, #0]
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	4318      	orrs	r0, r3
  return Value;
}
 8001f38:	b007      	add	sp, #28
 8001f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f3c <WriteParamData>:
/*--------------------------------------------------------//
writ param data

 */
uint8_t WriteParamData(I2C_HandleTypeDef* hi2c, uint8_t Reg,uint8_t Value)
{
 8001f3c:	b570      	push	{r4, r5, r6, lr}
 8001f3e:	000d      	movs	r5, r1
	//write Value into PARAMWR reg first
   WriteByte(hi2c, SI114X_WR, Value);
 8001f40:	2117      	movs	r1, #23
{
 8001f42:	0004      	movs	r4, r0
   WriteByte(hi2c, SI114X_WR, Value);
 8001f44:	f7ff ffcf 	bl	8001ee6 <WriteByte>
   WriteByte(hi2c, SI114X_COMMAND, Reg | SI114X_SET);
 8001f48:	22a0      	movs	r2, #160	; 0xa0
 8001f4a:	0020      	movs	r0, r4
 8001f4c:	432a      	orrs	r2, r5
 8001f4e:	2118      	movs	r1, #24
 8001f50:	f7ff ffc9 	bl	8001ee6 <WriteByte>
   //SI114X writes value out to PARAM_RD,read and confirm its right
   return ReadByte(hi2c, SI114X_RD);
 8001f54:	212e      	movs	r1, #46	; 0x2e
 8001f56:	0020      	movs	r0, r4
 8001f58:	f7ff ffac 	bl	8001eb4 <ReadByte>
}
 8001f5c:	bd70      	pop	{r4, r5, r6, pc}

08001f5e <DeInit>:
{
 8001f5e:	b510      	push	{r4, lr}
 8001f60:	0004      	movs	r4, r0
  WriteByte(hi2c,SI114X_UCOEFF0, 0x29);
 8001f62:	2229      	movs	r2, #41	; 0x29
 8001f64:	2113      	movs	r1, #19
 8001f66:	f7ff ffbe 	bl	8001ee6 <WriteByte>
  WriteByte(hi2c,SI114X_UCOEFF1, 0x89);
 8001f6a:	0020      	movs	r0, r4
 8001f6c:	2289      	movs	r2, #137	; 0x89
 8001f6e:	2114      	movs	r1, #20
 8001f70:	f7ff ffb9 	bl	8001ee6 <WriteByte>
  WriteByte(hi2c,SI114X_UCOEFF2, 0x02);
 8001f74:	0020      	movs	r0, r4
 8001f76:	2202      	movs	r2, #2
 8001f78:	2115      	movs	r1, #21
 8001f7a:	f7ff ffb4 	bl	8001ee6 <WriteByte>
  WriteByte(hi2c,SI114X_UCOEFF3, 0x00);
 8001f7e:	0020      	movs	r0, r4
 8001f80:	2200      	movs	r2, #0
 8001f82:	2116      	movs	r1, #22
 8001f84:	f7ff ffaf 	bl	8001ee6 <WriteByte>
  WriteParamData(hi2c,SI114X_CHLIST, SI114X_CHLIST_ENUV |SI114X_CHLIST_ENALSIR | SI114X_CHLIST_ENALSVIS |SI114X_CHLIST_ENPS1);
 8001f88:	22b1      	movs	r2, #177	; 0xb1
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	0020      	movs	r0, r4
 8001f8e:	f7ff ffd5 	bl	8001f3c <WriteParamData>
  WriteParamData(hi2c,SI114X_PS1_ADCMUX, SI114X_ADCMUX_LARGE_IR);
 8001f92:	2203      	movs	r2, #3
 8001f94:	2107      	movs	r1, #7
 8001f96:	0020      	movs	r0, r4
 8001f98:	f7ff ffd0 	bl	8001f3c <WriteParamData>
  WriteByte(hi2c,SI114X_PS_LED21, SI114X_LED_CURRENT_22MA);
 8001f9c:	0020      	movs	r0, r4
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	210f      	movs	r1, #15
 8001fa2:	f7ff ffa0 	bl	8001ee6 <WriteByte>
  WriteParamData(hi2c,SI114X_PSLED12_SELECT, SI114X_PSLED12_SELECT_PS1_LED1); //
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	2102      	movs	r1, #2
 8001faa:	0020      	movs	r0, r4
 8001fac:	f7ff ffc6 	bl	8001f3c <WriteParamData>
  WriteParamData(hi2c,SI114X_PS_ADC_GAIN, SI114X_ADC_GAIN_DIV1);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	210b      	movs	r1, #11
 8001fb4:	0020      	movs	r0, r4
 8001fb6:	f7ff ffc1 	bl	8001f3c <WriteParamData>
  WriteParamData(hi2c,SI114X_PS_ADC_COUNTER, SI114X_ADC_COUNTER_511ADCCLK);
 8001fba:	2207      	movs	r2, #7
 8001fbc:	210a      	movs	r1, #10
 8001fbe:	0020      	movs	r0, r4
 8001fc0:	f7ff ffbc 	bl	8001f3c <WriteParamData>
  WriteParamData(hi2c,SI114X_PS_ADC_MISC, SI114X_ADC_MISC_HIGHRANGE|SI114X_ADC_MISC_ADC_RAWADC);
 8001fc4:	2224      	movs	r2, #36	; 0x24
 8001fc6:	210c      	movs	r1, #12
 8001fc8:	0020      	movs	r0, r4
 8001fca:	f7ff ffb7 	bl	8001f3c <WriteParamData>
  WriteParamData(hi2c,SI114X_ALS_VIS_ADC_GAIN, SI114X_ADC_GAIN_DIV1);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2111      	movs	r1, #17
 8001fd2:	0020      	movs	r0, r4
 8001fd4:	f7ff ffb2 	bl	8001f3c <WriteParamData>
  WriteParamData(hi2c,SI114X_ALS_VIS_ADC_COUNTER, SI114X_ADC_COUNTER_511ADCCLK);
 8001fd8:	2207      	movs	r2, #7
 8001fda:	2110      	movs	r1, #16
 8001fdc:	0020      	movs	r0, r4
 8001fde:	f7ff ffad 	bl	8001f3c <WriteParamData>
  WriteParamData(hi2c,SI114X_ALS_VIS_ADC_MISC, SI114X_ADC_MISC_HIGHRANGE);
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	2112      	movs	r1, #18
 8001fe6:	0020      	movs	r0, r4
 8001fe8:	f7ff ffa8 	bl	8001f3c <WriteParamData>
  WriteParamData(hi2c,SI114X_ALS_IR_ADC_GAIN, SI114X_ADC_GAIN_DIV1);
 8001fec:	2200      	movs	r2, #0
 8001fee:	211e      	movs	r1, #30
 8001ff0:	0020      	movs	r0, r4
 8001ff2:	f7ff ffa3 	bl	8001f3c <WriteParamData>
  WriteParamData(hi2c,SI114X_ALS_IR_ADC_COUNTER, SI114X_ADC_COUNTER_511ADCCLK);
 8001ff6:	2207      	movs	r2, #7
 8001ff8:	211d      	movs	r1, #29
 8001ffa:	0020      	movs	r0, r4
 8001ffc:	f7ff ff9e 	bl	8001f3c <WriteParamData>
  WriteParamData(hi2c,SI114X_ALS_IR_ADC_MISC, SI114X_ADC_MISC_HIGHRANGE);
 8002000:	2220      	movs	r2, #32
 8002002:	211f      	movs	r1, #31
 8002004:	0020      	movs	r0, r4
 8002006:	f7ff ff99 	bl	8001f3c <WriteParamData>
  WriteByte(hi2c,SI114X_INT_CFG, SI114X_INT_CFG_INTOE);
 800200a:	0020      	movs	r0, r4
 800200c:	2201      	movs	r2, #1
 800200e:	2103      	movs	r1, #3
 8002010:	f7ff ff69 	bl	8001ee6 <WriteByte>
  WriteByte(hi2c,SI114X_IRQ_ENABLE, SI114X_IRQEN_ALS);
 8002014:	0020      	movs	r0, r4
 8002016:	2201      	movs	r2, #1
 8002018:	2104      	movs	r1, #4
 800201a:	f7ff ff64 	bl	8001ee6 <WriteByte>
  WriteByte(hi2c,SI114X_MEAS_RATE0, 0xFF);
 800201e:	0020      	movs	r0, r4
 8002020:	22ff      	movs	r2, #255	; 0xff
 8002022:	2108      	movs	r1, #8
 8002024:	f7ff ff5f 	bl	8001ee6 <WriteByte>
  WriteByte(hi2c,SI114X_COMMAND, SI114X_PSALS_AUTO);
 8002028:	220f      	movs	r2, #15
 800202a:	2118      	movs	r1, #24
 800202c:	0020      	movs	r0, r4
 800202e:	f7ff ff5a 	bl	8001ee6 <WriteByte>
}
 8002032:	bd10      	pop	{r4, pc}

08002034 <ReadVisible>:
/*--------------------------------------------------------//
Read Visible Value

 */
 uint16_t ReadVisible(I2C_HandleTypeDef* hi2c,uint8_t addr)
{
 8002034:	b510      	push	{r4, lr}
 8002036:	000a      	movs	r2, r1
  return ReadHalfWord(hi2c, SI114X_ALS_VIS_DATA0, addr);
 8002038:	2122      	movs	r1, #34	; 0x22
 800203a:	f7ff ff61 	bl	8001f00 <ReadHalfWord>
}
 800203e:	bd10      	pop	{r4, pc}

08002040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002040:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002042:	2610      	movs	r6, #16
{
 8002044:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002046:	2234      	movs	r2, #52	; 0x34
 8002048:	2100      	movs	r1, #0
 800204a:	a80b      	add	r0, sp, #44	; 0x2c
 800204c:	f000 fb6f 	bl	800272e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002050:	0032      	movs	r2, r6
 8002052:	2100      	movs	r1, #0
 8002054:	4668      	mov	r0, sp
 8002056:	f000 fb6a 	bl	800272e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800205a:	221c      	movs	r2, #28
 800205c:	2100      	movs	r1, #0
 800205e:	a804      	add	r0, sp, #16
 8002060:	f000 fb65 	bl	800272e <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800206a:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800206c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800206e:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002070:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002072:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002074:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002076:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002078:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800207a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800207c:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 800207e:	9517      	str	r5, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002080:	f7fe feaa 	bl	8000dd8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002084:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002086:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002088:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800208a:	0029      	movs	r1, r5
 800208c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800208e:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002090:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002092:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002094:	f7ff f92c 	bl	80012f0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002098:	2322      	movs	r3, #34	; 0x22
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800209a:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800209c:	9304      	str	r3, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800209e:	9407      	str	r4, [sp, #28]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80020a0:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020a2:	f7ff f9c1 	bl	8001428 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80020a6:	b018      	add	sp, #96	; 0x60
 80020a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080020ac <main>:
{
 80020ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    HAL_Init();
 80020ae:	f7fe f9d7 	bl	8000460 <HAL_Init>
  SystemClock_Config();
 80020b2:	f7ff ffc5 	bl	8002040 <SystemClock_Config>
  MX_GPIO_Init();
 80020b6:	f7ff fccb 	bl	8001a50 <MX_GPIO_Init>
  MX_I2C1_Init();
 80020ba:	f7ff fd57 	bl	8001b6c <MX_I2C1_Init>
  MX_I2C2_Init();
 80020be:	f7ff fd83 	bl	8001bc8 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80020c2:	f000 fa8d 	bl	80025e0 <MX_USART2_UART_Init>
  lcd_init(&hi2c1,&DataStruct);
 80020c6:	4c2e      	ldr	r4, [pc, #184]	; (8002180 <main+0xd4>)
 80020c8:	492e      	ldr	r1, [pc, #184]	; (8002184 <main+0xd8>)
 80020ca:	0020      	movs	r0, r4
 80020cc:	f7ff fe06 	bl	8001cdc <lcd_init>
  DeInit(&hi2c1);
 80020d0:	0020      	movs	r0, r4
 80020d2:	f7ff ff44 	bl	8001f5e <DeInit>
  DeInit(&hi2c2);
 80020d6:	482c      	ldr	r0, [pc, #176]	; (8002188 <main+0xdc>)
 80020d8:	f7ff ff41 	bl	8001f5e <DeInit>
	 lum_d=ReadVisible(&hi2c1,0X60);
 80020dc:	4f28      	ldr	r7, [pc, #160]	; (8002180 <main+0xd4>)
 80020de:	2160      	movs	r1, #96	; 0x60
 80020e0:	0038      	movs	r0, r7
 80020e2:	f7ff ffa7 	bl	8002034 <ReadVisible>
 80020e6:	4c29      	ldr	r4, [pc, #164]	; (800218c <main+0xe0>)
	 lum_g=ReadVisible(&hi2c2,0x60);
 80020e8:	2160      	movs	r1, #96	; 0x60
	 lum_d=ReadVisible(&hi2c1,0X60);
 80020ea:	6020      	str	r0, [r4, #0]
	 lum_g=ReadVisible(&hi2c2,0x60);
 80020ec:	4826      	ldr	r0, [pc, #152]	; (8002188 <main+0xdc>)
 80020ee:	f7ff ffa1 	bl	8002034 <ReadVisible>
 80020f2:	4d27      	ldr	r5, [pc, #156]	; (8002190 <main+0xe4>)
	  HAL_UART_Transmit(&huart2, (uint8_t *)Data_lm_d, sprintf((char *)Data_lm_d, "d : %ld ",(uint32_t )(lum_d)), 1000);
 80020f4:	6822      	ldr	r2, [r4, #0]
	 lum_g=ReadVisible(&hi2c2,0x60);
 80020f6:	6028      	str	r0, [r5, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)Data_lm_d, sprintf((char *)Data_lm_d, "d : %ld ",(uint32_t )(lum_d)), 1000);
 80020f8:	4926      	ldr	r1, [pc, #152]	; (8002194 <main+0xe8>)
 80020fa:	4827      	ldr	r0, [pc, #156]	; (8002198 <main+0xec>)
 80020fc:	f000 fb20 	bl	8002740 <siprintf>
 8002100:	23fa      	movs	r3, #250	; 0xfa
 8002102:	b282      	uxth	r2, r0
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4924      	ldr	r1, [pc, #144]	; (8002198 <main+0xec>)
 8002108:	4824      	ldr	r0, [pc, #144]	; (800219c <main+0xf0>)
 800210a:	f7ff fbd5 	bl	80018b8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t *)Data_lm_g, sprintf((char *)Data_lm_g, "g : %ld ",(uint32_t )(lum_g)), 1000);
 800210e:	4e24      	ldr	r6, [pc, #144]	; (80021a0 <main+0xf4>)
 8002110:	682a      	ldr	r2, [r5, #0]
 8002112:	4924      	ldr	r1, [pc, #144]	; (80021a4 <main+0xf8>)
 8002114:	0030      	movs	r0, r6
 8002116:	f000 fb13 	bl	8002740 <siprintf>
 800211a:	23fa      	movs	r3, #250	; 0xfa
 800211c:	b282      	uxth	r2, r0
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	0031      	movs	r1, r6
 8002122:	481e      	ldr	r0, [pc, #120]	; (800219c <main+0xf0>)
 8002124:	f7ff fbc8 	bl	80018b8 <HAL_UART_Transmit>
        HAL_Delay(500);
 8002128:	20fa      	movs	r0, #250	; 0xfa
 800212a:	0040      	lsls	r0, r0, #1
 800212c:	f7fe f9ba 	bl	80004a4 <HAL_Delay>
	 	lcd_clear();
 8002130:	f7ff feaa 	bl	8001e88 <lcd_clear>
		 lcd_locate(&hi2c1,0,0);
 8002134:	2200      	movs	r2, #0
 8002136:	0038      	movs	r0, r7
 8002138:	0011      	movs	r1, r2
 800213a:	f7ff fe91 	bl	8001e60 <lcd_locate>
	 	 lcd_print((char *)Data_lm_d);
 800213e:	4816      	ldr	r0, [pc, #88]	; (8002198 <main+0xec>)
 8002140:	f7ff fe76 	bl	8001e30 <lcd_print>
	 	lcd_locate(&hi2c1,0,1);
 8002144:	2201      	movs	r2, #1
 8002146:	2100      	movs	r1, #0
 8002148:	0038      	movs	r0, r7
 800214a:	f7ff fe89 	bl	8001e60 <lcd_locate>
	 	lcd_print((char *)Data_lm_g);
 800214e:	0030      	movs	r0, r6
 8002150:	f7ff fe6e 	bl	8001e30 <lcd_print>
		 		if((int)(lum_g)-(int)(lum_d)<-5)
 8002154:	682b      	ldr	r3, [r5, #0]
 8002156:	6822      	ldr	r2, [r4, #0]
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	3305      	adds	r3, #5
 800215c:	da02      	bge.n	8002164 <main+0xb8>
		 		 	 		run_stepm_1(10);
 800215e:	200a      	movs	r0, #10
 8002160:	f000 f9f8 	bl	8002554 <run_stepm_1>
		 		if((int)(lum_g)-(int)(lum_d)>5)
 8002164:	682b      	ldr	r3, [r5, #0]
 8002166:	6822      	ldr	r2, [r4, #0]
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	2b05      	cmp	r3, #5
 800216c:	dd03      	ble.n	8002176 <main+0xca>
		 		 	 		 run_stepm_1(-10);
 800216e:	200a      	movs	r0, #10
 8002170:	4240      	negs	r0, r0
 8002172:	f000 f9ef 	bl	8002554 <run_stepm_1>
	 	 HAL_Delay(2000);
 8002176:	20fa      	movs	r0, #250	; 0xfa
 8002178:	00c0      	lsls	r0, r0, #3
 800217a:	f7fe f993 	bl	80004a4 <HAL_Delay>
	 lum_d=ReadVisible(&hi2c1,0X60);
 800217e:	e7ad      	b.n	80020dc <main+0x30>
 8002180:	200000a8 	.word	0x200000a8
 8002184:	2000008c 	.word	0x2000008c
 8002188:	200000f4 	.word	0x200000f4
 800218c:	20000090 	.word	0x20000090
 8002190:	20000094 	.word	0x20000094
 8002194:	08002fac 	.word	0x08002fac
 8002198:	20000840 	.word	0x20000840
 800219c:	20000b40 	.word	0x20000b40
 80021a0:	20000740 	.word	0x20000740
 80021a4:	08002fb5 	.word	0x08002fb5

080021a8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021a8:	4770      	bx	lr
	...

080021ac <run_nrml_1>:

void run_nrml_1(int angle){
    
    int state = 0;
    int i;
    angle = angle * 593 / 360; //593 => 360 degrés
 80021ac:	21b4      	movs	r1, #180	; 0xb4
void run_nrml_1(int angle){
 80021ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    	for (i=0; i<7*angle; i++){
 80021b0:	2600      	movs	r6, #0
    angle = angle * 593 / 360; //593 => 360 degrés
 80021b2:	4b71      	ldr	r3, [pc, #452]	; (8002378 <run_nrml_1+0x1cc>)
 80021b4:	0049      	lsls	r1, r1, #1
 80021b6:	4358      	muls	r0, r3
 80021b8:	f7fe f842 	bl	8000240 <__divsi3>
    	for (i=0; i<7*angle; i++){
 80021bc:	2707      	movs	r7, #7
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
                state ++;
                break;

            case 7: 
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80021be:	2580      	movs	r5, #128	; 0x80
    int state = 0;
 80021c0:	0034      	movs	r4, r6
    	for (i=0; i<7*angle; i++){
 80021c2:	4347      	muls	r7, r0
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80021c4:	006d      	lsls	r5, r5, #1
    	for (i=0; i<7*angle; i++){
 80021c6:	42be      	cmp	r6, r7
 80021c8:	db00      	blt.n	80021cc <run_nrml_1+0x20>
            default:
                state = 0; 
                break;
            }
    }
    	}
 80021ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_Delay(1);
 80021cc:	2001      	movs	r0, #1
 80021ce:	f7fe f969 	bl	80004a4 <HAL_Delay>
        switch (state){
 80021d2:	2c07      	cmp	r4, #7
 80021d4:	d900      	bls.n	80021d8 <run_nrml_1+0x2c>
 80021d6:	e0cd      	b.n	8002374 <run_nrml_1+0x1c8>
 80021d8:	0020      	movs	r0, r4
 80021da:	f7fd ff93 	bl	8000104 <__gnu_thumb1_case_uqi>
 80021de:	1e04      	.short	0x1e04
 80021e0:	82695037 	.word	0x82695037
 80021e4:	b49b      	.short	0xb49b
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80021e6:	2090      	movs	r0, #144	; 0x90
 80021e8:	2201      	movs	r2, #1
 80021ea:	0029      	movs	r1, r5
 80021ec:	05c0      	lsls	r0, r0, #23
 80021ee:	f7fe fa71 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021f2:	2180      	movs	r1, #128	; 0x80
 80021f4:	2090      	movs	r0, #144	; 0x90
 80021f6:	2200      	movs	r2, #0
 80021f8:	00c9      	lsls	r1, r1, #3
 80021fa:	05c0      	lsls	r0, r0, #23
 80021fc:	f7fe fa6a 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002200:	2200      	movs	r2, #0
 8002202:	2120      	movs	r1, #32
 8002204:	485d      	ldr	r0, [pc, #372]	; (800237c <run_nrml_1+0x1d0>)
 8002206:	f7fe fa65 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800220a:	2200      	movs	r2, #0
 800220c:	2110      	movs	r1, #16
 800220e:	485b      	ldr	r0, [pc, #364]	; (800237c <run_nrml_1+0x1d0>)
 8002210:	f7fe fa60 	bl	80006d4 <HAL_GPIO_WritePin>
                state ++;
 8002214:	2401      	movs	r4, #1
    	for (i=0; i<7*angle; i++){
 8002216:	3601      	adds	r6, #1
 8002218:	e7d5      	b.n	80021c6 <run_nrml_1+0x1a>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800221a:	2090      	movs	r0, #144	; 0x90
 800221c:	2201      	movs	r2, #1
 800221e:	0029      	movs	r1, r5
 8002220:	05c0      	lsls	r0, r0, #23
 8002222:	f7fe fa57 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002226:	2180      	movs	r1, #128	; 0x80
 8002228:	2090      	movs	r0, #144	; 0x90
 800222a:	2201      	movs	r2, #1
 800222c:	00c9      	lsls	r1, r1, #3
 800222e:	05c0      	lsls	r0, r0, #23
 8002230:	f7fe fa50 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002234:	2200      	movs	r2, #0
 8002236:	2120      	movs	r1, #32
 8002238:	4850      	ldr	r0, [pc, #320]	; (800237c <run_nrml_1+0x1d0>)
 800223a:	f7fe fa4b 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	2110      	movs	r1, #16
 8002242:	484e      	ldr	r0, [pc, #312]	; (800237c <run_nrml_1+0x1d0>)
 8002244:	f7fe fa46 	bl	80006d4 <HAL_GPIO_WritePin>
                state ++;
 8002248:	2402      	movs	r4, #2
                break;
 800224a:	e7e4      	b.n	8002216 <run_nrml_1+0x6a>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800224c:	2090      	movs	r0, #144	; 0x90
 800224e:	2200      	movs	r2, #0
 8002250:	0029      	movs	r1, r5
 8002252:	05c0      	lsls	r0, r0, #23
 8002254:	f7fe fa3e 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002258:	2180      	movs	r1, #128	; 0x80
 800225a:	2090      	movs	r0, #144	; 0x90
 800225c:	2201      	movs	r2, #1
 800225e:	00c9      	lsls	r1, r1, #3
 8002260:	05c0      	lsls	r0, r0, #23
 8002262:	f7fe fa37 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	2120      	movs	r1, #32
 800226a:	4844      	ldr	r0, [pc, #272]	; (800237c <run_nrml_1+0x1d0>)
 800226c:	f7fe fa32 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002270:	2200      	movs	r2, #0
 8002272:	2110      	movs	r1, #16
 8002274:	4841      	ldr	r0, [pc, #260]	; (800237c <run_nrml_1+0x1d0>)
 8002276:	f7fe fa2d 	bl	80006d4 <HAL_GPIO_WritePin>
                state ++;
 800227a:	2403      	movs	r4, #3
                break;
 800227c:	e7cb      	b.n	8002216 <run_nrml_1+0x6a>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800227e:	2090      	movs	r0, #144	; 0x90
 8002280:	2200      	movs	r2, #0
 8002282:	0029      	movs	r1, r5
 8002284:	05c0      	lsls	r0, r0, #23
 8002286:	f7fe fa25 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800228a:	2180      	movs	r1, #128	; 0x80
 800228c:	2090      	movs	r0, #144	; 0x90
 800228e:	2201      	movs	r2, #1
 8002290:	00c9      	lsls	r1, r1, #3
 8002292:	05c0      	lsls	r0, r0, #23
 8002294:	f7fe fa1e 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002298:	2201      	movs	r2, #1
 800229a:	2120      	movs	r1, #32
 800229c:	4837      	ldr	r0, [pc, #220]	; (800237c <run_nrml_1+0x1d0>)
 800229e:	f7fe fa19 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2110      	movs	r1, #16
 80022a6:	4835      	ldr	r0, [pc, #212]	; (800237c <run_nrml_1+0x1d0>)
 80022a8:	f7fe fa14 	bl	80006d4 <HAL_GPIO_WritePin>
                state ++ ;
 80022ac:	2404      	movs	r4, #4
                break;
 80022ae:	e7b2      	b.n	8002216 <run_nrml_1+0x6a>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80022b0:	2090      	movs	r0, #144	; 0x90
 80022b2:	2200      	movs	r2, #0
 80022b4:	0029      	movs	r1, r5
 80022b6:	05c0      	lsls	r0, r0, #23
 80022b8:	f7fe fa0c 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022bc:	2180      	movs	r1, #128	; 0x80
 80022be:	2090      	movs	r0, #144	; 0x90
 80022c0:	2200      	movs	r2, #0
 80022c2:	00c9      	lsls	r1, r1, #3
 80022c4:	05c0      	lsls	r0, r0, #23
 80022c6:	f7fe fa05 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80022ca:	2201      	movs	r2, #1
 80022cc:	2120      	movs	r1, #32
 80022ce:	482b      	ldr	r0, [pc, #172]	; (800237c <run_nrml_1+0x1d0>)
 80022d0:	f7fe fa00 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2110      	movs	r1, #16
 80022d8:	4828      	ldr	r0, [pc, #160]	; (800237c <run_nrml_1+0x1d0>)
 80022da:	f7fe f9fb 	bl	80006d4 <HAL_GPIO_WritePin>
                state ++;
 80022de:	2405      	movs	r4, #5
                break;
 80022e0:	e799      	b.n	8002216 <run_nrml_1+0x6a>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80022e2:	2090      	movs	r0, #144	; 0x90
 80022e4:	2200      	movs	r2, #0
 80022e6:	0029      	movs	r1, r5
 80022e8:	05c0      	lsls	r0, r0, #23
 80022ea:	f7fe f9f3 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	2090      	movs	r0, #144	; 0x90
 80022f2:	2200      	movs	r2, #0
 80022f4:	00c9      	lsls	r1, r1, #3
 80022f6:	05c0      	lsls	r0, r0, #23
 80022f8:	f7fe f9ec 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80022fc:	2201      	movs	r2, #1
 80022fe:	2120      	movs	r1, #32
 8002300:	481e      	ldr	r0, [pc, #120]	; (800237c <run_nrml_1+0x1d0>)
 8002302:	f7fe f9e7 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002306:	2201      	movs	r2, #1
 8002308:	2110      	movs	r1, #16
 800230a:	481c      	ldr	r0, [pc, #112]	; (800237c <run_nrml_1+0x1d0>)
 800230c:	f7fe f9e2 	bl	80006d4 <HAL_GPIO_WritePin>
                state ++;
 8002310:	2406      	movs	r4, #6
                break;
 8002312:	e780      	b.n	8002216 <run_nrml_1+0x6a>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002314:	2090      	movs	r0, #144	; 0x90
 8002316:	2200      	movs	r2, #0
 8002318:	0029      	movs	r1, r5
 800231a:	05c0      	lsls	r0, r0, #23
 800231c:	f7fe f9da 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002320:	2180      	movs	r1, #128	; 0x80
 8002322:	2090      	movs	r0, #144	; 0x90
 8002324:	2200      	movs	r2, #0
 8002326:	00c9      	lsls	r1, r1, #3
 8002328:	05c0      	lsls	r0, r0, #23
 800232a:	f7fe f9d3 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	2120      	movs	r1, #32
 8002332:	4812      	ldr	r0, [pc, #72]	; (800237c <run_nrml_1+0x1d0>)
 8002334:	f7fe f9ce 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002338:	2201      	movs	r2, #1
 800233a:	2110      	movs	r1, #16
 800233c:	480f      	ldr	r0, [pc, #60]	; (800237c <run_nrml_1+0x1d0>)
 800233e:	f7fe f9c9 	bl	80006d4 <HAL_GPIO_WritePin>
                state ++;
 8002342:	2407      	movs	r4, #7
                break;
 8002344:	e767      	b.n	8002216 <run_nrml_1+0x6a>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002346:	2090      	movs	r0, #144	; 0x90
 8002348:	2201      	movs	r2, #1
 800234a:	0029      	movs	r1, r5
 800234c:	05c0      	lsls	r0, r0, #23
 800234e:	f7fe f9c1 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002352:	2180      	movs	r1, #128	; 0x80
 8002354:	2090      	movs	r0, #144	; 0x90
 8002356:	2200      	movs	r2, #0
 8002358:	00c9      	lsls	r1, r1, #3
 800235a:	05c0      	lsls	r0, r0, #23
 800235c:	f7fe f9ba 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002360:	2200      	movs	r2, #0
 8002362:	2120      	movs	r1, #32
 8002364:	4805      	ldr	r0, [pc, #20]	; (800237c <run_nrml_1+0x1d0>)
 8002366:	f7fe f9b5 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800236a:	2201      	movs	r2, #1
 800236c:	2110      	movs	r1, #16
 800236e:	4803      	ldr	r0, [pc, #12]	; (800237c <run_nrml_1+0x1d0>)
 8002370:	f7fe f9b0 	bl	80006d4 <HAL_GPIO_WritePin>
                state = 0; 
 8002374:	2400      	movs	r4, #0
 8002376:	e74e      	b.n	8002216 <run_nrml_1+0x6a>
 8002378:	00000251 	.word	0x00000251
 800237c:	48000400 	.word	0x48000400

08002380 <run_inv_1>:
void run_inv_1(int angle){

    int state = 0;
    int i;
    angle = angle * 593 / 360; //593 => 360 degrés
 8002380:	21b4      	movs	r1, #180	; 0xb4
void run_inv_1(int angle){
 8002382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (i=0; i<7*angle; i++){
 8002384:	2600      	movs	r6, #0
    angle = angle * 593 / 360; //593 => 360 degrés
 8002386:	4b71      	ldr	r3, [pc, #452]	; (800254c <run_inv_1+0x1cc>)
 8002388:	0049      	lsls	r1, r1, #1
 800238a:	4358      	muls	r0, r3
 800238c:	f7fd ff58 	bl	8000240 <__divsi3>
  for (i=0; i<7*angle; i++){
 8002390:	2707      	movs	r7, #7
                break;

            case 7:
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002392:	2580      	movs	r5, #128	; 0x80
    int state = 0;
 8002394:	0034      	movs	r4, r6
  for (i=0; i<7*angle; i++){
 8002396:	4347      	muls	r7, r0
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002398:	00ed      	lsls	r5, r5, #3
  for (i=0; i<7*angle; i++){
 800239a:	42be      	cmp	r6, r7
 800239c:	db00      	blt.n	80023a0 <run_inv_1+0x20>
            default:
                state = 0;
                break;
            }
    }
    	}
 800239e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_Delay(1);
 80023a0:	2001      	movs	r0, #1
 80023a2:	f7fe f87f 	bl	80004a4 <HAL_Delay>
        switch (state){
 80023a6:	2c07      	cmp	r4, #7
 80023a8:	d900      	bls.n	80023ac <run_inv_1+0x2c>
 80023aa:	e0cd      	b.n	8002548 <run_inv_1+0x1c8>
 80023ac:	0020      	movs	r0, r4
 80023ae:	f7fd fea9 	bl	8000104 <__gnu_thumb1_case_uqi>
 80023b2:	1e04      	.short	0x1e04
 80023b4:	82695037 	.word	0x82695037
 80023b8:	b49b      	.short	0xb49b
            	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80023ba:	2201      	movs	r2, #1
 80023bc:	2110      	movs	r1, #16
 80023be:	4864      	ldr	r0, [pc, #400]	; (8002550 <run_inv_1+0x1d0>)
 80023c0:	f7fe f988 	bl	80006d4 <HAL_GPIO_WritePin>
            	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80023c4:	2200      	movs	r2, #0
 80023c6:	2120      	movs	r1, #32
 80023c8:	4861      	ldr	r0, [pc, #388]	; (8002550 <run_inv_1+0x1d0>)
 80023ca:	f7fe f983 	bl	80006d4 <HAL_GPIO_WritePin>
                 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80023ce:	2090      	movs	r0, #144	; 0x90
 80023d0:	2200      	movs	r2, #0
 80023d2:	0029      	movs	r1, r5
 80023d4:	05c0      	lsls	r0, r0, #23
 80023d6:	f7fe f97d 	bl	80006d4 <HAL_GPIO_WritePin>
                 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80023da:	2180      	movs	r1, #128	; 0x80
 80023dc:	2090      	movs	r0, #144	; 0x90
 80023de:	2200      	movs	r2, #0
 80023e0:	0049      	lsls	r1, r1, #1
 80023e2:	05c0      	lsls	r0, r0, #23
 80023e4:	f7fe f976 	bl	80006d4 <HAL_GPIO_WritePin>
                state ++;
 80023e8:	2401      	movs	r4, #1
  for (i=0; i<7*angle; i++){
 80023ea:	3601      	adds	r6, #1
 80023ec:	e7d5      	b.n	800239a <run_inv_1+0x1a>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80023ee:	2201      	movs	r2, #1
 80023f0:	2110      	movs	r1, #16
 80023f2:	4857      	ldr	r0, [pc, #348]	; (8002550 <run_inv_1+0x1d0>)
 80023f4:	f7fe f96e 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80023f8:	2201      	movs	r2, #1
 80023fa:	2120      	movs	r1, #32
 80023fc:	4854      	ldr	r0, [pc, #336]	; (8002550 <run_inv_1+0x1d0>)
 80023fe:	f7fe f969 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002402:	2090      	movs	r0, #144	; 0x90
 8002404:	2200      	movs	r2, #0
 8002406:	0029      	movs	r1, r5
 8002408:	05c0      	lsls	r0, r0, #23
 800240a:	f7fe f963 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800240e:	2180      	movs	r1, #128	; 0x80
 8002410:	2090      	movs	r0, #144	; 0x90
 8002412:	2200      	movs	r2, #0
 8002414:	0049      	lsls	r1, r1, #1
 8002416:	05c0      	lsls	r0, r0, #23
 8002418:	f7fe f95c 	bl	80006d4 <HAL_GPIO_WritePin>
                state ++;
 800241c:	2402      	movs	r4, #2
                break;
 800241e:	e7e4      	b.n	80023ea <run_inv_1+0x6a>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002420:	2200      	movs	r2, #0
 8002422:	2110      	movs	r1, #16
 8002424:	484a      	ldr	r0, [pc, #296]	; (8002550 <run_inv_1+0x1d0>)
 8002426:	f7fe f955 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800242a:	2201      	movs	r2, #1
 800242c:	2120      	movs	r1, #32
 800242e:	4848      	ldr	r0, [pc, #288]	; (8002550 <run_inv_1+0x1d0>)
 8002430:	f7fe f950 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002434:	2090      	movs	r0, #144	; 0x90
 8002436:	2200      	movs	r2, #0
 8002438:	0029      	movs	r1, r5
 800243a:	05c0      	lsls	r0, r0, #23
 800243c:	f7fe f94a 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002440:	2180      	movs	r1, #128	; 0x80
 8002442:	2090      	movs	r0, #144	; 0x90
 8002444:	2200      	movs	r2, #0
 8002446:	0049      	lsls	r1, r1, #1
 8002448:	05c0      	lsls	r0, r0, #23
 800244a:	f7fe f943 	bl	80006d4 <HAL_GPIO_WritePin>
                state ++;
 800244e:	2403      	movs	r4, #3
                break;
 8002450:	e7cb      	b.n	80023ea <run_inv_1+0x6a>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002452:	2200      	movs	r2, #0
 8002454:	2110      	movs	r1, #16
 8002456:	483e      	ldr	r0, [pc, #248]	; (8002550 <run_inv_1+0x1d0>)
 8002458:	f7fe f93c 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800245c:	2201      	movs	r2, #1
 800245e:	2120      	movs	r1, #32
 8002460:	483b      	ldr	r0, [pc, #236]	; (8002550 <run_inv_1+0x1d0>)
 8002462:	f7fe f937 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002466:	2090      	movs	r0, #144	; 0x90
 8002468:	2201      	movs	r2, #1
 800246a:	0029      	movs	r1, r5
 800246c:	05c0      	lsls	r0, r0, #23
 800246e:	f7fe f931 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002472:	2180      	movs	r1, #128	; 0x80
 8002474:	2090      	movs	r0, #144	; 0x90
 8002476:	2200      	movs	r2, #0
 8002478:	0049      	lsls	r1, r1, #1
 800247a:	05c0      	lsls	r0, r0, #23
 800247c:	f7fe f92a 	bl	80006d4 <HAL_GPIO_WritePin>
                state ++ ;
 8002480:	2404      	movs	r4, #4
                break;
 8002482:	e7b2      	b.n	80023ea <run_inv_1+0x6a>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002484:	2200      	movs	r2, #0
 8002486:	2110      	movs	r1, #16
 8002488:	4831      	ldr	r0, [pc, #196]	; (8002550 <run_inv_1+0x1d0>)
 800248a:	f7fe f923 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800248e:	2200      	movs	r2, #0
 8002490:	2120      	movs	r1, #32
 8002492:	482f      	ldr	r0, [pc, #188]	; (8002550 <run_inv_1+0x1d0>)
 8002494:	f7fe f91e 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002498:	2090      	movs	r0, #144	; 0x90
 800249a:	2201      	movs	r2, #1
 800249c:	0029      	movs	r1, r5
 800249e:	05c0      	lsls	r0, r0, #23
 80024a0:	f7fe f918 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80024a4:	2180      	movs	r1, #128	; 0x80
 80024a6:	2090      	movs	r0, #144	; 0x90
 80024a8:	2200      	movs	r2, #0
 80024aa:	0049      	lsls	r1, r1, #1
 80024ac:	05c0      	lsls	r0, r0, #23
 80024ae:	f7fe f911 	bl	80006d4 <HAL_GPIO_WritePin>
                state ++;
 80024b2:	2405      	movs	r4, #5
                break;
 80024b4:	e799      	b.n	80023ea <run_inv_1+0x6a>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2110      	movs	r1, #16
 80024ba:	4825      	ldr	r0, [pc, #148]	; (8002550 <run_inv_1+0x1d0>)
 80024bc:	f7fe f90a 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2120      	movs	r1, #32
 80024c4:	4822      	ldr	r0, [pc, #136]	; (8002550 <run_inv_1+0x1d0>)
 80024c6:	f7fe f905 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80024ca:	2090      	movs	r0, #144	; 0x90
 80024cc:	2201      	movs	r2, #1
 80024ce:	0029      	movs	r1, r5
 80024d0:	05c0      	lsls	r0, r0, #23
 80024d2:	f7fe f8ff 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80024d6:	2180      	movs	r1, #128	; 0x80
 80024d8:	2090      	movs	r0, #144	; 0x90
 80024da:	2201      	movs	r2, #1
 80024dc:	0049      	lsls	r1, r1, #1
 80024de:	05c0      	lsls	r0, r0, #23
 80024e0:	f7fe f8f8 	bl	80006d4 <HAL_GPIO_WritePin>
                state ++;
 80024e4:	2406      	movs	r4, #6
                break;
 80024e6:	e780      	b.n	80023ea <run_inv_1+0x6a>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80024e8:	2200      	movs	r2, #0
 80024ea:	2110      	movs	r1, #16
 80024ec:	4818      	ldr	r0, [pc, #96]	; (8002550 <run_inv_1+0x1d0>)
 80024ee:	f7fe f8f1 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2120      	movs	r1, #32
 80024f6:	4816      	ldr	r0, [pc, #88]	; (8002550 <run_inv_1+0x1d0>)
 80024f8:	f7fe f8ec 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80024fc:	2090      	movs	r0, #144	; 0x90
 80024fe:	2200      	movs	r2, #0
 8002500:	0029      	movs	r1, r5
 8002502:	05c0      	lsls	r0, r0, #23
 8002504:	f7fe f8e6 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002508:	2180      	movs	r1, #128	; 0x80
 800250a:	2090      	movs	r0, #144	; 0x90
 800250c:	2201      	movs	r2, #1
 800250e:	0049      	lsls	r1, r1, #1
 8002510:	05c0      	lsls	r0, r0, #23
 8002512:	f7fe f8df 	bl	80006d4 <HAL_GPIO_WritePin>
                state ++;
 8002516:	2407      	movs	r4, #7
                break;
 8002518:	e767      	b.n	80023ea <run_inv_1+0x6a>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800251a:	2201      	movs	r2, #1
 800251c:	2110      	movs	r1, #16
 800251e:	480c      	ldr	r0, [pc, #48]	; (8002550 <run_inv_1+0x1d0>)
 8002520:	f7fe f8d8 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002524:	2200      	movs	r2, #0
 8002526:	2120      	movs	r1, #32
 8002528:	4809      	ldr	r0, [pc, #36]	; (8002550 <run_inv_1+0x1d0>)
 800252a:	f7fe f8d3 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800252e:	2090      	movs	r0, #144	; 0x90
 8002530:	2200      	movs	r2, #0
 8002532:	0029      	movs	r1, r5
 8002534:	05c0      	lsls	r0, r0, #23
 8002536:	f7fe f8cd 	bl	80006d4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800253a:	2180      	movs	r1, #128	; 0x80
 800253c:	2090      	movs	r0, #144	; 0x90
 800253e:	2201      	movs	r2, #1
 8002540:	0049      	lsls	r1, r1, #1
 8002542:	05c0      	lsls	r0, r0, #23
 8002544:	f7fe f8c6 	bl	80006d4 <HAL_GPIO_WritePin>
                state = 0;
 8002548:	2400      	movs	r4, #0
 800254a:	e74e      	b.n	80023ea <run_inv_1+0x6a>
 800254c:	00000251 	.word	0x00000251
 8002550:	48000400 	.word	0x48000400

08002554 <run_stepm_1>:

void run_stepm_1(int angle)
{
 8002554:	b510      	push	{r4, lr}
	if(angle>=0)
 8002556:	2800      	cmp	r0, #0
 8002558:	db02      	blt.n	8002560 <run_stepm_1+0xc>
		run_nrml_1(angle);
 800255a:	f7ff fe27 	bl	80021ac <run_nrml_1>
	if(angle<0)
		run_inv_1(-1*angle);
}
 800255e:	bd10      	pop	{r4, pc}
		run_inv_1(-1*angle);
 8002560:	4240      	negs	r0, r0
 8002562:	f7ff ff0d 	bl	8002380 <run_inv_1>
 8002566:	e7fa      	b.n	800255e <run_stepm_1+0xa>

08002568 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002568:	2001      	movs	r0, #1
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <HAL_MspInit+0x2c>)
{
 800256c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	6999      	ldr	r1, [r3, #24]
 8002570:	4301      	orrs	r1, r0
 8002572:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002574:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002576:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002578:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257a:	4002      	ands	r2, r0
 800257c:	9200      	str	r2, [sp, #0]
 800257e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002580:	69da      	ldr	r2, [r3, #28]
 8002582:	430a      	orrs	r2, r1
 8002584:	61da      	str	r2, [r3, #28]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	400b      	ands	r3, r1
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258e:	b002      	add	sp, #8
 8002590:	4770      	bx	lr
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	40021000 	.word	0x40021000

08002598 <NMI_Handler>:
 8002598:	4770      	bx	lr

0800259a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800259a:	e7fe      	b.n	800259a <HardFault_Handler>

0800259c <SVC_Handler>:
 800259c:	4770      	bx	lr

0800259e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800259e:	4770      	bx	lr

080025a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a2:	f7fd ff6d 	bl	8000480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025a6:	bd10      	pop	{r4, pc}

080025a8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <_sbrk+0x2c>)
{
 80025aa:	b510      	push	{r4, lr}
	if (heap_end == 0)
 80025ac:	6819      	ldr	r1, [r3, #0]
{
 80025ae:	0002      	movs	r2, r0
	if (heap_end == 0)
 80025b0:	2900      	cmp	r1, #0
 80025b2:	d101      	bne.n	80025b8 <_sbrk+0x10>
		heap_end = &end;
 80025b4:	4908      	ldr	r1, [pc, #32]	; (80025d8 <_sbrk+0x30>)
 80025b6:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80025b8:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80025ba:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80025bc:	1882      	adds	r2, r0, r2
 80025be:	428a      	cmp	r2, r1
 80025c0:	d906      	bls.n	80025d0 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80025c2:	f000 f881 	bl	80026c8 <__errno>
 80025c6:	230c      	movs	r3, #12
 80025c8:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80025ca:	2001      	movs	r0, #1
 80025cc:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80025ce:	bd10      	pop	{r4, pc}
	heap_end += incr;
 80025d0:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80025d2:	e7fc      	b.n	80025ce <_sbrk+0x26>
 80025d4:	20000098 	.word	0x20000098
 80025d8:	20000bc4 	.word	0x20000bc4

080025dc <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80025dc:	4770      	bx	lr
	...

080025e0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 80025e0:	480b      	ldr	r0, [pc, #44]	; (8002610 <MX_USART2_UART_Init+0x30>)
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <MX_USART2_UART_Init+0x34>)
{
 80025e4:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 80025e6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80025e8:	23e1      	movs	r3, #225	; 0xe1
 80025ea:	025b      	lsls	r3, r3, #9
 80025ec:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025ee:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025f0:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025f2:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025f4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025f6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025f8:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025fa:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025fc:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025fe:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002600:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002602:	f7ff f9f3 	bl	80019ec <HAL_UART_Init>
 8002606:	2800      	cmp	r0, #0
 8002608:	d001      	beq.n	800260e <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
 800260a:	f7ff fdcd 	bl	80021a8 <Error_Handler>
  }

}
 800260e:	bd10      	pop	{r4, pc}
 8002610:	20000b40 	.word	0x20000b40
 8002614:	40004400 	.word	0x40004400

08002618 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002618:	b510      	push	{r4, lr}
 800261a:	0004      	movs	r4, r0
 800261c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261e:	2214      	movs	r2, #20
 8002620:	2100      	movs	r1, #0
 8002622:	a803      	add	r0, sp, #12
 8002624:	f000 f883 	bl	800272e <memset>
  if(uartHandle->Instance==USART2)
 8002628:	4b10      	ldr	r3, [pc, #64]	; (800266c <HAL_UART_MspInit+0x54>)
 800262a:	6822      	ldr	r2, [r4, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d11b      	bne.n	8002668 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002630:	2280      	movs	r2, #128	; 0x80
 8002632:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <HAL_UART_MspInit+0x58>)
 8002634:	0292      	lsls	r2, r2, #10
 8002636:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002638:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 800263a:	4311      	orrs	r1, r2
 800263c:	61d9      	str	r1, [r3, #28]
 800263e:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002640:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 8002642:	4011      	ands	r1, r2
 8002644:	9101      	str	r1, [sp, #4]
 8002646:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002648:	6959      	ldr	r1, [r3, #20]
 800264a:	4311      	orrs	r1, r2
 800264c:	6159      	str	r1, [r3, #20]
 800264e:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002650:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002652:	401a      	ands	r2, r3
 8002654:	9202      	str	r2, [sp, #8]
 8002656:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002658:	230c      	movs	r3, #12
 800265a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265c:	3b0a      	subs	r3, #10
 800265e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002660:	3b01      	subs	r3, #1
 8002662:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002664:	f7fd ff7a 	bl	800055c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002668:	b008      	add	sp, #32
 800266a:	bd10      	pop	{r4, pc}
 800266c:	40004400 	.word	0x40004400
 8002670:	40021000 	.word	0x40021000

08002674 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002674:	480d      	ldr	r0, [pc, #52]	; (80026ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002676:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002678:	480d      	ldr	r0, [pc, #52]	; (80026b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800267a:	490e      	ldr	r1, [pc, #56]	; (80026b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800267c:	4a0e      	ldr	r2, [pc, #56]	; (80026b8 <LoopForever+0xe>)
  movs r3, #0
 800267e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002680:	e002      	b.n	8002688 <LoopCopyDataInit>

08002682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002686:	3304      	adds	r3, #4

08002688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800268a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800268c:	d3f9      	bcc.n	8002682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800268e:	4a0b      	ldr	r2, [pc, #44]	; (80026bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002690:	4c0b      	ldr	r4, [pc, #44]	; (80026c0 <LoopForever+0x16>)
  movs r3, #0
 8002692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002694:	e001      	b.n	800269a <LoopFillZerobss>

08002696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002698:	3204      	adds	r2, #4

0800269a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800269a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800269c:	d3fb      	bcc.n	8002696 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800269e:	f7ff ff9d 	bl	80025dc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80026a2:	f000 f817 	bl	80026d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026a6:	f7ff fd01 	bl	80020ac <main>

080026aa <LoopForever>:

LoopForever:
    b LoopForever
 80026aa:	e7fe      	b.n	80026aa <LoopForever>
  ldr   r0, =_estack
 80026ac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80026b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80026b8:	08003014 	.word	0x08003014
  ldr r2, =_sbss
 80026bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80026c0:	20000bc4 	.word	0x20000bc4

080026c4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026c4:	e7fe      	b.n	80026c4 <ADC1_COMP_IRQHandler>
	...

080026c8 <__errno>:
 80026c8:	4b01      	ldr	r3, [pc, #4]	; (80026d0 <__errno+0x8>)
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	4770      	bx	lr
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	2000000c 	.word	0x2000000c

080026d4 <__libc_init_array>:
 80026d4:	b570      	push	{r4, r5, r6, lr}
 80026d6:	2600      	movs	r6, #0
 80026d8:	4d0c      	ldr	r5, [pc, #48]	; (800270c <__libc_init_array+0x38>)
 80026da:	4c0d      	ldr	r4, [pc, #52]	; (8002710 <__libc_init_array+0x3c>)
 80026dc:	1b64      	subs	r4, r4, r5
 80026de:	10a4      	asrs	r4, r4, #2
 80026e0:	42a6      	cmp	r6, r4
 80026e2:	d109      	bne.n	80026f8 <__libc_init_array+0x24>
 80026e4:	2600      	movs	r6, #0
 80026e6:	f000 fc43 	bl	8002f70 <_init>
 80026ea:	4d0a      	ldr	r5, [pc, #40]	; (8002714 <__libc_init_array+0x40>)
 80026ec:	4c0a      	ldr	r4, [pc, #40]	; (8002718 <__libc_init_array+0x44>)
 80026ee:	1b64      	subs	r4, r4, r5
 80026f0:	10a4      	asrs	r4, r4, #2
 80026f2:	42a6      	cmp	r6, r4
 80026f4:	d105      	bne.n	8002702 <__libc_init_array+0x2e>
 80026f6:	bd70      	pop	{r4, r5, r6, pc}
 80026f8:	00b3      	lsls	r3, r6, #2
 80026fa:	58eb      	ldr	r3, [r5, r3]
 80026fc:	4798      	blx	r3
 80026fe:	3601      	adds	r6, #1
 8002700:	e7ee      	b.n	80026e0 <__libc_init_array+0xc>
 8002702:	00b3      	lsls	r3, r6, #2
 8002704:	58eb      	ldr	r3, [r5, r3]
 8002706:	4798      	blx	r3
 8002708:	3601      	adds	r6, #1
 800270a:	e7f2      	b.n	80026f2 <__libc_init_array+0x1e>
 800270c:	0800300c 	.word	0x0800300c
 8002710:	0800300c 	.word	0x0800300c
 8002714:	0800300c 	.word	0x0800300c
 8002718:	08003010 	.word	0x08003010

0800271c <memcpy>:
 800271c:	2300      	movs	r3, #0
 800271e:	b510      	push	{r4, lr}
 8002720:	429a      	cmp	r2, r3
 8002722:	d100      	bne.n	8002726 <memcpy+0xa>
 8002724:	bd10      	pop	{r4, pc}
 8002726:	5ccc      	ldrb	r4, [r1, r3]
 8002728:	54c4      	strb	r4, [r0, r3]
 800272a:	3301      	adds	r3, #1
 800272c:	e7f8      	b.n	8002720 <memcpy+0x4>

0800272e <memset>:
 800272e:	0003      	movs	r3, r0
 8002730:	1882      	adds	r2, r0, r2
 8002732:	4293      	cmp	r3, r2
 8002734:	d100      	bne.n	8002738 <memset+0xa>
 8002736:	4770      	bx	lr
 8002738:	7019      	strb	r1, [r3, #0]
 800273a:	3301      	adds	r3, #1
 800273c:	e7f9      	b.n	8002732 <memset+0x4>
	...

08002740 <siprintf>:
 8002740:	b40e      	push	{r1, r2, r3}
 8002742:	b510      	push	{r4, lr}
 8002744:	b09d      	sub	sp, #116	; 0x74
 8002746:	a902      	add	r1, sp, #8
 8002748:	9002      	str	r0, [sp, #8]
 800274a:	6108      	str	r0, [r1, #16]
 800274c:	480b      	ldr	r0, [pc, #44]	; (800277c <siprintf+0x3c>)
 800274e:	2482      	movs	r4, #130	; 0x82
 8002750:	6088      	str	r0, [r1, #8]
 8002752:	6148      	str	r0, [r1, #20]
 8002754:	2001      	movs	r0, #1
 8002756:	4240      	negs	r0, r0
 8002758:	ab1f      	add	r3, sp, #124	; 0x7c
 800275a:	81c8      	strh	r0, [r1, #14]
 800275c:	4808      	ldr	r0, [pc, #32]	; (8002780 <siprintf+0x40>)
 800275e:	cb04      	ldmia	r3!, {r2}
 8002760:	00a4      	lsls	r4, r4, #2
 8002762:	6800      	ldr	r0, [r0, #0]
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	818c      	strh	r4, [r1, #12]
 8002768:	f000 f86e 	bl	8002848 <_svfiprintf_r>
 800276c:	2300      	movs	r3, #0
 800276e:	9a02      	ldr	r2, [sp, #8]
 8002770:	7013      	strb	r3, [r2, #0]
 8002772:	b01d      	add	sp, #116	; 0x74
 8002774:	bc10      	pop	{r4}
 8002776:	bc08      	pop	{r3}
 8002778:	b003      	add	sp, #12
 800277a:	4718      	bx	r3
 800277c:	7fffffff 	.word	0x7fffffff
 8002780:	2000000c 	.word	0x2000000c

08002784 <__ssputs_r>:
 8002784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002786:	688e      	ldr	r6, [r1, #8]
 8002788:	b085      	sub	sp, #20
 800278a:	0007      	movs	r7, r0
 800278c:	000c      	movs	r4, r1
 800278e:	9203      	str	r2, [sp, #12]
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	429e      	cmp	r6, r3
 8002794:	d839      	bhi.n	800280a <__ssputs_r+0x86>
 8002796:	2390      	movs	r3, #144	; 0x90
 8002798:	898a      	ldrh	r2, [r1, #12]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	421a      	tst	r2, r3
 800279e:	d034      	beq.n	800280a <__ssputs_r+0x86>
 80027a0:	2503      	movs	r5, #3
 80027a2:	6909      	ldr	r1, [r1, #16]
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	1a5b      	subs	r3, r3, r1
 80027a8:	9302      	str	r3, [sp, #8]
 80027aa:	6963      	ldr	r3, [r4, #20]
 80027ac:	9802      	ldr	r0, [sp, #8]
 80027ae:	435d      	muls	r5, r3
 80027b0:	0feb      	lsrs	r3, r5, #31
 80027b2:	195d      	adds	r5, r3, r5
 80027b4:	9b01      	ldr	r3, [sp, #4]
 80027b6:	106d      	asrs	r5, r5, #1
 80027b8:	3301      	adds	r3, #1
 80027ba:	181b      	adds	r3, r3, r0
 80027bc:	42ab      	cmp	r3, r5
 80027be:	d900      	bls.n	80027c2 <__ssputs_r+0x3e>
 80027c0:	001d      	movs	r5, r3
 80027c2:	0553      	lsls	r3, r2, #21
 80027c4:	d532      	bpl.n	800282c <__ssputs_r+0xa8>
 80027c6:	0029      	movs	r1, r5
 80027c8:	0038      	movs	r0, r7
 80027ca:	f000 fb31 	bl	8002e30 <_malloc_r>
 80027ce:	1e06      	subs	r6, r0, #0
 80027d0:	d109      	bne.n	80027e6 <__ssputs_r+0x62>
 80027d2:	230c      	movs	r3, #12
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	2340      	movs	r3, #64	; 0x40
 80027d8:	2001      	movs	r0, #1
 80027da:	89a2      	ldrh	r2, [r4, #12]
 80027dc:	4240      	negs	r0, r0
 80027de:	4313      	orrs	r3, r2
 80027e0:	81a3      	strh	r3, [r4, #12]
 80027e2:	b005      	add	sp, #20
 80027e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027e6:	9a02      	ldr	r2, [sp, #8]
 80027e8:	6921      	ldr	r1, [r4, #16]
 80027ea:	f7ff ff97 	bl	800271c <memcpy>
 80027ee:	89a3      	ldrh	r3, [r4, #12]
 80027f0:	4a14      	ldr	r2, [pc, #80]	; (8002844 <__ssputs_r+0xc0>)
 80027f2:	401a      	ands	r2, r3
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	4313      	orrs	r3, r2
 80027f8:	81a3      	strh	r3, [r4, #12]
 80027fa:	9b02      	ldr	r3, [sp, #8]
 80027fc:	6126      	str	r6, [r4, #16]
 80027fe:	18f6      	adds	r6, r6, r3
 8002800:	6026      	str	r6, [r4, #0]
 8002802:	6165      	str	r5, [r4, #20]
 8002804:	9e01      	ldr	r6, [sp, #4]
 8002806:	1aed      	subs	r5, r5, r3
 8002808:	60a5      	str	r5, [r4, #8]
 800280a:	9b01      	ldr	r3, [sp, #4]
 800280c:	42b3      	cmp	r3, r6
 800280e:	d200      	bcs.n	8002812 <__ssputs_r+0x8e>
 8002810:	001e      	movs	r6, r3
 8002812:	0032      	movs	r2, r6
 8002814:	9903      	ldr	r1, [sp, #12]
 8002816:	6820      	ldr	r0, [r4, #0]
 8002818:	f000 faad 	bl	8002d76 <memmove>
 800281c:	68a3      	ldr	r3, [r4, #8]
 800281e:	2000      	movs	r0, #0
 8002820:	1b9b      	subs	r3, r3, r6
 8002822:	60a3      	str	r3, [r4, #8]
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	199e      	adds	r6, r3, r6
 8002828:	6026      	str	r6, [r4, #0]
 800282a:	e7da      	b.n	80027e2 <__ssputs_r+0x5e>
 800282c:	002a      	movs	r2, r5
 800282e:	0038      	movs	r0, r7
 8002830:	f000 fb5c 	bl	8002eec <_realloc_r>
 8002834:	1e06      	subs	r6, r0, #0
 8002836:	d1e0      	bne.n	80027fa <__ssputs_r+0x76>
 8002838:	6921      	ldr	r1, [r4, #16]
 800283a:	0038      	movs	r0, r7
 800283c:	f000 faae 	bl	8002d9c <_free_r>
 8002840:	e7c7      	b.n	80027d2 <__ssputs_r+0x4e>
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	fffffb7f 	.word	0xfffffb7f

08002848 <_svfiprintf_r>:
 8002848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284a:	b09f      	sub	sp, #124	; 0x7c
 800284c:	9002      	str	r0, [sp, #8]
 800284e:	9305      	str	r3, [sp, #20]
 8002850:	898b      	ldrh	r3, [r1, #12]
 8002852:	000f      	movs	r7, r1
 8002854:	0016      	movs	r6, r2
 8002856:	061b      	lsls	r3, r3, #24
 8002858:	d511      	bpl.n	800287e <_svfiprintf_r+0x36>
 800285a:	690b      	ldr	r3, [r1, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10e      	bne.n	800287e <_svfiprintf_r+0x36>
 8002860:	2140      	movs	r1, #64	; 0x40
 8002862:	f000 fae5 	bl	8002e30 <_malloc_r>
 8002866:	6038      	str	r0, [r7, #0]
 8002868:	6138      	str	r0, [r7, #16]
 800286a:	2800      	cmp	r0, #0
 800286c:	d105      	bne.n	800287a <_svfiprintf_r+0x32>
 800286e:	230c      	movs	r3, #12
 8002870:	9a02      	ldr	r2, [sp, #8]
 8002872:	3801      	subs	r0, #1
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	b01f      	add	sp, #124	; 0x7c
 8002878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800287a:	2340      	movs	r3, #64	; 0x40
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	2300      	movs	r3, #0
 8002880:	ad06      	add	r5, sp, #24
 8002882:	616b      	str	r3, [r5, #20]
 8002884:	3320      	adds	r3, #32
 8002886:	766b      	strb	r3, [r5, #25]
 8002888:	3310      	adds	r3, #16
 800288a:	76ab      	strb	r3, [r5, #26]
 800288c:	0034      	movs	r4, r6
 800288e:	7823      	ldrb	r3, [r4, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d147      	bne.n	8002924 <_svfiprintf_r+0xdc>
 8002894:	1ba3      	subs	r3, r4, r6
 8002896:	9304      	str	r3, [sp, #16]
 8002898:	d00d      	beq.n	80028b6 <_svfiprintf_r+0x6e>
 800289a:	1ba3      	subs	r3, r4, r6
 800289c:	0032      	movs	r2, r6
 800289e:	0039      	movs	r1, r7
 80028a0:	9802      	ldr	r0, [sp, #8]
 80028a2:	f7ff ff6f 	bl	8002784 <__ssputs_r>
 80028a6:	1c43      	adds	r3, r0, #1
 80028a8:	d100      	bne.n	80028ac <_svfiprintf_r+0x64>
 80028aa:	e0b5      	b.n	8002a18 <_svfiprintf_r+0x1d0>
 80028ac:	696a      	ldr	r2, [r5, #20]
 80028ae:	9b04      	ldr	r3, [sp, #16]
 80028b0:	4694      	mov	ip, r2
 80028b2:	4463      	add	r3, ip
 80028b4:	616b      	str	r3, [r5, #20]
 80028b6:	7823      	ldrb	r3, [r4, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d100      	bne.n	80028be <_svfiprintf_r+0x76>
 80028bc:	e0ac      	b.n	8002a18 <_svfiprintf_r+0x1d0>
 80028be:	2201      	movs	r2, #1
 80028c0:	2300      	movs	r3, #0
 80028c2:	4252      	negs	r2, r2
 80028c4:	606a      	str	r2, [r5, #4]
 80028c6:	a902      	add	r1, sp, #8
 80028c8:	3254      	adds	r2, #84	; 0x54
 80028ca:	1852      	adds	r2, r2, r1
 80028cc:	3401      	adds	r4, #1
 80028ce:	602b      	str	r3, [r5, #0]
 80028d0:	60eb      	str	r3, [r5, #12]
 80028d2:	60ab      	str	r3, [r5, #8]
 80028d4:	7013      	strb	r3, [r2, #0]
 80028d6:	65ab      	str	r3, [r5, #88]	; 0x58
 80028d8:	4e58      	ldr	r6, [pc, #352]	; (8002a3c <_svfiprintf_r+0x1f4>)
 80028da:	2205      	movs	r2, #5
 80028dc:	7821      	ldrb	r1, [r4, #0]
 80028de:	0030      	movs	r0, r6
 80028e0:	f000 fa3e 	bl	8002d60 <memchr>
 80028e4:	1c62      	adds	r2, r4, #1
 80028e6:	2800      	cmp	r0, #0
 80028e8:	d120      	bne.n	800292c <_svfiprintf_r+0xe4>
 80028ea:	6829      	ldr	r1, [r5, #0]
 80028ec:	06cb      	lsls	r3, r1, #27
 80028ee:	d504      	bpl.n	80028fa <_svfiprintf_r+0xb2>
 80028f0:	2353      	movs	r3, #83	; 0x53
 80028f2:	ae02      	add	r6, sp, #8
 80028f4:	3020      	adds	r0, #32
 80028f6:	199b      	adds	r3, r3, r6
 80028f8:	7018      	strb	r0, [r3, #0]
 80028fa:	070b      	lsls	r3, r1, #28
 80028fc:	d504      	bpl.n	8002908 <_svfiprintf_r+0xc0>
 80028fe:	2353      	movs	r3, #83	; 0x53
 8002900:	202b      	movs	r0, #43	; 0x2b
 8002902:	ae02      	add	r6, sp, #8
 8002904:	199b      	adds	r3, r3, r6
 8002906:	7018      	strb	r0, [r3, #0]
 8002908:	7823      	ldrb	r3, [r4, #0]
 800290a:	2b2a      	cmp	r3, #42	; 0x2a
 800290c:	d016      	beq.n	800293c <_svfiprintf_r+0xf4>
 800290e:	2000      	movs	r0, #0
 8002910:	210a      	movs	r1, #10
 8002912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002914:	7822      	ldrb	r2, [r4, #0]
 8002916:	3a30      	subs	r2, #48	; 0x30
 8002918:	2a09      	cmp	r2, #9
 800291a:	d955      	bls.n	80029c8 <_svfiprintf_r+0x180>
 800291c:	2800      	cmp	r0, #0
 800291e:	d015      	beq.n	800294c <_svfiprintf_r+0x104>
 8002920:	9309      	str	r3, [sp, #36]	; 0x24
 8002922:	e013      	b.n	800294c <_svfiprintf_r+0x104>
 8002924:	2b25      	cmp	r3, #37	; 0x25
 8002926:	d0b5      	beq.n	8002894 <_svfiprintf_r+0x4c>
 8002928:	3401      	adds	r4, #1
 800292a:	e7b0      	b.n	800288e <_svfiprintf_r+0x46>
 800292c:	2301      	movs	r3, #1
 800292e:	1b80      	subs	r0, r0, r6
 8002930:	4083      	lsls	r3, r0
 8002932:	6829      	ldr	r1, [r5, #0]
 8002934:	0014      	movs	r4, r2
 8002936:	430b      	orrs	r3, r1
 8002938:	602b      	str	r3, [r5, #0]
 800293a:	e7cd      	b.n	80028d8 <_svfiprintf_r+0x90>
 800293c:	9b05      	ldr	r3, [sp, #20]
 800293e:	1d18      	adds	r0, r3, #4
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	9005      	str	r0, [sp, #20]
 8002944:	2b00      	cmp	r3, #0
 8002946:	db39      	blt.n	80029bc <_svfiprintf_r+0x174>
 8002948:	9309      	str	r3, [sp, #36]	; 0x24
 800294a:	0014      	movs	r4, r2
 800294c:	7823      	ldrb	r3, [r4, #0]
 800294e:	2b2e      	cmp	r3, #46	; 0x2e
 8002950:	d10b      	bne.n	800296a <_svfiprintf_r+0x122>
 8002952:	7863      	ldrb	r3, [r4, #1]
 8002954:	1c62      	adds	r2, r4, #1
 8002956:	2b2a      	cmp	r3, #42	; 0x2a
 8002958:	d13e      	bne.n	80029d8 <_svfiprintf_r+0x190>
 800295a:	9b05      	ldr	r3, [sp, #20]
 800295c:	3402      	adds	r4, #2
 800295e:	1d1a      	adds	r2, r3, #4
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	9205      	str	r2, [sp, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	db34      	blt.n	80029d2 <_svfiprintf_r+0x18a>
 8002968:	9307      	str	r3, [sp, #28]
 800296a:	4e35      	ldr	r6, [pc, #212]	; (8002a40 <_svfiprintf_r+0x1f8>)
 800296c:	7821      	ldrb	r1, [r4, #0]
 800296e:	2203      	movs	r2, #3
 8002970:	0030      	movs	r0, r6
 8002972:	f000 f9f5 	bl	8002d60 <memchr>
 8002976:	2800      	cmp	r0, #0
 8002978:	d006      	beq.n	8002988 <_svfiprintf_r+0x140>
 800297a:	2340      	movs	r3, #64	; 0x40
 800297c:	1b80      	subs	r0, r0, r6
 800297e:	4083      	lsls	r3, r0
 8002980:	682a      	ldr	r2, [r5, #0]
 8002982:	3401      	adds	r4, #1
 8002984:	4313      	orrs	r3, r2
 8002986:	602b      	str	r3, [r5, #0]
 8002988:	7821      	ldrb	r1, [r4, #0]
 800298a:	2206      	movs	r2, #6
 800298c:	482d      	ldr	r0, [pc, #180]	; (8002a44 <_svfiprintf_r+0x1fc>)
 800298e:	1c66      	adds	r6, r4, #1
 8002990:	7629      	strb	r1, [r5, #24]
 8002992:	f000 f9e5 	bl	8002d60 <memchr>
 8002996:	2800      	cmp	r0, #0
 8002998:	d046      	beq.n	8002a28 <_svfiprintf_r+0x1e0>
 800299a:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <_svfiprintf_r+0x200>)
 800299c:	2b00      	cmp	r3, #0
 800299e:	d12f      	bne.n	8002a00 <_svfiprintf_r+0x1b8>
 80029a0:	6829      	ldr	r1, [r5, #0]
 80029a2:	9b05      	ldr	r3, [sp, #20]
 80029a4:	2207      	movs	r2, #7
 80029a6:	05c9      	lsls	r1, r1, #23
 80029a8:	d528      	bpl.n	80029fc <_svfiprintf_r+0x1b4>
 80029aa:	189b      	adds	r3, r3, r2
 80029ac:	4393      	bics	r3, r2
 80029ae:	3308      	adds	r3, #8
 80029b0:	9305      	str	r3, [sp, #20]
 80029b2:	696b      	ldr	r3, [r5, #20]
 80029b4:	9a03      	ldr	r2, [sp, #12]
 80029b6:	189b      	adds	r3, r3, r2
 80029b8:	616b      	str	r3, [r5, #20]
 80029ba:	e767      	b.n	800288c <_svfiprintf_r+0x44>
 80029bc:	425b      	negs	r3, r3
 80029be:	60eb      	str	r3, [r5, #12]
 80029c0:	2302      	movs	r3, #2
 80029c2:	430b      	orrs	r3, r1
 80029c4:	602b      	str	r3, [r5, #0]
 80029c6:	e7c0      	b.n	800294a <_svfiprintf_r+0x102>
 80029c8:	434b      	muls	r3, r1
 80029ca:	3401      	adds	r4, #1
 80029cc:	189b      	adds	r3, r3, r2
 80029ce:	2001      	movs	r0, #1
 80029d0:	e7a0      	b.n	8002914 <_svfiprintf_r+0xcc>
 80029d2:	2301      	movs	r3, #1
 80029d4:	425b      	negs	r3, r3
 80029d6:	e7c7      	b.n	8002968 <_svfiprintf_r+0x120>
 80029d8:	2300      	movs	r3, #0
 80029da:	0014      	movs	r4, r2
 80029dc:	200a      	movs	r0, #10
 80029de:	001a      	movs	r2, r3
 80029e0:	606b      	str	r3, [r5, #4]
 80029e2:	7821      	ldrb	r1, [r4, #0]
 80029e4:	3930      	subs	r1, #48	; 0x30
 80029e6:	2909      	cmp	r1, #9
 80029e8:	d903      	bls.n	80029f2 <_svfiprintf_r+0x1aa>
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0bd      	beq.n	800296a <_svfiprintf_r+0x122>
 80029ee:	9207      	str	r2, [sp, #28]
 80029f0:	e7bb      	b.n	800296a <_svfiprintf_r+0x122>
 80029f2:	4342      	muls	r2, r0
 80029f4:	3401      	adds	r4, #1
 80029f6:	1852      	adds	r2, r2, r1
 80029f8:	2301      	movs	r3, #1
 80029fa:	e7f2      	b.n	80029e2 <_svfiprintf_r+0x19a>
 80029fc:	3307      	adds	r3, #7
 80029fe:	e7d5      	b.n	80029ac <_svfiprintf_r+0x164>
 8002a00:	ab05      	add	r3, sp, #20
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	003a      	movs	r2, r7
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <_svfiprintf_r+0x204>)
 8002a08:	0029      	movs	r1, r5
 8002a0a:	9802      	ldr	r0, [sp, #8]
 8002a0c:	e000      	b.n	8002a10 <_svfiprintf_r+0x1c8>
 8002a0e:	bf00      	nop
 8002a10:	9003      	str	r0, [sp, #12]
 8002a12:	9b03      	ldr	r3, [sp, #12]
 8002a14:	3301      	adds	r3, #1
 8002a16:	d1cc      	bne.n	80029b2 <_svfiprintf_r+0x16a>
 8002a18:	89bb      	ldrh	r3, [r7, #12]
 8002a1a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002a1c:	065b      	lsls	r3, r3, #25
 8002a1e:	d400      	bmi.n	8002a22 <_svfiprintf_r+0x1da>
 8002a20:	e729      	b.n	8002876 <_svfiprintf_r+0x2e>
 8002a22:	2001      	movs	r0, #1
 8002a24:	4240      	negs	r0, r0
 8002a26:	e726      	b.n	8002876 <_svfiprintf_r+0x2e>
 8002a28:	ab05      	add	r3, sp, #20
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	003a      	movs	r2, r7
 8002a2e:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <_svfiprintf_r+0x204>)
 8002a30:	0029      	movs	r1, r5
 8002a32:	9802      	ldr	r0, [sp, #8]
 8002a34:	f000 f87a 	bl	8002b2c <_printf_i>
 8002a38:	e7ea      	b.n	8002a10 <_svfiprintf_r+0x1c8>
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	08002fd6 	.word	0x08002fd6
 8002a40:	08002fdc 	.word	0x08002fdc
 8002a44:	08002fe0 	.word	0x08002fe0
 8002a48:	00000000 	.word	0x00000000
 8002a4c:	08002785 	.word	0x08002785

08002a50 <_printf_common>:
 8002a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a52:	0015      	movs	r5, r2
 8002a54:	9301      	str	r3, [sp, #4]
 8002a56:	688a      	ldr	r2, [r1, #8]
 8002a58:	690b      	ldr	r3, [r1, #16]
 8002a5a:	9000      	str	r0, [sp, #0]
 8002a5c:	000c      	movs	r4, r1
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	da00      	bge.n	8002a64 <_printf_common+0x14>
 8002a62:	0013      	movs	r3, r2
 8002a64:	0022      	movs	r2, r4
 8002a66:	602b      	str	r3, [r5, #0]
 8002a68:	3243      	adds	r2, #67	; 0x43
 8002a6a:	7812      	ldrb	r2, [r2, #0]
 8002a6c:	2a00      	cmp	r2, #0
 8002a6e:	d001      	beq.n	8002a74 <_printf_common+0x24>
 8002a70:	3301      	adds	r3, #1
 8002a72:	602b      	str	r3, [r5, #0]
 8002a74:	6823      	ldr	r3, [r4, #0]
 8002a76:	069b      	lsls	r3, r3, #26
 8002a78:	d502      	bpl.n	8002a80 <_printf_common+0x30>
 8002a7a:	682b      	ldr	r3, [r5, #0]
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	602b      	str	r3, [r5, #0]
 8002a80:	2706      	movs	r7, #6
 8002a82:	6823      	ldr	r3, [r4, #0]
 8002a84:	401f      	ands	r7, r3
 8002a86:	d027      	beq.n	8002ad8 <_printf_common+0x88>
 8002a88:	0023      	movs	r3, r4
 8002a8a:	3343      	adds	r3, #67	; 0x43
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	1e5a      	subs	r2, r3, #1
 8002a90:	4193      	sbcs	r3, r2
 8002a92:	6822      	ldr	r2, [r4, #0]
 8002a94:	0692      	lsls	r2, r2, #26
 8002a96:	d430      	bmi.n	8002afa <_printf_common+0xaa>
 8002a98:	0022      	movs	r2, r4
 8002a9a:	9901      	ldr	r1, [sp, #4]
 8002a9c:	3243      	adds	r2, #67	; 0x43
 8002a9e:	9800      	ldr	r0, [sp, #0]
 8002aa0:	9e08      	ldr	r6, [sp, #32]
 8002aa2:	47b0      	blx	r6
 8002aa4:	1c43      	adds	r3, r0, #1
 8002aa6:	d025      	beq.n	8002af4 <_printf_common+0xa4>
 8002aa8:	2306      	movs	r3, #6
 8002aaa:	6820      	ldr	r0, [r4, #0]
 8002aac:	682a      	ldr	r2, [r5, #0]
 8002aae:	68e1      	ldr	r1, [r4, #12]
 8002ab0:	4003      	ands	r3, r0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d103      	bne.n	8002ac0 <_printf_common+0x70>
 8002ab8:	1a8d      	subs	r5, r1, r2
 8002aba:	43eb      	mvns	r3, r5
 8002abc:	17db      	asrs	r3, r3, #31
 8002abe:	401d      	ands	r5, r3
 8002ac0:	68a3      	ldr	r3, [r4, #8]
 8002ac2:	6922      	ldr	r2, [r4, #16]
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	dd01      	ble.n	8002acc <_printf_common+0x7c>
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	18ed      	adds	r5, r5, r3
 8002acc:	2700      	movs	r7, #0
 8002ace:	42bd      	cmp	r5, r7
 8002ad0:	d120      	bne.n	8002b14 <_printf_common+0xc4>
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	e010      	b.n	8002af8 <_printf_common+0xa8>
 8002ad6:	3701      	adds	r7, #1
 8002ad8:	68e3      	ldr	r3, [r4, #12]
 8002ada:	682a      	ldr	r2, [r5, #0]
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	429f      	cmp	r7, r3
 8002ae0:	dad2      	bge.n	8002a88 <_printf_common+0x38>
 8002ae2:	0022      	movs	r2, r4
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	3219      	adds	r2, #25
 8002ae8:	9901      	ldr	r1, [sp, #4]
 8002aea:	9800      	ldr	r0, [sp, #0]
 8002aec:	9e08      	ldr	r6, [sp, #32]
 8002aee:	47b0      	blx	r6
 8002af0:	1c43      	adds	r3, r0, #1
 8002af2:	d1f0      	bne.n	8002ad6 <_printf_common+0x86>
 8002af4:	2001      	movs	r0, #1
 8002af6:	4240      	negs	r0, r0
 8002af8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002afa:	2030      	movs	r0, #48	; 0x30
 8002afc:	18e1      	adds	r1, r4, r3
 8002afe:	3143      	adds	r1, #67	; 0x43
 8002b00:	7008      	strb	r0, [r1, #0]
 8002b02:	0021      	movs	r1, r4
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	3145      	adds	r1, #69	; 0x45
 8002b08:	7809      	ldrb	r1, [r1, #0]
 8002b0a:	18a2      	adds	r2, r4, r2
 8002b0c:	3243      	adds	r2, #67	; 0x43
 8002b0e:	3302      	adds	r3, #2
 8002b10:	7011      	strb	r1, [r2, #0]
 8002b12:	e7c1      	b.n	8002a98 <_printf_common+0x48>
 8002b14:	0022      	movs	r2, r4
 8002b16:	2301      	movs	r3, #1
 8002b18:	321a      	adds	r2, #26
 8002b1a:	9901      	ldr	r1, [sp, #4]
 8002b1c:	9800      	ldr	r0, [sp, #0]
 8002b1e:	9e08      	ldr	r6, [sp, #32]
 8002b20:	47b0      	blx	r6
 8002b22:	1c43      	adds	r3, r0, #1
 8002b24:	d0e6      	beq.n	8002af4 <_printf_common+0xa4>
 8002b26:	3701      	adds	r7, #1
 8002b28:	e7d1      	b.n	8002ace <_printf_common+0x7e>
	...

08002b2c <_printf_i>:
 8002b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b2e:	b08b      	sub	sp, #44	; 0x2c
 8002b30:	9206      	str	r2, [sp, #24]
 8002b32:	000a      	movs	r2, r1
 8002b34:	3243      	adds	r2, #67	; 0x43
 8002b36:	9307      	str	r3, [sp, #28]
 8002b38:	9005      	str	r0, [sp, #20]
 8002b3a:	9204      	str	r2, [sp, #16]
 8002b3c:	7e0a      	ldrb	r2, [r1, #24]
 8002b3e:	000c      	movs	r4, r1
 8002b40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002b42:	2a6e      	cmp	r2, #110	; 0x6e
 8002b44:	d100      	bne.n	8002b48 <_printf_i+0x1c>
 8002b46:	e08f      	b.n	8002c68 <_printf_i+0x13c>
 8002b48:	d817      	bhi.n	8002b7a <_printf_i+0x4e>
 8002b4a:	2a63      	cmp	r2, #99	; 0x63
 8002b4c:	d02c      	beq.n	8002ba8 <_printf_i+0x7c>
 8002b4e:	d808      	bhi.n	8002b62 <_printf_i+0x36>
 8002b50:	2a00      	cmp	r2, #0
 8002b52:	d100      	bne.n	8002b56 <_printf_i+0x2a>
 8002b54:	e099      	b.n	8002c8a <_printf_i+0x15e>
 8002b56:	2a58      	cmp	r2, #88	; 0x58
 8002b58:	d054      	beq.n	8002c04 <_printf_i+0xd8>
 8002b5a:	0026      	movs	r6, r4
 8002b5c:	3642      	adds	r6, #66	; 0x42
 8002b5e:	7032      	strb	r2, [r6, #0]
 8002b60:	e029      	b.n	8002bb6 <_printf_i+0x8a>
 8002b62:	2a64      	cmp	r2, #100	; 0x64
 8002b64:	d001      	beq.n	8002b6a <_printf_i+0x3e>
 8002b66:	2a69      	cmp	r2, #105	; 0x69
 8002b68:	d1f7      	bne.n	8002b5a <_printf_i+0x2e>
 8002b6a:	6821      	ldr	r1, [r4, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	0608      	lsls	r0, r1, #24
 8002b70:	d523      	bpl.n	8002bba <_printf_i+0x8e>
 8002b72:	1d11      	adds	r1, r2, #4
 8002b74:	6019      	str	r1, [r3, #0]
 8002b76:	6815      	ldr	r5, [r2, #0]
 8002b78:	e025      	b.n	8002bc6 <_printf_i+0x9a>
 8002b7a:	2a73      	cmp	r2, #115	; 0x73
 8002b7c:	d100      	bne.n	8002b80 <_printf_i+0x54>
 8002b7e:	e088      	b.n	8002c92 <_printf_i+0x166>
 8002b80:	d808      	bhi.n	8002b94 <_printf_i+0x68>
 8002b82:	2a6f      	cmp	r2, #111	; 0x6f
 8002b84:	d029      	beq.n	8002bda <_printf_i+0xae>
 8002b86:	2a70      	cmp	r2, #112	; 0x70
 8002b88:	d1e7      	bne.n	8002b5a <_printf_i+0x2e>
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	6809      	ldr	r1, [r1, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	6022      	str	r2, [r4, #0]
 8002b92:	e003      	b.n	8002b9c <_printf_i+0x70>
 8002b94:	2a75      	cmp	r2, #117	; 0x75
 8002b96:	d020      	beq.n	8002bda <_printf_i+0xae>
 8002b98:	2a78      	cmp	r2, #120	; 0x78
 8002b9a:	d1de      	bne.n	8002b5a <_printf_i+0x2e>
 8002b9c:	0022      	movs	r2, r4
 8002b9e:	2178      	movs	r1, #120	; 0x78
 8002ba0:	3245      	adds	r2, #69	; 0x45
 8002ba2:	7011      	strb	r1, [r2, #0]
 8002ba4:	4a6c      	ldr	r2, [pc, #432]	; (8002d58 <_printf_i+0x22c>)
 8002ba6:	e030      	b.n	8002c0a <_printf_i+0xde>
 8002ba8:	000e      	movs	r6, r1
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	3642      	adds	r6, #66	; 0x42
 8002bae:	1d11      	adds	r1, r2, #4
 8002bb0:	6019      	str	r1, [r3, #0]
 8002bb2:	6813      	ldr	r3, [r2, #0]
 8002bb4:	7033      	strb	r3, [r6, #0]
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e079      	b.n	8002cae <_printf_i+0x182>
 8002bba:	0649      	lsls	r1, r1, #25
 8002bbc:	d5d9      	bpl.n	8002b72 <_printf_i+0x46>
 8002bbe:	1d11      	adds	r1, r2, #4
 8002bc0:	6019      	str	r1, [r3, #0]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	5ed5      	ldrsh	r5, [r2, r3]
 8002bc6:	2d00      	cmp	r5, #0
 8002bc8:	da03      	bge.n	8002bd2 <_printf_i+0xa6>
 8002bca:	232d      	movs	r3, #45	; 0x2d
 8002bcc:	9a04      	ldr	r2, [sp, #16]
 8002bce:	426d      	negs	r5, r5
 8002bd0:	7013      	strb	r3, [r2, #0]
 8002bd2:	4b62      	ldr	r3, [pc, #392]	; (8002d5c <_printf_i+0x230>)
 8002bd4:	270a      	movs	r7, #10
 8002bd6:	9303      	str	r3, [sp, #12]
 8002bd8:	e02f      	b.n	8002c3a <_printf_i+0x10e>
 8002bda:	6820      	ldr	r0, [r4, #0]
 8002bdc:	6819      	ldr	r1, [r3, #0]
 8002bde:	0605      	lsls	r5, r0, #24
 8002be0:	d503      	bpl.n	8002bea <_printf_i+0xbe>
 8002be2:	1d08      	adds	r0, r1, #4
 8002be4:	6018      	str	r0, [r3, #0]
 8002be6:	680d      	ldr	r5, [r1, #0]
 8002be8:	e005      	b.n	8002bf6 <_printf_i+0xca>
 8002bea:	0640      	lsls	r0, r0, #25
 8002bec:	d5f9      	bpl.n	8002be2 <_printf_i+0xb6>
 8002bee:	680d      	ldr	r5, [r1, #0]
 8002bf0:	1d08      	adds	r0, r1, #4
 8002bf2:	6018      	str	r0, [r3, #0]
 8002bf4:	b2ad      	uxth	r5, r5
 8002bf6:	4b59      	ldr	r3, [pc, #356]	; (8002d5c <_printf_i+0x230>)
 8002bf8:	2708      	movs	r7, #8
 8002bfa:	9303      	str	r3, [sp, #12]
 8002bfc:	2a6f      	cmp	r2, #111	; 0x6f
 8002bfe:	d018      	beq.n	8002c32 <_printf_i+0x106>
 8002c00:	270a      	movs	r7, #10
 8002c02:	e016      	b.n	8002c32 <_printf_i+0x106>
 8002c04:	3145      	adds	r1, #69	; 0x45
 8002c06:	700a      	strb	r2, [r1, #0]
 8002c08:	4a54      	ldr	r2, [pc, #336]	; (8002d5c <_printf_i+0x230>)
 8002c0a:	9203      	str	r2, [sp, #12]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	6821      	ldr	r1, [r4, #0]
 8002c10:	1d10      	adds	r0, r2, #4
 8002c12:	6018      	str	r0, [r3, #0]
 8002c14:	6815      	ldr	r5, [r2, #0]
 8002c16:	0608      	lsls	r0, r1, #24
 8002c18:	d522      	bpl.n	8002c60 <_printf_i+0x134>
 8002c1a:	07cb      	lsls	r3, r1, #31
 8002c1c:	d502      	bpl.n	8002c24 <_printf_i+0xf8>
 8002c1e:	2320      	movs	r3, #32
 8002c20:	4319      	orrs	r1, r3
 8002c22:	6021      	str	r1, [r4, #0]
 8002c24:	2710      	movs	r7, #16
 8002c26:	2d00      	cmp	r5, #0
 8002c28:	d103      	bne.n	8002c32 <_printf_i+0x106>
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	6822      	ldr	r2, [r4, #0]
 8002c2e:	439a      	bics	r2, r3
 8002c30:	6022      	str	r2, [r4, #0]
 8002c32:	0023      	movs	r3, r4
 8002c34:	2200      	movs	r2, #0
 8002c36:	3343      	adds	r3, #67	; 0x43
 8002c38:	701a      	strb	r2, [r3, #0]
 8002c3a:	6863      	ldr	r3, [r4, #4]
 8002c3c:	60a3      	str	r3, [r4, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	db5c      	blt.n	8002cfc <_printf_i+0x1d0>
 8002c42:	2204      	movs	r2, #4
 8002c44:	6821      	ldr	r1, [r4, #0]
 8002c46:	4391      	bics	r1, r2
 8002c48:	6021      	str	r1, [r4, #0]
 8002c4a:	2d00      	cmp	r5, #0
 8002c4c:	d158      	bne.n	8002d00 <_printf_i+0x1d4>
 8002c4e:	9e04      	ldr	r6, [sp, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d064      	beq.n	8002d1e <_printf_i+0x1f2>
 8002c54:	0026      	movs	r6, r4
 8002c56:	9b03      	ldr	r3, [sp, #12]
 8002c58:	3642      	adds	r6, #66	; 0x42
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	7033      	strb	r3, [r6, #0]
 8002c5e:	e05e      	b.n	8002d1e <_printf_i+0x1f2>
 8002c60:	0648      	lsls	r0, r1, #25
 8002c62:	d5da      	bpl.n	8002c1a <_printf_i+0xee>
 8002c64:	b2ad      	uxth	r5, r5
 8002c66:	e7d8      	b.n	8002c1a <_printf_i+0xee>
 8002c68:	6809      	ldr	r1, [r1, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	0608      	lsls	r0, r1, #24
 8002c6e:	d505      	bpl.n	8002c7c <_printf_i+0x150>
 8002c70:	1d11      	adds	r1, r2, #4
 8002c72:	6019      	str	r1, [r3, #0]
 8002c74:	6813      	ldr	r3, [r2, #0]
 8002c76:	6962      	ldr	r2, [r4, #20]
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e006      	b.n	8002c8a <_printf_i+0x15e>
 8002c7c:	0649      	lsls	r1, r1, #25
 8002c7e:	d5f7      	bpl.n	8002c70 <_printf_i+0x144>
 8002c80:	1d11      	adds	r1, r2, #4
 8002c82:	6019      	str	r1, [r3, #0]
 8002c84:	6813      	ldr	r3, [r2, #0]
 8002c86:	8aa2      	ldrh	r2, [r4, #20]
 8002c88:	801a      	strh	r2, [r3, #0]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	9e04      	ldr	r6, [sp, #16]
 8002c8e:	6123      	str	r3, [r4, #16]
 8002c90:	e054      	b.n	8002d3c <_printf_i+0x210>
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	1d11      	adds	r1, r2, #4
 8002c96:	6019      	str	r1, [r3, #0]
 8002c98:	6816      	ldr	r6, [r2, #0]
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	6862      	ldr	r2, [r4, #4]
 8002c9e:	0030      	movs	r0, r6
 8002ca0:	f000 f85e 	bl	8002d60 <memchr>
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	d001      	beq.n	8002cac <_printf_i+0x180>
 8002ca8:	1b80      	subs	r0, r0, r6
 8002caa:	6060      	str	r0, [r4, #4]
 8002cac:	6863      	ldr	r3, [r4, #4]
 8002cae:	6123      	str	r3, [r4, #16]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	9a04      	ldr	r2, [sp, #16]
 8002cb4:	7013      	strb	r3, [r2, #0]
 8002cb6:	e041      	b.n	8002d3c <_printf_i+0x210>
 8002cb8:	6923      	ldr	r3, [r4, #16]
 8002cba:	0032      	movs	r2, r6
 8002cbc:	9906      	ldr	r1, [sp, #24]
 8002cbe:	9805      	ldr	r0, [sp, #20]
 8002cc0:	9d07      	ldr	r5, [sp, #28]
 8002cc2:	47a8      	blx	r5
 8002cc4:	1c43      	adds	r3, r0, #1
 8002cc6:	d043      	beq.n	8002d50 <_printf_i+0x224>
 8002cc8:	6823      	ldr	r3, [r4, #0]
 8002cca:	2500      	movs	r5, #0
 8002ccc:	079b      	lsls	r3, r3, #30
 8002cce:	d40f      	bmi.n	8002cf0 <_printf_i+0x1c4>
 8002cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cd2:	68e0      	ldr	r0, [r4, #12]
 8002cd4:	4298      	cmp	r0, r3
 8002cd6:	da3d      	bge.n	8002d54 <_printf_i+0x228>
 8002cd8:	0018      	movs	r0, r3
 8002cda:	e03b      	b.n	8002d54 <_printf_i+0x228>
 8002cdc:	0022      	movs	r2, r4
 8002cde:	2301      	movs	r3, #1
 8002ce0:	3219      	adds	r2, #25
 8002ce2:	9906      	ldr	r1, [sp, #24]
 8002ce4:	9805      	ldr	r0, [sp, #20]
 8002ce6:	9e07      	ldr	r6, [sp, #28]
 8002ce8:	47b0      	blx	r6
 8002cea:	1c43      	adds	r3, r0, #1
 8002cec:	d030      	beq.n	8002d50 <_printf_i+0x224>
 8002cee:	3501      	adds	r5, #1
 8002cf0:	68e3      	ldr	r3, [r4, #12]
 8002cf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	429d      	cmp	r5, r3
 8002cf8:	dbf0      	blt.n	8002cdc <_printf_i+0x1b0>
 8002cfa:	e7e9      	b.n	8002cd0 <_printf_i+0x1a4>
 8002cfc:	2d00      	cmp	r5, #0
 8002cfe:	d0a9      	beq.n	8002c54 <_printf_i+0x128>
 8002d00:	9e04      	ldr	r6, [sp, #16]
 8002d02:	0028      	movs	r0, r5
 8002d04:	0039      	movs	r1, r7
 8002d06:	f7fd fa97 	bl	8000238 <__aeabi_uidivmod>
 8002d0a:	9b03      	ldr	r3, [sp, #12]
 8002d0c:	3e01      	subs	r6, #1
 8002d0e:	5c5b      	ldrb	r3, [r3, r1]
 8002d10:	0028      	movs	r0, r5
 8002d12:	7033      	strb	r3, [r6, #0]
 8002d14:	0039      	movs	r1, r7
 8002d16:	f7fd fa09 	bl	800012c <__udivsi3>
 8002d1a:	1e05      	subs	r5, r0, #0
 8002d1c:	d1f1      	bne.n	8002d02 <_printf_i+0x1d6>
 8002d1e:	2f08      	cmp	r7, #8
 8002d20:	d109      	bne.n	8002d36 <_printf_i+0x20a>
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	07db      	lsls	r3, r3, #31
 8002d26:	d506      	bpl.n	8002d36 <_printf_i+0x20a>
 8002d28:	6863      	ldr	r3, [r4, #4]
 8002d2a:	6922      	ldr	r2, [r4, #16]
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	dc02      	bgt.n	8002d36 <_printf_i+0x20a>
 8002d30:	2330      	movs	r3, #48	; 0x30
 8002d32:	3e01      	subs	r6, #1
 8002d34:	7033      	strb	r3, [r6, #0]
 8002d36:	9b04      	ldr	r3, [sp, #16]
 8002d38:	1b9b      	subs	r3, r3, r6
 8002d3a:	6123      	str	r3, [r4, #16]
 8002d3c:	9b07      	ldr	r3, [sp, #28]
 8002d3e:	aa09      	add	r2, sp, #36	; 0x24
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	0021      	movs	r1, r4
 8002d44:	9b06      	ldr	r3, [sp, #24]
 8002d46:	9805      	ldr	r0, [sp, #20]
 8002d48:	f7ff fe82 	bl	8002a50 <_printf_common>
 8002d4c:	1c43      	adds	r3, r0, #1
 8002d4e:	d1b3      	bne.n	8002cb8 <_printf_i+0x18c>
 8002d50:	2001      	movs	r0, #1
 8002d52:	4240      	negs	r0, r0
 8002d54:	b00b      	add	sp, #44	; 0x2c
 8002d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d58:	08002ff8 	.word	0x08002ff8
 8002d5c:	08002fe7 	.word	0x08002fe7

08002d60 <memchr>:
 8002d60:	b2c9      	uxtb	r1, r1
 8002d62:	1882      	adds	r2, r0, r2
 8002d64:	4290      	cmp	r0, r2
 8002d66:	d101      	bne.n	8002d6c <memchr+0xc>
 8002d68:	2000      	movs	r0, #0
 8002d6a:	4770      	bx	lr
 8002d6c:	7803      	ldrb	r3, [r0, #0]
 8002d6e:	428b      	cmp	r3, r1
 8002d70:	d0fb      	beq.n	8002d6a <memchr+0xa>
 8002d72:	3001      	adds	r0, #1
 8002d74:	e7f6      	b.n	8002d64 <memchr+0x4>

08002d76 <memmove>:
 8002d76:	b510      	push	{r4, lr}
 8002d78:	4288      	cmp	r0, r1
 8002d7a:	d902      	bls.n	8002d82 <memmove+0xc>
 8002d7c:	188b      	adds	r3, r1, r2
 8002d7e:	4298      	cmp	r0, r3
 8002d80:	d308      	bcc.n	8002d94 <memmove+0x1e>
 8002d82:	2300      	movs	r3, #0
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d007      	beq.n	8002d98 <memmove+0x22>
 8002d88:	5ccc      	ldrb	r4, [r1, r3]
 8002d8a:	54c4      	strb	r4, [r0, r3]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	e7f9      	b.n	8002d84 <memmove+0xe>
 8002d90:	5c8b      	ldrb	r3, [r1, r2]
 8002d92:	5483      	strb	r3, [r0, r2]
 8002d94:	3a01      	subs	r2, #1
 8002d96:	d2fb      	bcs.n	8002d90 <memmove+0x1a>
 8002d98:	bd10      	pop	{r4, pc}
	...

08002d9c <_free_r>:
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	0005      	movs	r5, r0
 8002da0:	2900      	cmp	r1, #0
 8002da2:	d010      	beq.n	8002dc6 <_free_r+0x2a>
 8002da4:	1f0c      	subs	r4, r1, #4
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	da00      	bge.n	8002dae <_free_r+0x12>
 8002dac:	18e4      	adds	r4, r4, r3
 8002dae:	0028      	movs	r0, r5
 8002db0:	f000 f8d4 	bl	8002f5c <__malloc_lock>
 8002db4:	4a1d      	ldr	r2, [pc, #116]	; (8002e2c <_free_r+0x90>)
 8002db6:	6813      	ldr	r3, [r2, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d105      	bne.n	8002dc8 <_free_r+0x2c>
 8002dbc:	6063      	str	r3, [r4, #4]
 8002dbe:	6014      	str	r4, [r2, #0]
 8002dc0:	0028      	movs	r0, r5
 8002dc2:	f000 f8cc 	bl	8002f5e <__malloc_unlock>
 8002dc6:	bd70      	pop	{r4, r5, r6, pc}
 8002dc8:	42a3      	cmp	r3, r4
 8002dca:	d909      	bls.n	8002de0 <_free_r+0x44>
 8002dcc:	6821      	ldr	r1, [r4, #0]
 8002dce:	1860      	adds	r0, r4, r1
 8002dd0:	4283      	cmp	r3, r0
 8002dd2:	d1f3      	bne.n	8002dbc <_free_r+0x20>
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	1841      	adds	r1, r0, r1
 8002dda:	6021      	str	r1, [r4, #0]
 8002ddc:	e7ee      	b.n	8002dbc <_free_r+0x20>
 8002dde:	0013      	movs	r3, r2
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	2a00      	cmp	r2, #0
 8002de4:	d001      	beq.n	8002dea <_free_r+0x4e>
 8002de6:	42a2      	cmp	r2, r4
 8002de8:	d9f9      	bls.n	8002dde <_free_r+0x42>
 8002dea:	6819      	ldr	r1, [r3, #0]
 8002dec:	1858      	adds	r0, r3, r1
 8002dee:	42a0      	cmp	r0, r4
 8002df0:	d10b      	bne.n	8002e0a <_free_r+0x6e>
 8002df2:	6820      	ldr	r0, [r4, #0]
 8002df4:	1809      	adds	r1, r1, r0
 8002df6:	1858      	adds	r0, r3, r1
 8002df8:	6019      	str	r1, [r3, #0]
 8002dfa:	4282      	cmp	r2, r0
 8002dfc:	d1e0      	bne.n	8002dc0 <_free_r+0x24>
 8002dfe:	6810      	ldr	r0, [r2, #0]
 8002e00:	6852      	ldr	r2, [r2, #4]
 8002e02:	1841      	adds	r1, r0, r1
 8002e04:	6019      	str	r1, [r3, #0]
 8002e06:	605a      	str	r2, [r3, #4]
 8002e08:	e7da      	b.n	8002dc0 <_free_r+0x24>
 8002e0a:	42a0      	cmp	r0, r4
 8002e0c:	d902      	bls.n	8002e14 <_free_r+0x78>
 8002e0e:	230c      	movs	r3, #12
 8002e10:	602b      	str	r3, [r5, #0]
 8002e12:	e7d5      	b.n	8002dc0 <_free_r+0x24>
 8002e14:	6821      	ldr	r1, [r4, #0]
 8002e16:	1860      	adds	r0, r4, r1
 8002e18:	4282      	cmp	r2, r0
 8002e1a:	d103      	bne.n	8002e24 <_free_r+0x88>
 8002e1c:	6810      	ldr	r0, [r2, #0]
 8002e1e:	6852      	ldr	r2, [r2, #4]
 8002e20:	1841      	adds	r1, r0, r1
 8002e22:	6021      	str	r1, [r4, #0]
 8002e24:	6062      	str	r2, [r4, #4]
 8002e26:	605c      	str	r4, [r3, #4]
 8002e28:	e7ca      	b.n	8002dc0 <_free_r+0x24>
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	2000009c 	.word	0x2000009c

08002e30 <_malloc_r>:
 8002e30:	2303      	movs	r3, #3
 8002e32:	b570      	push	{r4, r5, r6, lr}
 8002e34:	1ccd      	adds	r5, r1, #3
 8002e36:	439d      	bics	r5, r3
 8002e38:	3508      	adds	r5, #8
 8002e3a:	0006      	movs	r6, r0
 8002e3c:	2d0c      	cmp	r5, #12
 8002e3e:	d21e      	bcs.n	8002e7e <_malloc_r+0x4e>
 8002e40:	250c      	movs	r5, #12
 8002e42:	42a9      	cmp	r1, r5
 8002e44:	d81d      	bhi.n	8002e82 <_malloc_r+0x52>
 8002e46:	0030      	movs	r0, r6
 8002e48:	f000 f888 	bl	8002f5c <__malloc_lock>
 8002e4c:	4a25      	ldr	r2, [pc, #148]	; (8002ee4 <_malloc_r+0xb4>)
 8002e4e:	6814      	ldr	r4, [r2, #0]
 8002e50:	0021      	movs	r1, r4
 8002e52:	2900      	cmp	r1, #0
 8002e54:	d119      	bne.n	8002e8a <_malloc_r+0x5a>
 8002e56:	4c24      	ldr	r4, [pc, #144]	; (8002ee8 <_malloc_r+0xb8>)
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d103      	bne.n	8002e66 <_malloc_r+0x36>
 8002e5e:	0030      	movs	r0, r6
 8002e60:	f000 f86a 	bl	8002f38 <_sbrk_r>
 8002e64:	6020      	str	r0, [r4, #0]
 8002e66:	0029      	movs	r1, r5
 8002e68:	0030      	movs	r0, r6
 8002e6a:	f000 f865 	bl	8002f38 <_sbrk_r>
 8002e6e:	1c43      	adds	r3, r0, #1
 8002e70:	d12c      	bne.n	8002ecc <_malloc_r+0x9c>
 8002e72:	230c      	movs	r3, #12
 8002e74:	0030      	movs	r0, r6
 8002e76:	6033      	str	r3, [r6, #0]
 8002e78:	f000 f871 	bl	8002f5e <__malloc_unlock>
 8002e7c:	e003      	b.n	8002e86 <_malloc_r+0x56>
 8002e7e:	2d00      	cmp	r5, #0
 8002e80:	dadf      	bge.n	8002e42 <_malloc_r+0x12>
 8002e82:	230c      	movs	r3, #12
 8002e84:	6033      	str	r3, [r6, #0]
 8002e86:	2000      	movs	r0, #0
 8002e88:	bd70      	pop	{r4, r5, r6, pc}
 8002e8a:	680b      	ldr	r3, [r1, #0]
 8002e8c:	1b5b      	subs	r3, r3, r5
 8002e8e:	d41a      	bmi.n	8002ec6 <_malloc_r+0x96>
 8002e90:	2b0b      	cmp	r3, #11
 8002e92:	d903      	bls.n	8002e9c <_malloc_r+0x6c>
 8002e94:	600b      	str	r3, [r1, #0]
 8002e96:	18cc      	adds	r4, r1, r3
 8002e98:	6025      	str	r5, [r4, #0]
 8002e9a:	e003      	b.n	8002ea4 <_malloc_r+0x74>
 8002e9c:	428c      	cmp	r4, r1
 8002e9e:	d10e      	bne.n	8002ebe <_malloc_r+0x8e>
 8002ea0:	6863      	ldr	r3, [r4, #4]
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	0030      	movs	r0, r6
 8002ea6:	f000 f85a 	bl	8002f5e <__malloc_unlock>
 8002eaa:	0020      	movs	r0, r4
 8002eac:	2207      	movs	r2, #7
 8002eae:	300b      	adds	r0, #11
 8002eb0:	1d23      	adds	r3, r4, #4
 8002eb2:	4390      	bics	r0, r2
 8002eb4:	1ac3      	subs	r3, r0, r3
 8002eb6:	d0e7      	beq.n	8002e88 <_malloc_r+0x58>
 8002eb8:	425a      	negs	r2, r3
 8002eba:	50e2      	str	r2, [r4, r3]
 8002ebc:	e7e4      	b.n	8002e88 <_malloc_r+0x58>
 8002ebe:	684b      	ldr	r3, [r1, #4]
 8002ec0:	6063      	str	r3, [r4, #4]
 8002ec2:	000c      	movs	r4, r1
 8002ec4:	e7ee      	b.n	8002ea4 <_malloc_r+0x74>
 8002ec6:	000c      	movs	r4, r1
 8002ec8:	6849      	ldr	r1, [r1, #4]
 8002eca:	e7c2      	b.n	8002e52 <_malloc_r+0x22>
 8002ecc:	2303      	movs	r3, #3
 8002ece:	1cc4      	adds	r4, r0, #3
 8002ed0:	439c      	bics	r4, r3
 8002ed2:	42a0      	cmp	r0, r4
 8002ed4:	d0e0      	beq.n	8002e98 <_malloc_r+0x68>
 8002ed6:	1a21      	subs	r1, r4, r0
 8002ed8:	0030      	movs	r0, r6
 8002eda:	f000 f82d 	bl	8002f38 <_sbrk_r>
 8002ede:	1c43      	adds	r3, r0, #1
 8002ee0:	d1da      	bne.n	8002e98 <_malloc_r+0x68>
 8002ee2:	e7c6      	b.n	8002e72 <_malloc_r+0x42>
 8002ee4:	2000009c 	.word	0x2000009c
 8002ee8:	200000a0 	.word	0x200000a0

08002eec <_realloc_r>:
 8002eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eee:	0007      	movs	r7, r0
 8002ef0:	000d      	movs	r5, r1
 8002ef2:	0016      	movs	r6, r2
 8002ef4:	2900      	cmp	r1, #0
 8002ef6:	d105      	bne.n	8002f04 <_realloc_r+0x18>
 8002ef8:	0011      	movs	r1, r2
 8002efa:	f7ff ff99 	bl	8002e30 <_malloc_r>
 8002efe:	0004      	movs	r4, r0
 8002f00:	0020      	movs	r0, r4
 8002f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f04:	2a00      	cmp	r2, #0
 8002f06:	d103      	bne.n	8002f10 <_realloc_r+0x24>
 8002f08:	f7ff ff48 	bl	8002d9c <_free_r>
 8002f0c:	0034      	movs	r4, r6
 8002f0e:	e7f7      	b.n	8002f00 <_realloc_r+0x14>
 8002f10:	f000 f826 	bl	8002f60 <_malloc_usable_size_r>
 8002f14:	002c      	movs	r4, r5
 8002f16:	4286      	cmp	r6, r0
 8002f18:	d9f2      	bls.n	8002f00 <_realloc_r+0x14>
 8002f1a:	0031      	movs	r1, r6
 8002f1c:	0038      	movs	r0, r7
 8002f1e:	f7ff ff87 	bl	8002e30 <_malloc_r>
 8002f22:	1e04      	subs	r4, r0, #0
 8002f24:	d0ec      	beq.n	8002f00 <_realloc_r+0x14>
 8002f26:	0029      	movs	r1, r5
 8002f28:	0032      	movs	r2, r6
 8002f2a:	f7ff fbf7 	bl	800271c <memcpy>
 8002f2e:	0029      	movs	r1, r5
 8002f30:	0038      	movs	r0, r7
 8002f32:	f7ff ff33 	bl	8002d9c <_free_r>
 8002f36:	e7e3      	b.n	8002f00 <_realloc_r+0x14>

08002f38 <_sbrk_r>:
 8002f38:	2300      	movs	r3, #0
 8002f3a:	b570      	push	{r4, r5, r6, lr}
 8002f3c:	4c06      	ldr	r4, [pc, #24]	; (8002f58 <_sbrk_r+0x20>)
 8002f3e:	0005      	movs	r5, r0
 8002f40:	0008      	movs	r0, r1
 8002f42:	6023      	str	r3, [r4, #0]
 8002f44:	f7ff fb30 	bl	80025a8 <_sbrk>
 8002f48:	1c43      	adds	r3, r0, #1
 8002f4a:	d103      	bne.n	8002f54 <_sbrk_r+0x1c>
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d000      	beq.n	8002f54 <_sbrk_r+0x1c>
 8002f52:	602b      	str	r3, [r5, #0]
 8002f54:	bd70      	pop	{r4, r5, r6, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	20000bc0 	.word	0x20000bc0

08002f5c <__malloc_lock>:
 8002f5c:	4770      	bx	lr

08002f5e <__malloc_unlock>:
 8002f5e:	4770      	bx	lr

08002f60 <_malloc_usable_size_r>:
 8002f60:	1f0b      	subs	r3, r1, #4
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	1f18      	subs	r0, r3, #4
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	da01      	bge.n	8002f6e <_malloc_usable_size_r+0xe>
 8002f6a:	580b      	ldr	r3, [r1, r0]
 8002f6c:	18c0      	adds	r0, r0, r3
 8002f6e:	4770      	bx	lr

08002f70 <_init>:
 8002f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f76:	bc08      	pop	{r3}
 8002f78:	469e      	mov	lr, r3
 8002f7a:	4770      	bx	lr

08002f7c <_fini>:
 8002f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f82:	bc08      	pop	{r3}
 8002f84:	469e      	mov	lr, r3
 8002f86:	4770      	bx	lr
