
lux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002864  08002864  00012864  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080028ec  080028ec  000128ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080028f0  080028f0  000128f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  080028f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000438  20000070  08002964  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200004a8  08002964  000204a8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ef17  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000024e9  00000000  00000000  0002efaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006de2  00000000  00000000  00031498  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000950  00000000  00000000  00038280  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ad8  00000000  00000000  00038bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005d3e  00000000  00000000  000396a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003175  00000000  00000000  0003f3e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004255b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001d28  00000000  00000000  000425d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800284c 	.word	0x0800284c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	0800284c 	.word	0x0800284c

08000104 <__gnu_thumb1_case_uqi>:
 8000104:	b402      	push	{r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0049      	lsls	r1, r1, #1
 800010c:	5c09      	ldrb	r1, [r1, r0]
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	448e      	add	lr, r1
 8000112:	bc02      	pop	{r1}
 8000114:	4770      	bx	lr
 8000116:	46c0      	nop			; (mov r8, r8)

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000244:	b570      	push	{r4, r5, r6, lr}
 8000246:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000248:	20fa      	movs	r0, #250	; 0xfa
 800024a:	4b0d      	ldr	r3, [pc, #52]	; (8000280 <HAL_InitTick+0x3c>)
 800024c:	0080      	lsls	r0, r0, #2
 800024e:	7819      	ldrb	r1, [r3, #0]
 8000250:	f7ff ff6c 	bl	800012c <__udivsi3>
 8000254:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <HAL_InitTick+0x40>)
 8000256:	0001      	movs	r1, r0
 8000258:	6818      	ldr	r0, [r3, #0]
 800025a:	f7ff ff67 	bl	800012c <__udivsi3>
 800025e:	f000 f879 	bl	8000354 <HAL_SYSTICK_Config>
 8000262:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000264:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000266:	2c00      	cmp	r4, #0
 8000268:	d109      	bne.n	800027e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800026a:	2d03      	cmp	r5, #3
 800026c:	d807      	bhi.n	800027e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800026e:	3802      	subs	r0, #2
 8000270:	0022      	movs	r2, r4
 8000272:	0029      	movs	r1, r5
 8000274:	f000 f83e 	bl	80002f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000278:	0020      	movs	r0, r4
 800027a:	4b03      	ldr	r3, [pc, #12]	; (8000288 <HAL_InitTick+0x44>)
 800027c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	20000000 	.word	0x20000000
 8000284:	20000008 	.word	0x20000008
 8000288:	20000004 	.word	0x20000004

0800028c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800028c:	2310      	movs	r3, #16
 800028e:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <HAL_Init+0x1c>)
{
 8000290:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000292:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000294:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000296:	430b      	orrs	r3, r1
 8000298:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800029a:	f7ff ffd3 	bl	8000244 <HAL_InitTick>
  HAL_MspInit();
 800029e:	f001 fdd1 	bl	8001e44 <HAL_MspInit>
}
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	40022000 	.word	0x40022000

080002ac <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002ac:	4a03      	ldr	r2, [pc, #12]	; (80002bc <HAL_IncTick+0x10>)
 80002ae:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <HAL_IncTick+0x14>)
 80002b0:	6811      	ldr	r1, [r2, #0]
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	185b      	adds	r3, r3, r1
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	4770      	bx	lr
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	200000a4 	.word	0x200000a4
 80002c0:	20000000 	.word	0x20000000

080002c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002c4:	4b01      	ldr	r3, [pc, #4]	; (80002cc <HAL_GetTick+0x8>)
 80002c6:	6818      	ldr	r0, [r3, #0]
}
 80002c8:	4770      	bx	lr
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	200000a4 	.word	0x200000a4

080002d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002d4:	f7ff fff6 	bl	80002c4 <HAL_GetTick>
 80002d8:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002da:	1c63      	adds	r3, r4, #1
 80002dc:	d002      	beq.n	80002e4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80002de:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <HAL_Delay+0x20>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002e4:	f7ff ffee 	bl	80002c4 <HAL_GetTick>
 80002e8:	1b40      	subs	r0, r0, r5
 80002ea:	4284      	cmp	r4, r0
 80002ec:	d8fa      	bhi.n	80002e4 <HAL_Delay+0x14>
  {
  }
}
 80002ee:	bd70      	pop	{r4, r5, r6, pc}
 80002f0:	20000000 	.word	0x20000000

080002f4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002f4:	b570      	push	{r4, r5, r6, lr}
 80002f6:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80002f8:	2800      	cmp	r0, #0
 80002fa:	db12      	blt.n	8000322 <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	4a13      	ldr	r2, [pc, #76]	; (800034c <HAL_NVIC_SetPriority+0x58>)
 8000300:	2403      	movs	r4, #3
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	189b      	adds	r3, r3, r2
 8000306:	22ff      	movs	r2, #255	; 0xff
 8000308:	4020      	ands	r0, r4
 800030a:	40a0      	lsls	r0, r4
 800030c:	0014      	movs	r4, r2
 800030e:	25c0      	movs	r5, #192	; 0xc0
 8000310:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000312:	4011      	ands	r1, r2
 8000314:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000316:	00ad      	lsls	r5, r5, #2
 8000318:	595e      	ldr	r6, [r3, r5]
 800031a:	43a6      	bics	r6, r4
 800031c:	4331      	orrs	r1, r6
 800031e:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000320:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000322:	2403      	movs	r4, #3
 8000324:	230f      	movs	r3, #15
 8000326:	b2c0      	uxtb	r0, r0
 8000328:	4003      	ands	r3, r0
 800032a:	4020      	ands	r0, r4
 800032c:	40a0      	lsls	r0, r4
 800032e:	34fc      	adds	r4, #252	; 0xfc
 8000330:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000332:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000334:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000336:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000338:	3b08      	subs	r3, #8
 800033a:	4a05      	ldr	r2, [pc, #20]	; (8000350 <HAL_NVIC_SetPriority+0x5c>)
 800033c:	089b      	lsrs	r3, r3, #2
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	189b      	adds	r3, r3, r2
 8000342:	69da      	ldr	r2, [r3, #28]
 8000344:	43aa      	bics	r2, r5
 8000346:	4311      	orrs	r1, r2
 8000348:	61d9      	str	r1, [r3, #28]
 800034a:	e7e9      	b.n	8000320 <HAL_NVIC_SetPriority+0x2c>
 800034c:	e000e100 	.word	0xe000e100
 8000350:	e000ed00 	.word	0xe000ed00

08000354 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000354:	4a09      	ldr	r2, [pc, #36]	; (800037c <HAL_SYSTICK_Config+0x28>)
 8000356:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000358:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800035a:	4293      	cmp	r3, r2
 800035c:	d80d      	bhi.n	800037a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800035e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000360:	4a07      	ldr	r2, [pc, #28]	; (8000380 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000362:	4808      	ldr	r0, [pc, #32]	; (8000384 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000364:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000366:	6a03      	ldr	r3, [r0, #32]
 8000368:	0609      	lsls	r1, r1, #24
 800036a:	021b      	lsls	r3, r3, #8
 800036c:	0a1b      	lsrs	r3, r3, #8
 800036e:	430b      	orrs	r3, r1
 8000370:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000372:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000374:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000376:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000378:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800037a:	4770      	bx	lr
 800037c:	00ffffff 	.word	0x00ffffff
 8000380:	e000e010 	.word	0xe000e010
 8000384:	e000ed00 	.word	0xe000ed00

08000388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000388:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800038a:	4a56      	ldr	r2, [pc, #344]	; (80004e4 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800038c:	680b      	ldr	r3, [r1, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800038e:	1882      	adds	r2, r0, r2
 8000390:	1e54      	subs	r4, r2, #1
 8000392:	41a2      	sbcs	r2, r4
{ 
 8000394:	b089      	sub	sp, #36	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000396:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00u;
 8000398:	2300      	movs	r3, #0
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800039a:	3204      	adds	r2, #4
 800039c:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800039e:	9a03      	ldr	r2, [sp, #12]
 80003a0:	40da      	lsrs	r2, r3
 80003a2:	d101      	bne.n	80003a8 <HAL_GPIO_Init+0x20>
      }
    }

    position++;
  } 
}
 80003a4:	b009      	add	sp, #36	; 0x24
 80003a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80003a8:	2201      	movs	r2, #1
 80003aa:	409a      	lsls	r2, r3
 80003ac:	4694      	mov	ip, r2
 80003ae:	4664      	mov	r4, ip
 80003b0:	9a03      	ldr	r2, [sp, #12]
 80003b2:	4022      	ands	r2, r4
 80003b4:	9202      	str	r2, [sp, #8]
    if (iocurrent != 0x00u)
 80003b6:	d100      	bne.n	80003ba <HAL_GPIO_Init+0x32>
 80003b8:	e092      	b.n	80004e0 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003ba:	684a      	ldr	r2, [r1, #4]
 80003bc:	9201      	str	r2, [sp, #4]
 80003be:	2210      	movs	r2, #16
 80003c0:	9e01      	ldr	r6, [sp, #4]
 80003c2:	4396      	bics	r6, r2
 80003c4:	2e02      	cmp	r6, #2
 80003c6:	d10d      	bne.n	80003e4 <HAL_GPIO_Init+0x5c>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80003c8:	2407      	movs	r4, #7
 80003ca:	270f      	movs	r7, #15
 80003cc:	401c      	ands	r4, r3
 80003ce:	00a4      	lsls	r4, r4, #2
 80003d0:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3u];
 80003d2:	08da      	lsrs	r2, r3, #3
 80003d4:	0092      	lsls	r2, r2, #2
 80003d6:	1882      	adds	r2, r0, r2
 80003d8:	6a15      	ldr	r5, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80003da:	43bd      	bics	r5, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80003dc:	690f      	ldr	r7, [r1, #16]
 80003de:	40a7      	lsls	r7, r4
 80003e0:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3u] = temp;
 80003e2:	6215      	str	r5, [r2, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80003e4:	2203      	movs	r2, #3
 80003e6:	0014      	movs	r4, r2
 80003e8:	005d      	lsls	r5, r3, #1
 80003ea:	40ac      	lsls	r4, r5
 80003ec:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003ee:	6807      	ldr	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003f0:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80003f2:	4027      	ands	r7, r4
 80003f4:	9704      	str	r7, [sp, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80003f6:	9f01      	ldr	r7, [sp, #4]
 80003f8:	403a      	ands	r2, r7
 80003fa:	40aa      	lsls	r2, r5
 80003fc:	9f04      	ldr	r7, [sp, #16]
 80003fe:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8000400:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000402:	2e01      	cmp	r6, #1
 8000404:	d80e      	bhi.n	8000424 <HAL_GPIO_Init+0x9c>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000406:	68ca      	ldr	r2, [r1, #12]
        temp = GPIOx->OSPEEDR;
 8000408:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800040a:	40aa      	lsls	r2, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800040c:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800040e:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8000410:	6082      	str	r2, [r0, #8]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000412:	4662      	mov	r2, ip
        temp = GPIOx->OTYPER;
 8000414:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000416:	4396      	bics	r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000418:	9a01      	ldr	r2, [sp, #4]
 800041a:	06d2      	lsls	r2, r2, #27
 800041c:	0fd2      	lsrs	r2, r2, #31
 800041e:	409a      	lsls	r2, r3
 8000420:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8000422:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000424:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000426:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000428:	688a      	ldr	r2, [r1, #8]
 800042a:	40aa      	lsls	r2, r5
 800042c:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800042e:	9a01      	ldr	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 8000430:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000432:	00d2      	lsls	r2, r2, #3
 8000434:	d554      	bpl.n	80004e0 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000436:	2601      	movs	r6, #1
 8000438:	4a2b      	ldr	r2, [pc, #172]	; (80004e8 <HAL_GPIO_Init+0x160>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800043a:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800043c:	6994      	ldr	r4, [r2, #24]
 800043e:	4334      	orrs	r4, r6
 8000440:	6194      	str	r4, [r2, #24]
 8000442:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000444:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000446:	4032      	ands	r2, r6
 8000448:	9207      	str	r2, [sp, #28]
 800044a:	9a07      	ldr	r2, [sp, #28]
 800044c:	4a27      	ldr	r2, [pc, #156]	; (80004ec <HAL_GPIO_Init+0x164>)
 800044e:	00a4      	lsls	r4, r4, #2
 8000450:	18a4      	adds	r4, r4, r2
        temp = SYSCFG->EXTICR[position >> 2u];
 8000452:	68a2      	ldr	r2, [r4, #8]
 8000454:	4694      	mov	ip, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000456:	2203      	movs	r2, #3
 8000458:	4015      	ands	r5, r2
 800045a:	00ad      	lsls	r5, r5, #2
 800045c:	320c      	adds	r2, #12
 800045e:	40aa      	lsls	r2, r5
 8000460:	4667      	mov	r7, ip
 8000462:	4397      	bics	r7, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000464:	2290      	movs	r2, #144	; 0x90
 8000466:	05d2      	lsls	r2, r2, #23
 8000468:	4694      	mov	ip, r2
 800046a:	2200      	movs	r2, #0
 800046c:	4560      	cmp	r0, ip
 800046e:	d00d      	beq.n	800048c <HAL_GPIO_Init+0x104>
 8000470:	4a1f      	ldr	r2, [pc, #124]	; (80004f0 <HAL_GPIO_Init+0x168>)
 8000472:	4694      	mov	ip, r2
 8000474:	0032      	movs	r2, r6
 8000476:	4560      	cmp	r0, ip
 8000478:	d008      	beq.n	800048c <HAL_GPIO_Init+0x104>
 800047a:	4e1e      	ldr	r6, [pc, #120]	; (80004f4 <HAL_GPIO_Init+0x16c>)
 800047c:	1892      	adds	r2, r2, r2
 800047e:	42b0      	cmp	r0, r6
 8000480:	d004      	beq.n	800048c <HAL_GPIO_Init+0x104>
 8000482:	4e1d      	ldr	r6, [pc, #116]	; (80004f8 <HAL_GPIO_Init+0x170>)
 8000484:	3201      	adds	r2, #1
 8000486:	42b0      	cmp	r0, r6
 8000488:	d000      	beq.n	800048c <HAL_GPIO_Init+0x104>
 800048a:	9a05      	ldr	r2, [sp, #20]
 800048c:	40aa      	lsls	r2, r5
 800048e:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000490:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000492:	4a1a      	ldr	r2, [pc, #104]	; (80004fc <HAL_GPIO_Init+0x174>)
        temp &= ~(iocurrent);
 8000494:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8000496:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000498:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800049a:	9f01      	ldr	r7, [sp, #4]
        temp &= ~(iocurrent);
 800049c:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800049e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004a0:	03ff      	lsls	r7, r7, #15
 80004a2:	d401      	bmi.n	80004a8 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 80004a4:	0035      	movs	r5, r6
 80004a6:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 80004a8:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80004aa:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80004ac:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004ae:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80004b0:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004b2:	03bf      	lsls	r7, r7, #14
 80004b4:	d401      	bmi.n	80004ba <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 80004b6:	0035      	movs	r5, r6
 80004b8:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80004ba:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80004bc:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80004be:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004c0:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80004c2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004c4:	02ff      	lsls	r7, r7, #11
 80004c6:	d401      	bmi.n	80004cc <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 80004c8:	0035      	movs	r5, r6
 80004ca:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80004cc:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80004ce:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80004d0:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004d2:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80004d4:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004d6:	02bf      	lsls	r7, r7, #10
 80004d8:	d401      	bmi.n	80004de <HAL_GPIO_Init+0x156>
        temp &= ~(iocurrent);
 80004da:	4025      	ands	r5, r4
 80004dc:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80004de:	60d6      	str	r6, [r2, #12]
    position++;
 80004e0:	3301      	adds	r3, #1
 80004e2:	e75c      	b.n	800039e <HAL_GPIO_Init+0x16>
 80004e4:	b7fff000 	.word	0xb7fff000
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010000 	.word	0x40010000
 80004f0:	48000400 	.word	0x48000400
 80004f4:	48000800 	.word	0x48000800
 80004f8:	48000c00 	.word	0x48000c00
 80004fc:	40010400 	.word	0x40010400

08000500 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000500:	2a00      	cmp	r2, #0
 8000502:	d001      	beq.n	8000508 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000504:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000506:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000508:	6281      	str	r1, [r0, #40]	; 0x28
}
 800050a:	e7fc      	b.n	8000506 <HAL_GPIO_WritePin+0x6>

0800050c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800050c:	6803      	ldr	r3, [r0, #0]
 800050e:	699a      	ldr	r2, [r3, #24]
 8000510:	0792      	lsls	r2, r2, #30
 8000512:	d501      	bpl.n	8000518 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000514:	2200      	movs	r2, #0
 8000516:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000518:	2201      	movs	r2, #1
 800051a:	6999      	ldr	r1, [r3, #24]
 800051c:	4211      	tst	r1, r2
 800051e:	d102      	bne.n	8000526 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000520:	6999      	ldr	r1, [r3, #24]
 8000522:	430a      	orrs	r2, r1
 8000524:	619a      	str	r2, [r3, #24]
  }
}
 8000526:	4770      	bx	lr

08000528 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	9e04      	ldr	r6, [sp, #16]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800052c:	0589      	lsls	r1, r1, #22
 800052e:	4333      	orrs	r3, r6
 8000530:	0d89      	lsrs	r1, r1, #22
 8000532:	4319      	orrs	r1, r3
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	6804      	ldr	r4, [r0, #0]
 8000538:	00db      	lsls	r3, r3, #3
 800053a:	0d70      	lsrs	r0, r6, #21
 800053c:	4018      	ands	r0, r3
 800053e:	4b04      	ldr	r3, [pc, #16]	; (8000550 <I2C_TransferConfig+0x28>)
 8000540:	6865      	ldr	r5, [r4, #4]
 8000542:	0412      	lsls	r2, r2, #16
 8000544:	4318      	orrs	r0, r3
 8000546:	4385      	bics	r5, r0
 8000548:	4311      	orrs	r1, r2
 800054a:	4329      	orrs	r1, r5
 800054c:	6061      	str	r1, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	03ff63ff 	.word	0x03ff63ff

08000554 <I2C_WaitOnFlagUntilTimeout>:
{
 8000554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000556:	0004      	movs	r4, r0
 8000558:	000e      	movs	r6, r1
 800055a:	0017      	movs	r7, r2
 800055c:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800055e:	6822      	ldr	r2, [r4, #0]
 8000560:	6993      	ldr	r3, [r2, #24]
 8000562:	4033      	ands	r3, r6
 8000564:	1b9b      	subs	r3, r3, r6
 8000566:	4259      	negs	r1, r3
 8000568:	414b      	adcs	r3, r1
 800056a:	42bb      	cmp	r3, r7
 800056c:	d001      	beq.n	8000572 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800056e:	2000      	movs	r0, #0
 8000570:	e017      	b.n	80005a2 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8000572:	1c6b      	adds	r3, r5, #1
 8000574:	d0f4      	beq.n	8000560 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000576:	f7ff fea5 	bl	80002c4 <HAL_GetTick>
 800057a:	9b06      	ldr	r3, [sp, #24]
 800057c:	1ac0      	subs	r0, r0, r3
 800057e:	4285      	cmp	r5, r0
 8000580:	d301      	bcc.n	8000586 <I2C_WaitOnFlagUntilTimeout+0x32>
 8000582:	2d00      	cmp	r5, #0
 8000584:	d1eb      	bne.n	800055e <I2C_WaitOnFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000586:	2220      	movs	r2, #32
 8000588:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800058a:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800058c:	4313      	orrs	r3, r2
 800058e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000590:	0023      	movs	r3, r4
 8000592:	3341      	adds	r3, #65	; 0x41
 8000594:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000596:	0022      	movs	r2, r4
 8000598:	2300      	movs	r3, #0
 800059a:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 800059c:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800059e:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80005a0:	7023      	strb	r3, [r4, #0]
}
 80005a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080005a4 <I2C_IsAcknowledgeFailed>:
{
 80005a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80005a6:	6803      	ldr	r3, [r0, #0]
{
 80005a8:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80005aa:	6998      	ldr	r0, [r3, #24]
 80005ac:	2310      	movs	r3, #16
{
 80005ae:	000e      	movs	r6, r1
 80005b0:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80005b2:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80005b4:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80005b6:	2800      	cmp	r0, #0
 80005b8:	d118      	bne.n	80005ec <I2C_IsAcknowledgeFailed+0x48>
}
 80005ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 80005bc:	1c72      	adds	r2, r6, #1
 80005be:	d016      	beq.n	80005ee <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80005c0:	f7ff fe80 	bl	80002c4 <HAL_GetTick>
 80005c4:	1bc0      	subs	r0, r0, r7
 80005c6:	4286      	cmp	r6, r0
 80005c8:	d301      	bcc.n	80005ce <I2C_IsAcknowledgeFailed+0x2a>
 80005ca:	2e00      	cmp	r6, #0
 80005cc:	d10e      	bne.n	80005ec <I2C_IsAcknowledgeFailed+0x48>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005ce:	2220      	movs	r2, #32
 80005d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005d2:	4313      	orrs	r3, r2
 80005d4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80005d6:	0023      	movs	r3, r4
 80005d8:	3341      	adds	r3, #65	; 0x41
 80005da:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80005dc:	0022      	movs	r2, r4
 80005de:	2300      	movs	r3, #0
 80005e0:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80005e2:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80005e4:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 80005e6:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 80005e8:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 80005ea:	e7e6      	b.n	80005ba <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80005ec:	6823      	ldr	r3, [r4, #0]
 80005ee:	699a      	ldr	r2, [r3, #24]
 80005f0:	422a      	tst	r2, r5
 80005f2:	d0e3      	beq.n	80005bc <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80005f4:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 80005f6:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80005f8:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80005fa:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80005fc:	f7ff ff86 	bl	800050c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000600:	6822      	ldr	r2, [r4, #0]
 8000602:	4906      	ldr	r1, [pc, #24]	; (800061c <I2C_IsAcknowledgeFailed+0x78>)
 8000604:	6853      	ldr	r3, [r2, #4]
 8000606:	400b      	ands	r3, r1
 8000608:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800060a:	2304      	movs	r3, #4
 800060c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800060e:	4313      	orrs	r3, r2
 8000610:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000612:	0023      	movs	r3, r4
 8000614:	3341      	adds	r3, #65	; 0x41
 8000616:	701d      	strb	r5, [r3, #0]
 8000618:	e7e0      	b.n	80005dc <I2C_IsAcknowledgeFailed+0x38>
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	fe00e800 	.word	0xfe00e800

08000620 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000622:	0004      	movs	r4, r0
 8000624:	000d      	movs	r5, r1
 8000626:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000628:	2702      	movs	r7, #2
 800062a:	6823      	ldr	r3, [r4, #0]
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	423b      	tst	r3, r7
 8000630:	d001      	beq.n	8000636 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8000632:	2000      	movs	r0, #0
}
 8000634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000636:	0032      	movs	r2, r6
 8000638:	0029      	movs	r1, r5
 800063a:	0020      	movs	r0, r4
 800063c:	f7ff ffb2 	bl	80005a4 <I2C_IsAcknowledgeFailed>
 8000640:	2800      	cmp	r0, #0
 8000642:	d115      	bne.n	8000670 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000644:	1c6b      	adds	r3, r5, #1
 8000646:	d0f0      	beq.n	800062a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000648:	f7ff fe3c 	bl	80002c4 <HAL_GetTick>
 800064c:	1b80      	subs	r0, r0, r6
 800064e:	4285      	cmp	r5, r0
 8000650:	d301      	bcc.n	8000656 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8000652:	2d00      	cmp	r5, #0
 8000654:	d1e9      	bne.n	800062a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000656:	2220      	movs	r2, #32
 8000658:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800065a:	4313      	orrs	r3, r2
 800065c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800065e:	0023      	movs	r3, r4
 8000660:	3341      	adds	r3, #65	; 0x41
 8000662:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000664:	0022      	movs	r2, r4
 8000666:	2300      	movs	r3, #0
 8000668:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 800066a:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800066c:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800066e:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8000670:	2001      	movs	r0, #1
 8000672:	e7df      	b.n	8000634 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08000674 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000676:	0004      	movs	r4, r0
 8000678:	000d      	movs	r5, r1
 800067a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800067c:	2720      	movs	r7, #32
 800067e:	6823      	ldr	r3, [r4, #0]
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	423b      	tst	r3, r7
 8000684:	d001      	beq.n	800068a <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8000686:	2000      	movs	r0, #0
}
 8000688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800068a:	0032      	movs	r2, r6
 800068c:	0029      	movs	r1, r5
 800068e:	0020      	movs	r0, r4
 8000690:	f7ff ff88 	bl	80005a4 <I2C_IsAcknowledgeFailed>
 8000694:	2800      	cmp	r0, #0
 8000696:	d113      	bne.n	80006c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000698:	f7ff fe14 	bl	80002c4 <HAL_GetTick>
 800069c:	1b80      	subs	r0, r0, r6
 800069e:	4285      	cmp	r5, r0
 80006a0:	d301      	bcc.n	80006a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 80006a2:	2d00      	cmp	r5, #0
 80006a4:	d1eb      	bne.n	800067e <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006a6:	2220      	movs	r2, #32
 80006a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80006aa:	4313      	orrs	r3, r2
 80006ac:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80006ae:	0023      	movs	r3, r4
 80006b0:	3341      	adds	r3, #65	; 0x41
 80006b2:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80006b4:	0022      	movs	r2, r4
 80006b6:	2300      	movs	r3, #0
 80006b8:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 80006ba:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80006bc:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80006be:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80006c0:	2001      	movs	r0, #1
 80006c2:	e7e1      	b.n	8000688 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

080006c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80006c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c6:	0004      	movs	r4, r0
 80006c8:	000d      	movs	r5, r1
 80006ca:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80006cc:	2604      	movs	r6, #4
 80006ce:	6823      	ldr	r3, [r4, #0]
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	4233      	tst	r3, r6
 80006d4:	d111      	bne.n	80006fa <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80006d6:	003a      	movs	r2, r7
 80006d8:	0029      	movs	r1, r5
 80006da:	0020      	movs	r0, r4
 80006dc:	f7ff ff62 	bl	80005a4 <I2C_IsAcknowledgeFailed>
 80006e0:	2800      	cmp	r0, #0
 80006e2:	d11a      	bne.n	800071a <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80006e4:	2120      	movs	r1, #32
 80006e6:	6823      	ldr	r3, [r4, #0]
 80006e8:	699a      	ldr	r2, [r3, #24]
 80006ea:	420a      	tst	r2, r1
 80006ec:	d017      	beq.n	800071e <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80006ee:	699a      	ldr	r2, [r3, #24]
 80006f0:	4232      	tst	r2, r6
 80006f2:	d004      	beq.n	80006fe <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 80006f4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80006f6:	2a00      	cmp	r2, #0
 80006f8:	d001      	beq.n	80006fe <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 80006fa:	2000      	movs	r0, #0
}
 80006fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80006fe:	2120      	movs	r1, #32
 8000700:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8000702:	685a      	ldr	r2, [r3, #4]
 8000704:	480e      	ldr	r0, [pc, #56]	; (8000740 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 8000706:	4002      	ands	r2, r0
 8000708:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800070a:	0022      	movs	r2, r4
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800070c:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800070e:	3241      	adds	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000710:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000712:	7011      	strb	r1, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8000714:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000716:	7053      	strb	r3, [r2, #1]
      __HAL_UNLOCK(hi2c);
 8000718:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800071a:	2001      	movs	r0, #1
 800071c:	e7ee      	b.n	80006fc <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800071e:	f7ff fdd1 	bl	80002c4 <HAL_GetTick>
 8000722:	1bc0      	subs	r0, r0, r7
 8000724:	4285      	cmp	r5, r0
 8000726:	d301      	bcc.n	800072c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 8000728:	2d00      	cmp	r5, #0
 800072a:	d1d0      	bne.n	80006ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800072c:	2220      	movs	r2, #32
 800072e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000730:	4313      	orrs	r3, r2
 8000732:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000734:	0023      	movs	r3, r4
 8000736:	3341      	adds	r3, #65	; 0x41
 8000738:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 800073a:	3440      	adds	r4, #64	; 0x40
 800073c:	2300      	movs	r3, #0
 800073e:	e7eb      	b.n	8000718 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8000740:	fe00e800 	.word	0xfe00e800

08000744 <HAL_I2C_Init>:
{
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000748:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800074a:	2c00      	cmp	r4, #0
 800074c:	d03f      	beq.n	80007ce <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800074e:	0025      	movs	r5, r4
 8000750:	3541      	adds	r5, #65	; 0x41
 8000752:	782b      	ldrb	r3, [r5, #0]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d105      	bne.n	8000766 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800075a:	0022      	movs	r2, r4
 800075c:	3240      	adds	r2, #64	; 0x40
 800075e:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8000760:	0020      	movs	r0, r4
 8000762:	f001 fa47 	bl	8001bf4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000766:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000768:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800076a:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 800076c:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800076e:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	68a6      	ldr	r6, [r4, #8]
 8000774:	438a      	bics	r2, r1
 8000776:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000778:	6861      	ldr	r1, [r4, #4]
 800077a:	4a1a      	ldr	r2, [pc, #104]	; (80007e4 <HAL_I2C_Init+0xa0>)
 800077c:	400a      	ands	r2, r1
 800077e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000780:	6899      	ldr	r1, [r3, #8]
 8000782:	4a19      	ldr	r2, [pc, #100]	; (80007e8 <HAL_I2C_Init+0xa4>)
 8000784:	4011      	ands	r1, r2
 8000786:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000788:	2801      	cmp	r0, #1
 800078a:	d121      	bne.n	80007d0 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	0209      	lsls	r1, r1, #8
 8000790:	4331      	orrs	r1, r6
 8000792:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000794:	6858      	ldr	r0, [r3, #4]
 8000796:	4915      	ldr	r1, [pc, #84]	; (80007ec <HAL_I2C_Init+0xa8>)
 8000798:	4301      	orrs	r1, r0
 800079a:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800079c:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800079e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80007a0:	400a      	ands	r2, r1
 80007a2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80007a4:	6961      	ldr	r1, [r4, #20]
 80007a6:	6922      	ldr	r2, [r4, #16]
 80007a8:	430a      	orrs	r2, r1
 80007aa:	69a1      	ldr	r1, [r4, #24]
 80007ac:	0209      	lsls	r1, r1, #8
 80007ae:	430a      	orrs	r2, r1
 80007b0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80007b2:	6a21      	ldr	r1, [r4, #32]
 80007b4:	69e2      	ldr	r2, [r4, #28]
 80007b6:	430a      	orrs	r2, r1
 80007b8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80007ba:	2201      	movs	r2, #1
 80007bc:	6819      	ldr	r1, [r3, #0]
 80007be:	430a      	orrs	r2, r1
 80007c0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80007c2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80007c4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80007c6:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80007c8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80007ca:	3442      	adds	r4, #66	; 0x42
 80007cc:	7020      	strb	r0, [r4, #0]
}
 80007ce:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80007d0:	2184      	movs	r1, #132	; 0x84
 80007d2:	0209      	lsls	r1, r1, #8
 80007d4:	4331      	orrs	r1, r6
 80007d6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80007d8:	2802      	cmp	r0, #2
 80007da:	d1db      	bne.n	8000794 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80007dc:	2180      	movs	r1, #128	; 0x80
 80007de:	0109      	lsls	r1, r1, #4
 80007e0:	6059      	str	r1, [r3, #4]
 80007e2:	e7d7      	b.n	8000794 <HAL_I2C_Init+0x50>
 80007e4:	f0ffffff 	.word	0xf0ffffff
 80007e8:	ffff7fff 	.word	0xffff7fff
 80007ec:	02008000 	.word	0x02008000

080007f0 <HAL_I2C_Master_Transmit>:
{
 80007f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80007f2:	0005      	movs	r5, r0
{
 80007f4:	b087      	sub	sp, #28
 80007f6:	9103      	str	r1, [sp, #12]
 80007f8:	9204      	str	r2, [sp, #16]
 80007fa:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80007fc:	3541      	adds	r5, #65	; 0x41
 80007fe:	782b      	ldrb	r3, [r5, #0]
{
 8000800:	0004      	movs	r4, r0
    return HAL_BUSY;
 8000802:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000804:	2b20      	cmp	r3, #32
 8000806:	d114      	bne.n	8000832 <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 8000808:	0023      	movs	r3, r4
 800080a:	3340      	adds	r3, #64	; 0x40
 800080c:	781a      	ldrb	r2, [r3, #0]
 800080e:	2a01      	cmp	r2, #1
 8000810:	d00f      	beq.n	8000832 <HAL_I2C_Master_Transmit+0x42>
 8000812:	2601      	movs	r6, #1
 8000814:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8000816:	f7ff fd55 	bl	80002c4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800081a:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800081c:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800081e:	9000      	str	r0, [sp, #0]
 8000820:	2319      	movs	r3, #25
 8000822:	0032      	movs	r2, r6
 8000824:	0209      	lsls	r1, r1, #8
 8000826:	0020      	movs	r0, r4
 8000828:	f7ff fe94 	bl	8000554 <I2C_WaitOnFlagUntilTimeout>
 800082c:	2800      	cmp	r0, #0
 800082e:	d002      	beq.n	8000836 <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 8000830:	2001      	movs	r0, #1
}
 8000832:	b007      	add	sp, #28
 8000834:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000836:	2321      	movs	r3, #33	; 0x21
 8000838:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800083a:	0025      	movs	r5, r4
 800083c:	3b11      	subs	r3, #17
 800083e:	3542      	adds	r5, #66	; 0x42
 8000840:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8000842:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000844:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000846:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000848:	466b      	mov	r3, sp
 800084a:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 800084c:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800084e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000850:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000852:	4b30      	ldr	r3, [pc, #192]	; (8000914 <HAL_I2C_Master_Transmit+0x124>)
 8000854:	2aff      	cmp	r2, #255	; 0xff
 8000856:	d921      	bls.n	800089c <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000858:	22ff      	movs	r2, #255	; 0xff
 800085a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2380      	movs	r3, #128	; 0x80
 8000860:	045b      	lsls	r3, r3, #17
 8000862:	9903      	ldr	r1, [sp, #12]
 8000864:	0020      	movs	r0, r4
 8000866:	f7ff fe5f 	bl	8000528 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800086a:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800086c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800086e:	003a      	movs	r2, r7
 8000870:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000872:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8000874:	2b00      	cmp	r3, #0
 8000876:	d119      	bne.n	80008ac <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000878:	f7ff fefc 	bl	8000674 <I2C_WaitOnSTOPFlagUntilTimeout>
 800087c:	2800      	cmp	r0, #0
 800087e:	d1d7      	bne.n	8000830 <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000880:	2120      	movs	r1, #32
 8000882:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000884:	4e24      	ldr	r6, [pc, #144]	; (8000918 <HAL_I2C_Master_Transmit+0x128>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000886:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000888:	685a      	ldr	r2, [r3, #4]
 800088a:	4032      	ands	r2, r6
 800088c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800088e:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8000890:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000892:	3341      	adds	r3, #65	; 0x41
 8000894:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000896:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000898:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800089a:	e7ca      	b.n	8000832 <HAL_I2C_Master_Transmit+0x42>
      hi2c->XferSize = hi2c->XferCount;
 800089c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800089e:	b292      	uxth	r2, r2
 80008a0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	049b      	lsls	r3, r3, #18
 80008aa:	e7da      	b.n	8000862 <HAL_I2C_Master_Transmit+0x72>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80008ac:	f7ff feb8 	bl	8000620 <I2C_WaitOnTXISFlagUntilTimeout>
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d1bd      	bne.n	8000830 <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80008b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008b6:	6822      	ldr	r2, [r4, #0]
 80008b8:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80008ba:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80008bc:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80008be:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80008c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80008c2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80008c4:	3b01      	subs	r3, #1
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80008ca:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80008cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80008ce:	b292      	uxth	r2, r2
 80008d0:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d0ca      	beq.n	800086c <HAL_I2C_Master_Transmit+0x7c>
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	d1c8      	bne.n	800086c <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80008da:	9700      	str	r7, [sp, #0]
 80008dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80008de:	2180      	movs	r1, #128	; 0x80
 80008e0:	0020      	movs	r0, r4
 80008e2:	f7ff fe37 	bl	8000554 <I2C_WaitOnFlagUntilTimeout>
 80008e6:	2800      	cmp	r0, #0
 80008e8:	d1a2      	bne.n	8000830 <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80008ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80008ec:	2bff      	cmp	r3, #255	; 0xff
 80008ee:	d909      	bls.n	8000904 <HAL_I2C_Master_Transmit+0x114>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80008f4:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80008f6:	045b      	lsls	r3, r3, #17
 80008f8:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80008fa:	9903      	ldr	r1, [sp, #12]
 80008fc:	0020      	movs	r0, r4
 80008fe:	f7ff fe13 	bl	8000528 <I2C_TransferConfig>
 8000902:	e7b3      	b.n	800086c <HAL_I2C_Master_Transmit+0x7c>
 8000904:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8000906:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000908:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 800090a:	b292      	uxth	r2, r2
 800090c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800090e:	b2d2      	uxtb	r2, r2
 8000910:	9000      	str	r0, [sp, #0]
 8000912:	e7f2      	b.n	80008fa <HAL_I2C_Master_Transmit+0x10a>
 8000914:	80002000 	.word	0x80002000
 8000918:	fe00e800 	.word	0xfe00e800

0800091c <HAL_I2C_Master_Receive>:
{
 800091c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800091e:	0005      	movs	r5, r0
{
 8000920:	b087      	sub	sp, #28
 8000922:	9103      	str	r1, [sp, #12]
 8000924:	9204      	str	r2, [sp, #16]
 8000926:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000928:	3541      	adds	r5, #65	; 0x41
 800092a:	782b      	ldrb	r3, [r5, #0]
{
 800092c:	0004      	movs	r4, r0
    return HAL_BUSY;
 800092e:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000930:	2b20      	cmp	r3, #32
 8000932:	d114      	bne.n	800095e <HAL_I2C_Master_Receive+0x42>
    __HAL_LOCK(hi2c);
 8000934:	0023      	movs	r3, r4
 8000936:	3340      	adds	r3, #64	; 0x40
 8000938:	781a      	ldrb	r2, [r3, #0]
 800093a:	2a01      	cmp	r2, #1
 800093c:	d00f      	beq.n	800095e <HAL_I2C_Master_Receive+0x42>
 800093e:	2601      	movs	r6, #1
 8000940:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8000942:	f7ff fcbf 	bl	80002c4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000946:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000948:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800094a:	9000      	str	r0, [sp, #0]
 800094c:	2319      	movs	r3, #25
 800094e:	0032      	movs	r2, r6
 8000950:	0209      	lsls	r1, r1, #8
 8000952:	0020      	movs	r0, r4
 8000954:	f7ff fdfe 	bl	8000554 <I2C_WaitOnFlagUntilTimeout>
 8000958:	2800      	cmp	r0, #0
 800095a:	d002      	beq.n	8000962 <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 800095c:	2001      	movs	r0, #1
}
 800095e:	b007      	add	sp, #28
 8000960:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000962:	2322      	movs	r3, #34	; 0x22
 8000964:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000966:	0025      	movs	r5, r4
 8000968:	3b12      	subs	r3, #18
 800096a:	3542      	adds	r5, #66	; 0x42
 800096c:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 800096e:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000970:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000972:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000974:	466b      	mov	r3, sp
 8000976:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8000978:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800097a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800097c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800097e:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <HAL_I2C_Master_Receive+0x128>)
 8000980:	2aff      	cmp	r2, #255	; 0xff
 8000982:	d921      	bls.n	80009c8 <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000984:	22ff      	movs	r2, #255	; 0xff
 8000986:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2380      	movs	r3, #128	; 0x80
 800098c:	045b      	lsls	r3, r3, #17
 800098e:	9903      	ldr	r1, [sp, #12]
 8000990:	0020      	movs	r0, r4
 8000992:	f7ff fdc9 	bl	8000528 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000996:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8000998:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800099a:	003a      	movs	r2, r7
 800099c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800099e:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d119      	bne.n	80009d8 <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009a4:	f7ff fe66 	bl	8000674 <I2C_WaitOnSTOPFlagUntilTimeout>
 80009a8:	2800      	cmp	r0, #0
 80009aa:	d1d7      	bne.n	800095c <HAL_I2C_Master_Receive+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80009ac:	2120      	movs	r1, #32
 80009ae:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80009b0:	4e25      	ldr	r6, [pc, #148]	; (8000a48 <HAL_I2C_Master_Receive+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80009b2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80009b4:	685a      	ldr	r2, [r3, #4]
 80009b6:	4032      	ands	r2, r6
 80009b8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80009ba:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80009bc:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80009be:	3341      	adds	r3, #65	; 0x41
 80009c0:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80009c2:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80009c4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80009c6:	e7ca      	b.n	800095e <HAL_I2C_Master_Receive+0x42>
      hi2c->XferSize = hi2c->XferCount;
 80009c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80009ca:	b292      	uxth	r2, r2
 80009cc:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	b2d2      	uxtb	r2, r2
 80009d4:	049b      	lsls	r3, r3, #18
 80009d6:	e7da      	b.n	800098e <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009d8:	f7ff fe74 	bl	80006c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80009dc:	2800      	cmp	r0, #0
 80009de:	d1bd      	bne.n	800095c <HAL_I2C_Master_Receive+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80009e0:	6823      	ldr	r3, [r4, #0]
 80009e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e6:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80009e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80009ea:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80009ec:	3301      	adds	r3, #1
 80009ee:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80009f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80009f2:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80009f4:	3b01      	subs	r3, #1
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80009fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80009fc:	b292      	uxth	r2, r2
 80009fe:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0c9      	beq.n	8000998 <HAL_I2C_Master_Receive+0x7c>
 8000a04:	2a00      	cmp	r2, #0
 8000a06:	d1c7      	bne.n	8000998 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000a08:	9700      	str	r7, [sp, #0]
 8000a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	0020      	movs	r0, r4
 8000a10:	f7ff fda0 	bl	8000554 <I2C_WaitOnFlagUntilTimeout>
 8000a14:	2800      	cmp	r0, #0
 8000a16:	d1a1      	bne.n	800095c <HAL_I2C_Master_Receive+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000a18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000a1a:	2bff      	cmp	r3, #255	; 0xff
 8000a1c:	d909      	bls.n	8000a32 <HAL_I2C_Master_Receive+0x116>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000a22:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000a24:	045b      	lsls	r3, r3, #17
 8000a26:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000a28:	9903      	ldr	r1, [sp, #12]
 8000a2a:	0020      	movs	r0, r4
 8000a2c:	f7ff fd7c 	bl	8000528 <I2C_TransferConfig>
 8000a30:	e7b2      	b.n	8000998 <HAL_I2C_Master_Receive+0x7c>
 8000a32:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8000a34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000a36:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8000a38:	b292      	uxth	r2, r2
 8000a3a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000a3c:	b2d2      	uxtb	r2, r2
 8000a3e:	9000      	str	r0, [sp, #0]
 8000a40:	e7f2      	b.n	8000a28 <HAL_I2C_Master_Receive+0x10c>
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	80002400 	.word	0x80002400
 8000a48:	fe00e800 	.word	0xfe00e800

08000a4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a4e:	0004      	movs	r4, r0
 8000a50:	3441      	adds	r4, #65	; 0x41
 8000a52:	7822      	ldrb	r2, [r4, #0]
{
 8000a54:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a56:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000a58:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a5a:	2a20      	cmp	r2, #32
 8000a5c:	d118      	bne.n	8000a90 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000a5e:	001d      	movs	r5, r3
 8000a60:	3540      	adds	r5, #64	; 0x40
 8000a62:	782e      	ldrb	r6, [r5, #0]
 8000a64:	2e01      	cmp	r6, #1
 8000a66:	d013      	beq.n	8000a90 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000a68:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a6a:	3022      	adds	r0, #34	; 0x22
 8000a6c:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000a6e:	681e      	ldr	r6, [r3, #0]
 8000a70:	3823      	subs	r0, #35	; 0x23
 8000a72:	4386      	bics	r6, r0
 8000a74:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000a76:	681e      	ldr	r6, [r3, #0]
 8000a78:	4f06      	ldr	r7, [pc, #24]	; (8000a94 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000a7a:	403e      	ands	r6, r7
 8000a7c:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000a7e:	681e      	ldr	r6, [r3, #0]
 8000a80:	4331      	orrs	r1, r6
 8000a82:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000a84:	6819      	ldr	r1, [r3, #0]
 8000a86:	4308      	orrs	r0, r1
 8000a88:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000a8a:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000a8c:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000a8e:	7028      	strb	r0, [r5, #0]
  }
}
 8000a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	ffffefff 	.word	0xffffefff

08000a98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000a98:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a9a:	0005      	movs	r5, r0
 8000a9c:	3541      	adds	r5, #65	; 0x41
 8000a9e:	782a      	ldrb	r2, [r5, #0]
{
 8000aa0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000aa2:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000aa4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000aa6:	2a20      	cmp	r2, #32
 8000aa8:	d117      	bne.n	8000ada <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8000aaa:	001c      	movs	r4, r3
 8000aac:	3440      	adds	r4, #64	; 0x40
 8000aae:	7826      	ldrb	r6, [r4, #0]
 8000ab0:	2e01      	cmp	r6, #1
 8000ab2:	d012      	beq.n	8000ada <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000ab4:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ab6:	3022      	adds	r0, #34	; 0x22
 8000ab8:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000aba:	681e      	ldr	r6, [r3, #0]
 8000abc:	3823      	subs	r0, #35	; 0x23
 8000abe:	4386      	bics	r6, r0
 8000ac0:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8000ac2:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000ac4:	4f05      	ldr	r7, [pc, #20]	; (8000adc <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8000ac6:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8000ac8:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8000aca:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8000acc:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000ace:	6819      	ldr	r1, [r3, #0]
 8000ad0:	4308      	orrs	r0, r1
 8000ad2:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000ad4:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000ad6:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000ad8:	7020      	strb	r0, [r4, #0]
  }
}
 8000ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000adc:	fffff0ff 	.word	0xfffff0ff

08000ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ae2:	0004      	movs	r4, r0
 8000ae4:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	d102      	bne.n	8000af0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000aea:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8000aec:	b005      	add	sp, #20
 8000aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000af0:	6803      	ldr	r3, [r0, #0]
 8000af2:	07db      	lsls	r3, r3, #31
 8000af4:	d433      	bmi.n	8000b5e <HAL_RCC_OscConfig+0x7e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000af6:	6823      	ldr	r3, [r4, #0]
 8000af8:	079b      	lsls	r3, r3, #30
 8000afa:	d500      	bpl.n	8000afe <HAL_RCC_OscConfig+0x1e>
 8000afc:	e087      	b.n	8000c0e <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000afe:	6823      	ldr	r3, [r4, #0]
 8000b00:	071b      	lsls	r3, r3, #28
 8000b02:	d500      	bpl.n	8000b06 <HAL_RCC_OscConfig+0x26>
 8000b04:	e0c8      	b.n	8000c98 <HAL_RCC_OscConfig+0x1b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b06:	6823      	ldr	r3, [r4, #0]
 8000b08:	075b      	lsls	r3, r3, #29
 8000b0a:	d500      	bpl.n	8000b0e <HAL_RCC_OscConfig+0x2e>
 8000b0c:	e0eb      	b.n	8000ce6 <HAL_RCC_OscConfig+0x206>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000b0e:	6823      	ldr	r3, [r4, #0]
 8000b10:	06db      	lsls	r3, r3, #27
 8000b12:	d51a      	bpl.n	8000b4a <HAL_RCC_OscConfig+0x6a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000b14:	6962      	ldr	r2, [r4, #20]
 8000b16:	4dbc      	ldr	r5, [pc, #752]	; (8000e08 <HAL_RCC_OscConfig+0x328>)
 8000b18:	2304      	movs	r3, #4
 8000b1a:	2a01      	cmp	r2, #1
 8000b1c:	d000      	beq.n	8000b20 <HAL_RCC_OscConfig+0x40>
 8000b1e:	e157      	b.n	8000dd0 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b20:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b22:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b24:	430b      	orrs	r3, r1
 8000b26:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000b28:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000b2a:	431a      	orrs	r2, r3
 8000b2c:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000b2e:	f7ff fbc9 	bl	80002c4 <HAL_GetTick>
 8000b32:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b34:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000b36:	4233      	tst	r3, r6
 8000b38:	d100      	bne.n	8000b3c <HAL_RCC_OscConfig+0x5c>
 8000b3a:	e142      	b.n	8000dc2 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000b3c:	21f8      	movs	r1, #248	; 0xf8
 8000b3e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000b40:	69a3      	ldr	r3, [r4, #24]
 8000b42:	438a      	bics	r2, r1
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	4313      	orrs	r3, r2
 8000b48:	636b      	str	r3, [r5, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000b4a:	6823      	ldr	r3, [r4, #0]
 8000b4c:	069b      	lsls	r3, r3, #26
 8000b4e:	d500      	bpl.n	8000b52 <HAL_RCC_OscConfig+0x72>
 8000b50:	e166      	b.n	8000e20 <HAL_RCC_OscConfig+0x340>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b52:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b54:	2a00      	cmp	r2, #0
 8000b56:	d000      	beq.n	8000b5a <HAL_RCC_OscConfig+0x7a>
 8000b58:	e1a3      	b.n	8000ea2 <HAL_RCC_OscConfig+0x3c2>
  return HAL_OK;
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	e7c6      	b.n	8000aec <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b5e:	210c      	movs	r1, #12
 8000b60:	4da9      	ldr	r5, [pc, #676]	; (8000e08 <HAL_RCC_OscConfig+0x328>)
 8000b62:	686a      	ldr	r2, [r5, #4]
 8000b64:	400a      	ands	r2, r1
 8000b66:	2a04      	cmp	r2, #4
 8000b68:	d00b      	beq.n	8000b82 <HAL_RCC_OscConfig+0xa2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b6a:	686b      	ldr	r3, [r5, #4]
 8000b6c:	400b      	ands	r3, r1
 8000b6e:	2b08      	cmp	r3, #8
 8000b70:	d10e      	bne.n	8000b90 <HAL_RCC_OscConfig+0xb0>
 8000b72:	22c0      	movs	r2, #192	; 0xc0
 8000b74:	686b      	ldr	r3, [r5, #4]
 8000b76:	0252      	lsls	r2, r2, #9
 8000b78:	4013      	ands	r3, r2
 8000b7a:	2280      	movs	r2, #128	; 0x80
 8000b7c:	0252      	lsls	r2, r2, #9
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d106      	bne.n	8000b90 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b82:	682b      	ldr	r3, [r5, #0]
 8000b84:	039b      	lsls	r3, r3, #14
 8000b86:	d5b6      	bpl.n	8000af6 <HAL_RCC_OscConfig+0x16>
 8000b88:	6863      	ldr	r3, [r4, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d1b3      	bne.n	8000af6 <HAL_RCC_OscConfig+0x16>
 8000b8e:	e7ac      	b.n	8000aea <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b90:	6863      	ldr	r3, [r4, #4]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d113      	bne.n	8000bbe <HAL_RCC_OscConfig+0xde>
 8000b96:	2380      	movs	r3, #128	; 0x80
 8000b98:	682a      	ldr	r2, [r5, #0]
 8000b9a:	025b      	lsls	r3, r3, #9
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ba0:	f7ff fb90 	bl	80002c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba4:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000ba6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba8:	02b6      	lsls	r6, r6, #10
 8000baa:	682b      	ldr	r3, [r5, #0]
 8000bac:	4233      	tst	r3, r6
 8000bae:	d1a2      	bne.n	8000af6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bb0:	f7ff fb88 	bl	80002c4 <HAL_GetTick>
 8000bb4:	1bc0      	subs	r0, r0, r7
 8000bb6:	2864      	cmp	r0, #100	; 0x64
 8000bb8:	d9f7      	bls.n	8000baa <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000bba:	2003      	movs	r0, #3
 8000bbc:	e796      	b.n	8000aec <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d115      	bne.n	8000bee <HAL_RCC_OscConfig+0x10e>
 8000bc2:	682b      	ldr	r3, [r5, #0]
 8000bc4:	4a91      	ldr	r2, [pc, #580]	; (8000e0c <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bc6:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bc8:	4013      	ands	r3, r2
 8000bca:	602b      	str	r3, [r5, #0]
 8000bcc:	682b      	ldr	r3, [r5, #0]
 8000bce:	4a90      	ldr	r2, [pc, #576]	; (8000e10 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bd0:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bd6:	f7ff fb75 	bl	80002c4 <HAL_GetTick>
 8000bda:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bdc:	682b      	ldr	r3, [r5, #0]
 8000bde:	4233      	tst	r3, r6
 8000be0:	d089      	beq.n	8000af6 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000be2:	f7ff fb6f 	bl	80002c4 <HAL_GetTick>
 8000be6:	1bc0      	subs	r0, r0, r7
 8000be8:	2864      	cmp	r0, #100	; 0x64
 8000bea:	d9f7      	bls.n	8000bdc <HAL_RCC_OscConfig+0xfc>
 8000bec:	e7e5      	b.n	8000bba <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bee:	2b05      	cmp	r3, #5
 8000bf0:	d105      	bne.n	8000bfe <HAL_RCC_OscConfig+0x11e>
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	682a      	ldr	r2, [r5, #0]
 8000bf6:	02db      	lsls	r3, r3, #11
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	602b      	str	r3, [r5, #0]
 8000bfc:	e7cb      	b.n	8000b96 <HAL_RCC_OscConfig+0xb6>
 8000bfe:	682b      	ldr	r3, [r5, #0]
 8000c00:	4a82      	ldr	r2, [pc, #520]	; (8000e0c <HAL_RCC_OscConfig+0x32c>)
 8000c02:	4013      	ands	r3, r2
 8000c04:	602b      	str	r3, [r5, #0]
 8000c06:	682b      	ldr	r3, [r5, #0]
 8000c08:	4a81      	ldr	r2, [pc, #516]	; (8000e10 <HAL_RCC_OscConfig+0x330>)
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	e7c7      	b.n	8000b9e <HAL_RCC_OscConfig+0xbe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c0e:	220c      	movs	r2, #12
 8000c10:	4d7d      	ldr	r5, [pc, #500]	; (8000e08 <HAL_RCC_OscConfig+0x328>)
 8000c12:	686b      	ldr	r3, [r5, #4]
 8000c14:	4213      	tst	r3, r2
 8000c16:	d00b      	beq.n	8000c30 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c18:	686b      	ldr	r3, [r5, #4]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	2b08      	cmp	r3, #8
 8000c1e:	d116      	bne.n	8000c4e <HAL_RCC_OscConfig+0x16e>
 8000c20:	22c0      	movs	r2, #192	; 0xc0
 8000c22:	686b      	ldr	r3, [r5, #4]
 8000c24:	0252      	lsls	r2, r2, #9
 8000c26:	4013      	ands	r3, r2
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	0212      	lsls	r2, r2, #8
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d10e      	bne.n	8000c4e <HAL_RCC_OscConfig+0x16e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c30:	682b      	ldr	r3, [r5, #0]
 8000c32:	079b      	lsls	r3, r3, #30
 8000c34:	d503      	bpl.n	8000c3e <HAL_RCC_OscConfig+0x15e>
 8000c36:	68e3      	ldr	r3, [r4, #12]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d000      	beq.n	8000c3e <HAL_RCC_OscConfig+0x15e>
 8000c3c:	e755      	b.n	8000aea <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c3e:	21f8      	movs	r1, #248	; 0xf8
 8000c40:	682a      	ldr	r2, [r5, #0]
 8000c42:	6923      	ldr	r3, [r4, #16]
 8000c44:	438a      	bics	r2, r1
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	602b      	str	r3, [r5, #0]
 8000c4c:	e757      	b.n	8000afe <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c4e:	68e2      	ldr	r2, [r4, #12]
 8000c50:	2301      	movs	r3, #1
 8000c52:	2a00      	cmp	r2, #0
 8000c54:	d00f      	beq.n	8000c76 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_ENABLE();
 8000c56:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c58:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c5e:	f7ff fb31 	bl	80002c4 <HAL_GetTick>
 8000c62:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c64:	682b      	ldr	r3, [r5, #0]
 8000c66:	4233      	tst	r3, r6
 8000c68:	d1e9      	bne.n	8000c3e <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c6a:	f7ff fb2b 	bl	80002c4 <HAL_GetTick>
 8000c6e:	1bc0      	subs	r0, r0, r7
 8000c70:	2802      	cmp	r0, #2
 8000c72:	d9f7      	bls.n	8000c64 <HAL_RCC_OscConfig+0x184>
 8000c74:	e7a1      	b.n	8000bba <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI_DISABLE();
 8000c76:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c78:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000c7a:	439a      	bics	r2, r3
 8000c7c:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000c7e:	f7ff fb21 	bl	80002c4 <HAL_GetTick>
 8000c82:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c84:	682b      	ldr	r3, [r5, #0]
 8000c86:	4233      	tst	r3, r6
 8000c88:	d100      	bne.n	8000c8c <HAL_RCC_OscConfig+0x1ac>
 8000c8a:	e738      	b.n	8000afe <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c8c:	f7ff fb1a 	bl	80002c4 <HAL_GetTick>
 8000c90:	1bc0      	subs	r0, r0, r7
 8000c92:	2802      	cmp	r0, #2
 8000c94:	d9f6      	bls.n	8000c84 <HAL_RCC_OscConfig+0x1a4>
 8000c96:	e790      	b.n	8000bba <HAL_RCC_OscConfig+0xda>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c98:	69e2      	ldr	r2, [r4, #28]
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	4d5a      	ldr	r5, [pc, #360]	; (8000e08 <HAL_RCC_OscConfig+0x328>)
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	d010      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 8000ca2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ca4:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000caa:	f7ff fb0b 	bl	80002c4 <HAL_GetTick>
 8000cae:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cb0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000cb2:	4233      	tst	r3, r6
 8000cb4:	d000      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x1d8>
 8000cb6:	e726      	b.n	8000b06 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cb8:	f7ff fb04 	bl	80002c4 <HAL_GetTick>
 8000cbc:	1bc0      	subs	r0, r0, r7
 8000cbe:	2802      	cmp	r0, #2
 8000cc0:	d9f6      	bls.n	8000cb0 <HAL_RCC_OscConfig+0x1d0>
 8000cc2:	e77a      	b.n	8000bba <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSI_DISABLE();
 8000cc4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cc6:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000cc8:	439a      	bics	r2, r3
 8000cca:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000ccc:	f7ff fafa 	bl	80002c4 <HAL_GetTick>
 8000cd0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cd2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000cd4:	4233      	tst	r3, r6
 8000cd6:	d100      	bne.n	8000cda <HAL_RCC_OscConfig+0x1fa>
 8000cd8:	e715      	b.n	8000b06 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cda:	f7ff faf3 	bl	80002c4 <HAL_GetTick>
 8000cde:	1bc0      	subs	r0, r0, r7
 8000ce0:	2802      	cmp	r0, #2
 8000ce2:	d9f6      	bls.n	8000cd2 <HAL_RCC_OscConfig+0x1f2>
 8000ce4:	e769      	b.n	8000bba <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ce6:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000ce8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cea:	4d47      	ldr	r5, [pc, #284]	; (8000e08 <HAL_RCC_OscConfig+0x328>)
 8000cec:	0552      	lsls	r2, r2, #21
 8000cee:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000cf0:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cf2:	4213      	tst	r3, r2
 8000cf4:	d108      	bne.n	8000d08 <HAL_RCC_OscConfig+0x228>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	69eb      	ldr	r3, [r5, #28]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	61eb      	str	r3, [r5, #28]
 8000cfc:	69eb      	ldr	r3, [r5, #28]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	9303      	str	r3, [sp, #12]
 8000d02:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000d04:	2301      	movs	r3, #1
 8000d06:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d08:	2780      	movs	r7, #128	; 0x80
 8000d0a:	4e42      	ldr	r6, [pc, #264]	; (8000e14 <HAL_RCC_OscConfig+0x334>)
 8000d0c:	007f      	lsls	r7, r7, #1
 8000d0e:	6833      	ldr	r3, [r6, #0]
 8000d10:	423b      	tst	r3, r7
 8000d12:	d006      	beq.n	8000d22 <HAL_RCC_OscConfig+0x242>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d14:	68a3      	ldr	r3, [r4, #8]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d113      	bne.n	8000d42 <HAL_RCC_OscConfig+0x262>
 8000d1a:	6a2a      	ldr	r2, [r5, #32]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	622b      	str	r3, [r5, #32]
 8000d20:	e030      	b.n	8000d84 <HAL_RCC_OscConfig+0x2a4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d22:	6833      	ldr	r3, [r6, #0]
 8000d24:	433b      	orrs	r3, r7
 8000d26:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000d28:	f7ff facc 	bl	80002c4 <HAL_GetTick>
 8000d2c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d2e:	6833      	ldr	r3, [r6, #0]
 8000d30:	423b      	tst	r3, r7
 8000d32:	d1ef      	bne.n	8000d14 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d34:	f7ff fac6 	bl	80002c4 <HAL_GetTick>
 8000d38:	9b01      	ldr	r3, [sp, #4]
 8000d3a:	1ac0      	subs	r0, r0, r3
 8000d3c:	2864      	cmp	r0, #100	; 0x64
 8000d3e:	d9f6      	bls.n	8000d2e <HAL_RCC_OscConfig+0x24e>
 8000d40:	e73b      	b.n	8000bba <HAL_RCC_OscConfig+0xda>
 8000d42:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d114      	bne.n	8000d72 <HAL_RCC_OscConfig+0x292>
 8000d48:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d4a:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d4c:	4393      	bics	r3, r2
 8000d4e:	622b      	str	r3, [r5, #32]
 8000d50:	6a2b      	ldr	r3, [r5, #32]
 8000d52:	3203      	adds	r2, #3
 8000d54:	4393      	bics	r3, r2
 8000d56:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000d58:	f7ff fab4 	bl	80002c4 <HAL_GetTick>
 8000d5c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d5e:	6a2b      	ldr	r3, [r5, #32]
 8000d60:	423b      	tst	r3, r7
 8000d62:	d025      	beq.n	8000db0 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d64:	f7ff faae 	bl	80002c4 <HAL_GetTick>
 8000d68:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <HAL_RCC_OscConfig+0x338>)
 8000d6a:	1b80      	subs	r0, r0, r6
 8000d6c:	4298      	cmp	r0, r3
 8000d6e:	d9f6      	bls.n	8000d5e <HAL_RCC_OscConfig+0x27e>
 8000d70:	e723      	b.n	8000bba <HAL_RCC_OscConfig+0xda>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d72:	2b05      	cmp	r3, #5
 8000d74:	d10b      	bne.n	8000d8e <HAL_RCC_OscConfig+0x2ae>
 8000d76:	6a29      	ldr	r1, [r5, #32]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	430b      	orrs	r3, r1
 8000d7c:	622b      	str	r3, [r5, #32]
 8000d7e:	6a2b      	ldr	r3, [r5, #32]
 8000d80:	431a      	orrs	r2, r3
 8000d82:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8000d84:	f7ff fa9e 	bl	80002c4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d88:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000d8a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d8c:	e00d      	b.n	8000daa <HAL_RCC_OscConfig+0x2ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d8e:	6a2b      	ldr	r3, [r5, #32]
 8000d90:	4393      	bics	r3, r2
 8000d92:	2204      	movs	r2, #4
 8000d94:	622b      	str	r3, [r5, #32]
 8000d96:	6a2b      	ldr	r3, [r5, #32]
 8000d98:	4393      	bics	r3, r2
 8000d9a:	e7c0      	b.n	8000d1e <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d9c:	f7ff fa92 	bl	80002c4 <HAL_GetTick>
 8000da0:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <HAL_RCC_OscConfig+0x338>)
 8000da2:	1b80      	subs	r0, r0, r6
 8000da4:	4298      	cmp	r0, r3
 8000da6:	d900      	bls.n	8000daa <HAL_RCC_OscConfig+0x2ca>
 8000da8:	e707      	b.n	8000bba <HAL_RCC_OscConfig+0xda>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000daa:	6a2b      	ldr	r3, [r5, #32]
 8000dac:	423b      	tst	r3, r7
 8000dae:	d0f5      	beq.n	8000d9c <HAL_RCC_OscConfig+0x2bc>
    if(pwrclkchanged == SET)
 8000db0:	9b00      	ldr	r3, [sp, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d000      	beq.n	8000db8 <HAL_RCC_OscConfig+0x2d8>
 8000db6:	e6aa      	b.n	8000b0e <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000db8:	69eb      	ldr	r3, [r5, #28]
 8000dba:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <HAL_RCC_OscConfig+0x33c>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61eb      	str	r3, [r5, #28]
 8000dc0:	e6a5      	b.n	8000b0e <HAL_RCC_OscConfig+0x2e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000dc2:	f7ff fa7f 	bl	80002c4 <HAL_GetTick>
 8000dc6:	1bc0      	subs	r0, r0, r7
 8000dc8:	2802      	cmp	r0, #2
 8000dca:	d800      	bhi.n	8000dce <HAL_RCC_OscConfig+0x2ee>
 8000dcc:	e6b2      	b.n	8000b34 <HAL_RCC_OscConfig+0x54>
 8000dce:	e6f4      	b.n	8000bba <HAL_RCC_OscConfig+0xda>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000dd0:	3205      	adds	r2, #5
 8000dd2:	d103      	bne.n	8000ddc <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000dd4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000dd6:	439a      	bics	r2, r3
 8000dd8:	636a      	str	r2, [r5, #52]	; 0x34
 8000dda:	e6af      	b.n	8000b3c <HAL_RCC_OscConfig+0x5c>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ddc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000dde:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000de0:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000de2:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000de4:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000de6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000de8:	4393      	bics	r3, r2
 8000dea:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000dec:	f7ff fa6a 	bl	80002c4 <HAL_GetTick>
 8000df0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000df2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000df4:	4233      	tst	r3, r6
 8000df6:	d100      	bne.n	8000dfa <HAL_RCC_OscConfig+0x31a>
 8000df8:	e6a7      	b.n	8000b4a <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000dfa:	f7ff fa63 	bl	80002c4 <HAL_GetTick>
 8000dfe:	1bc0      	subs	r0, r0, r7
 8000e00:	2802      	cmp	r0, #2
 8000e02:	d9f6      	bls.n	8000df2 <HAL_RCC_OscConfig+0x312>
 8000e04:	e6d9      	b.n	8000bba <HAL_RCC_OscConfig+0xda>
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	fffeffff 	.word	0xfffeffff
 8000e10:	fffbffff 	.word	0xfffbffff
 8000e14:	40007000 	.word	0x40007000
 8000e18:	00001388 	.word	0x00001388
 8000e1c:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000e20:	210c      	movs	r1, #12
 8000e22:	4d53      	ldr	r5, [pc, #332]	; (8000f70 <HAL_RCC_OscConfig+0x490>)
 8000e24:	686a      	ldr	r2, [r5, #4]
 8000e26:	400a      	ands	r2, r1
 8000e28:	428a      	cmp	r2, r1
 8000e2a:	d009      	beq.n	8000e40 <HAL_RCC_OscConfig+0x360>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000e2c:	686b      	ldr	r3, [r5, #4]
 8000e2e:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000e30:	2b08      	cmp	r3, #8
 8000e32:	d10e      	bne.n	8000e52 <HAL_RCC_OscConfig+0x372>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000e34:	22c0      	movs	r2, #192	; 0xc0
 8000e36:	686b      	ldr	r3, [r5, #4]
 8000e38:	0252      	lsls	r2, r2, #9
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d108      	bne.n	8000e52 <HAL_RCC_OscConfig+0x372>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000e40:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e42:	03db      	lsls	r3, r3, #15
 8000e44:	d400      	bmi.n	8000e48 <HAL_RCC_OscConfig+0x368>
 8000e46:	e684      	b.n	8000b52 <HAL_RCC_OscConfig+0x72>
 8000e48:	6a23      	ldr	r3, [r4, #32]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d000      	beq.n	8000e50 <HAL_RCC_OscConfig+0x370>
 8000e4e:	e64c      	b.n	8000aea <HAL_RCC_OscConfig+0xa>
 8000e50:	e67f      	b.n	8000b52 <HAL_RCC_OscConfig+0x72>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000e52:	6a23      	ldr	r3, [r4, #32]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d011      	beq.n	8000e7c <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_HSI48_ENABLE();
 8000e58:	2680      	movs	r6, #128	; 0x80
 8000e5a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e5c:	0276      	lsls	r6, r6, #9
 8000e5e:	4333      	orrs	r3, r6
 8000e60:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000e62:	f7ff fa2f 	bl	80002c4 <HAL_GetTick>
 8000e66:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000e68:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e6a:	4233      	tst	r3, r6
 8000e6c:	d000      	beq.n	8000e70 <HAL_RCC_OscConfig+0x390>
 8000e6e:	e670      	b.n	8000b52 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e70:	f7ff fa28 	bl	80002c4 <HAL_GetTick>
 8000e74:	1bc0      	subs	r0, r0, r7
 8000e76:	2802      	cmp	r0, #2
 8000e78:	d9f6      	bls.n	8000e68 <HAL_RCC_OscConfig+0x388>
 8000e7a:	e69e      	b.n	8000bba <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_HSI48_DISABLE();
 8000e7c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e7e:	4a3d      	ldr	r2, [pc, #244]	; (8000f74 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000e80:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8000e82:	4013      	ands	r3, r2
 8000e84:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000e86:	f7ff fa1d 	bl	80002c4 <HAL_GetTick>
 8000e8a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000e8c:	0276      	lsls	r6, r6, #9
 8000e8e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e90:	4233      	tst	r3, r6
 8000e92:	d100      	bne.n	8000e96 <HAL_RCC_OscConfig+0x3b6>
 8000e94:	e65d      	b.n	8000b52 <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e96:	f7ff fa15 	bl	80002c4 <HAL_GetTick>
 8000e9a:	1bc0      	subs	r0, r0, r7
 8000e9c:	2802      	cmp	r0, #2
 8000e9e:	d9f6      	bls.n	8000e8e <HAL_RCC_OscConfig+0x3ae>
 8000ea0:	e68b      	b.n	8000bba <HAL_RCC_OscConfig+0xda>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ea2:	200c      	movs	r0, #12
 8000ea4:	4b32      	ldr	r3, [pc, #200]	; (8000f70 <HAL_RCC_OscConfig+0x490>)
 8000ea6:	6859      	ldr	r1, [r3, #4]
 8000ea8:	001d      	movs	r5, r3
 8000eaa:	4001      	ands	r1, r0
 8000eac:	2908      	cmp	r1, #8
 8000eae:	d044      	beq.n	8000f3a <HAL_RCC_OscConfig+0x45a>
        __HAL_RCC_PLL_DISABLE();
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4931      	ldr	r1, [pc, #196]	; (8000f78 <HAL_RCC_OscConfig+0x498>)
 8000eb4:	400b      	ands	r3, r1
 8000eb6:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eb8:	2a02      	cmp	r2, #2
 8000eba:	d12f      	bne.n	8000f1c <HAL_RCC_OscConfig+0x43c>
        tickstart = HAL_GetTick();
 8000ebc:	f7ff fa02 	bl	80002c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ec0:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000ec2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ec4:	04b6      	lsls	r6, r6, #18
 8000ec6:	682b      	ldr	r3, [r5, #0]
 8000ec8:	4233      	tst	r3, r6
 8000eca:	d121      	bne.n	8000f10 <HAL_RCC_OscConfig+0x430>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ecc:	220f      	movs	r2, #15
 8000ece:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000ed0:	4393      	bics	r3, r2
 8000ed2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000ed8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000eda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000edc:	686a      	ldr	r2, [r5, #4]
 8000ede:	430b      	orrs	r3, r1
 8000ee0:	4926      	ldr	r1, [pc, #152]	; (8000f7c <HAL_RCC_OscConfig+0x49c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ee2:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ee4:	400a      	ands	r2, r1
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	682a      	ldr	r2, [r5, #0]
 8000eee:	045b      	lsls	r3, r3, #17
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ef4:	f7ff f9e6 	bl	80002c4 <HAL_GetTick>
 8000ef8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000efa:	04a4      	lsls	r4, r4, #18
 8000efc:	682b      	ldr	r3, [r5, #0]
 8000efe:	4223      	tst	r3, r4
 8000f00:	d000      	beq.n	8000f04 <HAL_RCC_OscConfig+0x424>
 8000f02:	e62a      	b.n	8000b5a <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f04:	f7ff f9de 	bl	80002c4 <HAL_GetTick>
 8000f08:	1b80      	subs	r0, r0, r6
 8000f0a:	2802      	cmp	r0, #2
 8000f0c:	d9f6      	bls.n	8000efc <HAL_RCC_OscConfig+0x41c>
 8000f0e:	e654      	b.n	8000bba <HAL_RCC_OscConfig+0xda>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f10:	f7ff f9d8 	bl	80002c4 <HAL_GetTick>
 8000f14:	1bc0      	subs	r0, r0, r7
 8000f16:	2802      	cmp	r0, #2
 8000f18:	d9d5      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x3e6>
 8000f1a:	e64e      	b.n	8000bba <HAL_RCC_OscConfig+0xda>
        tickstart = HAL_GetTick();
 8000f1c:	f7ff f9d2 	bl	80002c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f20:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 8000f22:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f24:	04a4      	lsls	r4, r4, #18
 8000f26:	682b      	ldr	r3, [r5, #0]
 8000f28:	4223      	tst	r3, r4
 8000f2a:	d100      	bne.n	8000f2e <HAL_RCC_OscConfig+0x44e>
 8000f2c:	e615      	b.n	8000b5a <HAL_RCC_OscConfig+0x7a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f2e:	f7ff f9c9 	bl	80002c4 <HAL_GetTick>
 8000f32:	1b80      	subs	r0, r0, r6
 8000f34:	2802      	cmp	r0, #2
 8000f36:	d9f6      	bls.n	8000f26 <HAL_RCC_OscConfig+0x446>
 8000f38:	e63f      	b.n	8000bba <HAL_RCC_OscConfig+0xda>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f3a:	2a01      	cmp	r2, #1
 8000f3c:	d100      	bne.n	8000f40 <HAL_RCC_OscConfig+0x460>
 8000f3e:	e5d4      	b.n	8000aea <HAL_RCC_OscConfig+0xa>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f40:	22c0      	movs	r2, #192	; 0xc0
        pll_config  = RCC->CFGR;
 8000f42:	6858      	ldr	r0, [r3, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f44:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000f46:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8000f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f4a:	4002      	ands	r2, r0
 8000f4c:	428a      	cmp	r2, r1
 8000f4e:	d000      	beq.n	8000f52 <HAL_RCC_OscConfig+0x472>
 8000f50:	e5cb      	b.n	8000aea <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000f52:	220f      	movs	r2, #15
 8000f54:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f56:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d000      	beq.n	8000f5e <HAL_RCC_OscConfig+0x47e>
 8000f5c:	e5c5      	b.n	8000aea <HAL_RCC_OscConfig+0xa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000f5e:	23f0      	movs	r3, #240	; 0xf0
 8000f60:	039b      	lsls	r3, r3, #14
 8000f62:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000f64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f66:	1ac0      	subs	r0, r0, r3
 8000f68:	1e43      	subs	r3, r0, #1
 8000f6a:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8000f6c:	b2c0      	uxtb	r0, r0
 8000f6e:	e5bd      	b.n	8000aec <HAL_RCC_OscConfig+0xc>
 8000f70:	40021000 	.word	0x40021000
 8000f74:	fffeffff 	.word	0xfffeffff
 8000f78:	feffffff 	.word	0xfeffffff
 8000f7c:	ffc27fff 	.word	0xffc27fff

08000f80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f80:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000f82:	4c19      	ldr	r4, [pc, #100]	; (8000fe8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000f84:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000f86:	2210      	movs	r2, #16
 8000f88:	0021      	movs	r1, r4
 8000f8a:	4668      	mov	r0, sp
 8000f8c:	f001 f834 	bl	8001ff8 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000f90:	0021      	movs	r1, r4
 8000f92:	ad04      	add	r5, sp, #16
 8000f94:	2210      	movs	r2, #16
 8000f96:	3110      	adds	r1, #16
 8000f98:	0028      	movs	r0, r5
 8000f9a:	f001 f82d 	bl	8001ff8 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f9e:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000fa0:	4e12      	ldr	r6, [pc, #72]	; (8000fec <HAL_RCC_GetSysClockFreq+0x6c>)
 8000fa2:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000fa4:	401a      	ands	r2, r3
 8000fa6:	2a08      	cmp	r2, #8
 8000fa8:	d004      	beq.n	8000fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8000faa:	2a0c      	cmp	r2, #12
 8000fac:	d11a      	bne.n	8000fe4 <HAL_RCC_GetSysClockFreq+0x64>
      break;
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8000fae:	4810      	ldr	r0, [pc, #64]	; (8000ff0 <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000fb0:	b008      	add	sp, #32
 8000fb2:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000fb4:	200f      	movs	r0, #15
 8000fb6:	466a      	mov	r2, sp
 8000fb8:	0c99      	lsrs	r1, r3, #18
 8000fba:	4001      	ands	r1, r0
 8000fbc:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000fbe:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000fc0:	4002      	ands	r2, r0
 8000fc2:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000fc4:	22c0      	movs	r2, #192	; 0xc0
 8000fc6:	2080      	movs	r0, #128	; 0x80
 8000fc8:	0252      	lsls	r2, r2, #9
 8000fca:	4013      	ands	r3, r2
 8000fcc:	0240      	lsls	r0, r0, #9
 8000fce:	4283      	cmp	r3, r0
 8000fd0:	d101      	bne.n	8000fd6 <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000fd2:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <HAL_RCC_GetSysClockFreq+0x74>)
 8000fd4:	e002      	b.n	8000fdc <HAL_RCC_GetSysClockFreq+0x5c>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d1fb      	bne.n	8000fd2 <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <HAL_RCC_GetSysClockFreq+0x70>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000fdc:	f7ff f8a6 	bl	800012c <__udivsi3>
 8000fe0:	4360      	muls	r0, r4
 8000fe2:	e7e5      	b.n	8000fb0 <HAL_RCC_GetSysClockFreq+0x30>
      sysclockfreq = HSE_VALUE;
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000fe6:	e7e3      	b.n	8000fb0 <HAL_RCC_GetSysClockFreq+0x30>
 8000fe8:	08002864 	.word	0x08002864
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	02dc6c00 	.word	0x02dc6c00
 8000ff4:	007a1200 	.word	0x007a1200

08000ff8 <HAL_RCC_ClockConfig>:
{
 8000ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ffa:	0005      	movs	r5, r0
 8000ffc:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8000ffe:	2800      	cmp	r0, #0
 8001000:	d101      	bne.n	8001006 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8001002:	2001      	movs	r0, #1
}
 8001004:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001006:	2201      	movs	r2, #1
 8001008:	4c3b      	ldr	r4, [pc, #236]	; (80010f8 <HAL_RCC_ClockConfig+0x100>)
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	4013      	ands	r3, r2
 800100e:	428b      	cmp	r3, r1
 8001010:	d31c      	bcc.n	800104c <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001012:	6829      	ldr	r1, [r5, #0]
 8001014:	078b      	lsls	r3, r1, #30
 8001016:	d422      	bmi.n	800105e <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001018:	07cb      	lsls	r3, r1, #31
 800101a:	d42f      	bmi.n	800107c <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800101c:	2301      	movs	r3, #1
 800101e:	6822      	ldr	r2, [r4, #0]
 8001020:	401a      	ands	r2, r3
 8001022:	4297      	cmp	r7, r2
 8001024:	d359      	bcc.n	80010da <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001026:	682b      	ldr	r3, [r5, #0]
 8001028:	4c34      	ldr	r4, [pc, #208]	; (80010fc <HAL_RCC_ClockConfig+0x104>)
 800102a:	075b      	lsls	r3, r3, #29
 800102c:	d45d      	bmi.n	80010ea <HAL_RCC_ClockConfig+0xf2>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800102e:	f7ff ffa7 	bl	8000f80 <HAL_RCC_GetSysClockFreq>
 8001032:	6863      	ldr	r3, [r4, #4]
 8001034:	4a32      	ldr	r2, [pc, #200]	; (8001100 <HAL_RCC_ClockConfig+0x108>)
 8001036:	061b      	lsls	r3, r3, #24
 8001038:	0f1b      	lsrs	r3, r3, #28
 800103a:	5cd3      	ldrb	r3, [r2, r3]
 800103c:	40d8      	lsrs	r0, r3
 800103e:	4b31      	ldr	r3, [pc, #196]	; (8001104 <HAL_RCC_ClockConfig+0x10c>)
 8001040:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff f8fe 	bl	8000244 <HAL_InitTick>
  return HAL_OK;
 8001048:	2000      	movs	r0, #0
 800104a:	e7db      	b.n	8001004 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	4393      	bics	r3, r2
 8001050:	430b      	orrs	r3, r1
 8001052:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001054:	6823      	ldr	r3, [r4, #0]
 8001056:	4013      	ands	r3, r2
 8001058:	4299      	cmp	r1, r3
 800105a:	d1d2      	bne.n	8001002 <HAL_RCC_ClockConfig+0xa>
 800105c:	e7d9      	b.n	8001012 <HAL_RCC_ClockConfig+0x1a>
 800105e:	4a27      	ldr	r2, [pc, #156]	; (80010fc <HAL_RCC_ClockConfig+0x104>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001060:	074b      	lsls	r3, r1, #29
 8001062:	d504      	bpl.n	800106e <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001064:	23e0      	movs	r3, #224	; 0xe0
 8001066:	6850      	ldr	r0, [r2, #4]
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4303      	orrs	r3, r0
 800106c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800106e:	20f0      	movs	r0, #240	; 0xf0
 8001070:	6853      	ldr	r3, [r2, #4]
 8001072:	4383      	bics	r3, r0
 8001074:	68a8      	ldr	r0, [r5, #8]
 8001076:	4303      	orrs	r3, r0
 8001078:	6053      	str	r3, [r2, #4]
 800107a:	e7cd      	b.n	8001018 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800107c:	686a      	ldr	r2, [r5, #4]
 800107e:	4e1f      	ldr	r6, [pc, #124]	; (80010fc <HAL_RCC_ClockConfig+0x104>)
 8001080:	2a01      	cmp	r2, #1
 8001082:	d11a      	bne.n	80010ba <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001084:	6833      	ldr	r3, [r6, #0]
 8001086:	039b      	lsls	r3, r3, #14
 8001088:	d5bb      	bpl.n	8001002 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800108a:	2103      	movs	r1, #3
 800108c:	6873      	ldr	r3, [r6, #4]
 800108e:	438b      	bics	r3, r1
 8001090:	4313      	orrs	r3, r2
 8001092:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001094:	f7ff f916 	bl	80002c4 <HAL_GetTick>
 8001098:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800109a:	230c      	movs	r3, #12
 800109c:	6872      	ldr	r2, [r6, #4]
 800109e:	401a      	ands	r2, r3
 80010a0:	686b      	ldr	r3, [r5, #4]
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d0b9      	beq.n	800101c <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a8:	f7ff f90c 	bl	80002c4 <HAL_GetTick>
 80010ac:	9b01      	ldr	r3, [sp, #4]
 80010ae:	1ac0      	subs	r0, r0, r3
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_RCC_ClockConfig+0x110>)
 80010b2:	4298      	cmp	r0, r3
 80010b4:	d9f1      	bls.n	800109a <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 80010b6:	2003      	movs	r0, #3
 80010b8:	e7a4      	b.n	8001004 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010ba:	2a02      	cmp	r2, #2
 80010bc:	d103      	bne.n	80010c6 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010be:	6833      	ldr	r3, [r6, #0]
 80010c0:	019b      	lsls	r3, r3, #6
 80010c2:	d4e2      	bmi.n	800108a <HAL_RCC_ClockConfig+0x92>
 80010c4:	e79d      	b.n	8001002 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80010c6:	2a03      	cmp	r2, #3
 80010c8:	d103      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80010ca:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80010cc:	03db      	lsls	r3, r3, #15
 80010ce:	d4dc      	bmi.n	800108a <HAL_RCC_ClockConfig+0x92>
 80010d0:	e797      	b.n	8001002 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d2:	6833      	ldr	r3, [r6, #0]
 80010d4:	079b      	lsls	r3, r3, #30
 80010d6:	d4d8      	bmi.n	800108a <HAL_RCC_ClockConfig+0x92>
 80010d8:	e793      	b.n	8001002 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010da:	6822      	ldr	r2, [r4, #0]
 80010dc:	439a      	bics	r2, r3
 80010de:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010e0:	6822      	ldr	r2, [r4, #0]
 80010e2:	421a      	tst	r2, r3
 80010e4:	d000      	beq.n	80010e8 <HAL_RCC_ClockConfig+0xf0>
 80010e6:	e78c      	b.n	8001002 <HAL_RCC_ClockConfig+0xa>
 80010e8:	e79d      	b.n	8001026 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80010ea:	6863      	ldr	r3, [r4, #4]
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_RCC_ClockConfig+0x114>)
 80010ee:	4013      	ands	r3, r2
 80010f0:	68ea      	ldr	r2, [r5, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	6063      	str	r3, [r4, #4]
 80010f6:	e79a      	b.n	800102e <HAL_RCC_ClockConfig+0x36>
 80010f8:	40022000 	.word	0x40022000
 80010fc:	40021000 	.word	0x40021000
 8001100:	080028a1 	.word	0x080028a1
 8001104:	20000008 	.word	0x20000008
 8001108:	00001388 	.word	0x00001388
 800110c:	fffff8ff 	.word	0xfffff8ff

08001110 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001112:	4a05      	ldr	r2, [pc, #20]	; (8001128 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	055b      	lsls	r3, r3, #21
 8001118:	0f5b      	lsrs	r3, r3, #29
 800111a:	5cd3      	ldrb	r3, [r2, r3]
 800111c:	4a03      	ldr	r2, [pc, #12]	; (800112c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800111e:	6810      	ldr	r0, [r2, #0]
 8001120:	40d8      	lsrs	r0, r3
}    
 8001122:	4770      	bx	lr
 8001124:	40021000 	.word	0x40021000
 8001128:	080028b1 	.word	0x080028b1
 800112c:	20000008 	.word	0x20000008

08001130 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001130:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001132:	6803      	ldr	r3, [r0, #0]
{
 8001134:	b085      	sub	sp, #20
 8001136:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001138:	03db      	lsls	r3, r3, #15
 800113a:	d528      	bpl.n	800118e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800113c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800113e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001140:	4c44      	ldr	r4, [pc, #272]	; (8001254 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001142:	0552      	lsls	r2, r2, #21
 8001144:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001146:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001148:	4213      	tst	r3, r2
 800114a:	d108      	bne.n	800115e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800114c:	69e3      	ldr	r3, [r4, #28]
 800114e:	4313      	orrs	r3, r2
 8001150:	61e3      	str	r3, [r4, #28]
 8001152:	69e3      	ldr	r3, [r4, #28]
 8001154:	4013      	ands	r3, r2
 8001156:	9303      	str	r3, [sp, #12]
 8001158:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800115a:	2301      	movs	r3, #1
 800115c:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115e:	2780      	movs	r7, #128	; 0x80
 8001160:	4e3d      	ldr	r6, [pc, #244]	; (8001258 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001162:	007f      	lsls	r7, r7, #1
 8001164:	6833      	ldr	r3, [r6, #0]
 8001166:	423b      	tst	r3, r7
 8001168:	d041      	beq.n	80011ee <HAL_RCCEx_PeriphCLKConfig+0xbe>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800116a:	22c0      	movs	r2, #192	; 0xc0
 800116c:	6a23      	ldr	r3, [r4, #32]
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	4013      	ands	r3, r2
 8001172:	4e3a      	ldr	r6, [pc, #232]	; (800125c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001174:	d14d      	bne.n	8001212 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001176:	6a23      	ldr	r3, [r4, #32]
 8001178:	401e      	ands	r6, r3
 800117a:	686b      	ldr	r3, [r5, #4]
 800117c:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800117e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001180:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8001182:	2b01      	cmp	r3, #1
 8001184:	d103      	bne.n	800118e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001186:	69e3      	ldr	r3, [r4, #28]
 8001188:	4a35      	ldr	r2, [pc, #212]	; (8001260 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800118a:	4013      	ands	r3, r2
 800118c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800118e:	682b      	ldr	r3, [r5, #0]
 8001190:	07da      	lsls	r2, r3, #31
 8001192:	d506      	bpl.n	80011a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001194:	2003      	movs	r0, #3
 8001196:	492f      	ldr	r1, [pc, #188]	; (8001254 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8001198:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800119a:	4382      	bics	r2, r0
 800119c:	68a8      	ldr	r0, [r5, #8]
 800119e:	4302      	orrs	r2, r0
 80011a0:	630a      	str	r2, [r1, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80011a2:	079a      	lsls	r2, r3, #30
 80011a4:	d506      	bpl.n	80011b4 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80011a6:	492b      	ldr	r1, [pc, #172]	; (8001254 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80011a8:	482e      	ldr	r0, [pc, #184]	; (8001264 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80011aa:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80011ac:	4002      	ands	r2, r0
 80011ae:	68e8      	ldr	r0, [r5, #12]
 80011b0:	4302      	orrs	r2, r0
 80011b2:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80011b4:	035a      	lsls	r2, r3, #13
 80011b6:	d506      	bpl.n	80011c6 <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80011b8:	4926      	ldr	r1, [pc, #152]	; (8001254 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80011ba:	482b      	ldr	r0, [pc, #172]	; (8001268 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80011bc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80011be:	4002      	ands	r2, r0
 80011c0:	6928      	ldr	r0, [r5, #16]
 80011c2:	4302      	orrs	r2, r0
 80011c4:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80011c6:	069a      	lsls	r2, r3, #26
 80011c8:	d506      	bpl.n	80011d8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80011ca:	2010      	movs	r0, #16
 80011cc:	4921      	ldr	r1, [pc, #132]	; (8001254 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80011ce:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80011d0:	4382      	bics	r2, r0
 80011d2:	6968      	ldr	r0, [r5, #20]
 80011d4:	4302      	orrs	r2, r0
 80011d6:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80011d8:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80011da:	055b      	lsls	r3, r3, #21
 80011dc:	d517      	bpl.n	800120e <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80011de:	2140      	movs	r1, #64	; 0x40
 80011e0:	4a1c      	ldr	r2, [pc, #112]	; (8001254 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80011e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011e4:	438b      	bics	r3, r1
 80011e6:	69a9      	ldr	r1, [r5, #24]
 80011e8:	430b      	orrs	r3, r1
 80011ea:	6313      	str	r3, [r2, #48]	; 0x30
 80011ec:	e00f      	b.n	800120e <HAL_RCCEx_PeriphCLKConfig+0xde>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ee:	6833      	ldr	r3, [r6, #0]
 80011f0:	433b      	orrs	r3, r7
 80011f2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80011f4:	f7ff f866 	bl	80002c4 <HAL_GetTick>
 80011f8:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fa:	6833      	ldr	r3, [r6, #0]
 80011fc:	423b      	tst	r3, r7
 80011fe:	d1b4      	bne.n	800116a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001200:	f7ff f860 	bl	80002c4 <HAL_GetTick>
 8001204:	9b01      	ldr	r3, [sp, #4]
 8001206:	1ac0      	subs	r0, r0, r3
 8001208:	2864      	cmp	r0, #100	; 0x64
 800120a:	d9f6      	bls.n	80011fa <HAL_RCCEx_PeriphCLKConfig+0xca>
          return HAL_TIMEOUT;
 800120c:	2003      	movs	r0, #3
}
 800120e:	b005      	add	sp, #20
 8001210:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001212:	6869      	ldr	r1, [r5, #4]
 8001214:	400a      	ands	r2, r1
 8001216:	4293      	cmp	r3, r2
 8001218:	d0ad      	beq.n	8001176 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 800121a:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800121c:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800121e:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001220:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8001222:	025b      	lsls	r3, r3, #9
 8001224:	4303      	orrs	r3, r0
 8001226:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001228:	6a23      	ldr	r3, [r4, #32]
 800122a:	4810      	ldr	r0, [pc, #64]	; (800126c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800122c:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 800122e:	4003      	ands	r3, r0
 8001230:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8001232:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001234:	07d3      	lsls	r3, r2, #31
 8001236:	d59e      	bpl.n	8001176 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8001238:	f7ff f844 	bl	80002c4 <HAL_GetTick>
 800123c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800123e:	2202      	movs	r2, #2
 8001240:	6a23      	ldr	r3, [r4, #32]
 8001242:	4213      	tst	r3, r2
 8001244:	d197      	bne.n	8001176 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001246:	f7ff f83d 	bl	80002c4 <HAL_GetTick>
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800124c:	1bc0      	subs	r0, r0, r7
 800124e:	4298      	cmp	r0, r3
 8001250:	d9f5      	bls.n	800123e <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8001252:	e7db      	b.n	800120c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8001254:	40021000 	.word	0x40021000
 8001258:	40007000 	.word	0x40007000
 800125c:	fffffcff 	.word	0xfffffcff
 8001260:	efffffff 	.word	0xefffffff
 8001264:	fffcffff 	.word	0xfffcffff
 8001268:	fff3ffff 	.word	0xfff3ffff
 800126c:	fffeffff 	.word	0xfffeffff
 8001270:	00001388 	.word	0x00001388

08001274 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001274:	b570      	push	{r4, r5, r6, lr}
 8001276:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001278:	6925      	ldr	r5, [r4, #16]
 800127a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800127c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800127e:	432a      	orrs	r2, r5
 8001280:	6965      	ldr	r5, [r4, #20]
 8001282:	69c1      	ldr	r1, [r0, #28]
 8001284:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	4d65      	ldr	r5, [pc, #404]	; (8001420 <UART_SetConfig+0x1ac>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800128a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800128c:	4028      	ands	r0, r5
 800128e:	4302      	orrs	r2, r0
 8001290:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	4863      	ldr	r0, [pc, #396]	; (8001424 <UART_SetConfig+0x1b0>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8001296:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001298:	4002      	ands	r2, r0
 800129a:	68e0      	ldr	r0, [r4, #12]
 800129c:	4302      	orrs	r2, r0
 800129e:	605a      	str	r2, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 80012a0:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80012a2:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80012a4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80012a6:	4d60      	ldr	r5, [pc, #384]	; (8001428 <UART_SetConfig+0x1b4>)
 80012a8:	4028      	ands	r0, r5
 80012aa:	4302      	orrs	r2, r0
 80012ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80012ae:	4a5f      	ldr	r2, [pc, #380]	; (800142c <UART_SetConfig+0x1b8>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d113      	bne.n	80012dc <UART_SetConfig+0x68>
 80012b4:	2203      	movs	r2, #3
 80012b6:	4b5e      	ldr	r3, [pc, #376]	; (8001430 <UART_SetConfig+0x1bc>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4013      	ands	r3, r2
 80012bc:	4a5d      	ldr	r2, [pc, #372]	; (8001434 <UART_SetConfig+0x1c0>)
 80012be:	5cd0      	ldrb	r0, [r2, r3]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	4299      	cmp	r1, r3
 80012c6:	d100      	bne.n	80012ca <UART_SetConfig+0x56>
 80012c8:	e09c      	b.n	8001404 <UART_SetConfig+0x190>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 80012ca:	2808      	cmp	r0, #8
 80012cc:	d861      	bhi.n	8001392 <UART_SetConfig+0x11e>
 80012ce:	f7fe ff19 	bl	8000104 <__gnu_thumb1_case_uqi>
 80012d2:	6062      	.short	0x6062
 80012d4:	60776067 	.word	0x60776067
 80012d8:	6060      	.short	0x6060
 80012da:	7a          	.byte	0x7a
 80012db:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80012dc:	4a56      	ldr	r2, [pc, #344]	; (8001438 <UART_SetConfig+0x1c4>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d138      	bne.n	8001354 <UART_SetConfig+0xe0>
 80012e2:	22c0      	movs	r2, #192	; 0xc0
 80012e4:	2080      	movs	r0, #128	; 0x80
 80012e6:	4b52      	ldr	r3, [pc, #328]	; (8001430 <UART_SetConfig+0x1bc>)
 80012e8:	0292      	lsls	r2, r2, #10
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	0240      	lsls	r0, r0, #9
 80012ee:	4013      	ands	r3, r2
 80012f0:	4283      	cmp	r3, r0
 80012f2:	d100      	bne.n	80012f6 <UART_SetConfig+0x82>
 80012f4:	e07f      	b.n	80013f6 <UART_SetConfig+0x182>
 80012f6:	d808      	bhi.n	800130a <UART_SetConfig+0x96>
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d100      	bne.n	80012fe <UART_SetConfig+0x8a>
 80012fc:	e071      	b.n	80013e2 <UART_SetConfig+0x16e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012fe:	2380      	movs	r3, #128	; 0x80
      ret = HAL_ERROR;
 8001300:	2001      	movs	r0, #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	4299      	cmp	r1, r3
 8001306:	d144      	bne.n	8001392 <UART_SetConfig+0x11e>
 8001308:	e020      	b.n	800134c <UART_SetConfig+0xd8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800130a:	2080      	movs	r0, #128	; 0x80
 800130c:	0280      	lsls	r0, r0, #10
 800130e:	4283      	cmp	r3, r0
 8001310:	d05e      	beq.n	80013d0 <UART_SetConfig+0x15c>
 8001312:	4293      	cmp	r3, r2
 8001314:	d1f3      	bne.n	80012fe <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	4299      	cmp	r1, r3
 800131c:	d140      	bne.n	80013a0 <UART_SetConfig+0x12c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800131e:	6863      	ldr	r3, [r4, #4]
 8001320:	0858      	lsrs	r0, r3, #1
 8001322:	4b46      	ldr	r3, [pc, #280]	; (800143c <UART_SetConfig+0x1c8>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001324:	18c0      	adds	r0, r0, r3
 8001326:	6861      	ldr	r1, [r4, #4]
 8001328:	f7fe ff00 	bl	800012c <__udivsi3>
 800132c:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800132e:	0003      	movs	r3, r0
 8001330:	4a43      	ldr	r2, [pc, #268]	; (8001440 <UART_SetConfig+0x1cc>)
 8001332:	3b10      	subs	r3, #16
 8001334:	4293      	cmp	r3, r2
 8001336:	d82c      	bhi.n	8001392 <UART_SetConfig+0x11e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001338:	230f      	movs	r3, #15
 800133a:	0002      	movs	r2, r0
 800133c:	439a      	bics	r2, r3
 800133e:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001340:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 8001342:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001344:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 8001346:	4318      	orrs	r0, r3
 8001348:	60d0      	str	r0, [r2, #12]
 800134a:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800134c:	2300      	movs	r3, #0
 800134e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001350:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001352:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001354:	4a3b      	ldr	r2, [pc, #236]	; (8001444 <UART_SetConfig+0x1d0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d10c      	bne.n	8001374 <UART_SetConfig+0x100>
 800135a:	22c0      	movs	r2, #192	; 0xc0
 800135c:	2080      	movs	r0, #128	; 0x80
 800135e:	4b34      	ldr	r3, [pc, #208]	; (8001430 <UART_SetConfig+0x1bc>)
 8001360:	0312      	lsls	r2, r2, #12
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	02c0      	lsls	r0, r0, #11
 8001366:	4013      	ands	r3, r2
 8001368:	4283      	cmp	r3, r0
 800136a:	d044      	beq.n	80013f6 <UART_SetConfig+0x182>
 800136c:	d9c4      	bls.n	80012f8 <UART_SetConfig+0x84>
 800136e:	2080      	movs	r0, #128	; 0x80
 8001370:	0300      	lsls	r0, r0, #12
 8001372:	e7cc      	b.n	800130e <UART_SetConfig+0x9a>
 8001374:	4a34      	ldr	r2, [pc, #208]	; (8001448 <UART_SetConfig+0x1d4>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d033      	beq.n	80013e2 <UART_SetConfig+0x16e>
 800137a:	4a34      	ldr	r2, [pc, #208]	; (800144c <UART_SetConfig+0x1d8>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d030      	beq.n	80013e2 <UART_SetConfig+0x16e>
 8001380:	4a33      	ldr	r2, [pc, #204]	; (8001450 <UART_SetConfig+0x1dc>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d02d      	beq.n	80013e2 <UART_SetConfig+0x16e>
 8001386:	4a33      	ldr	r2, [pc, #204]	; (8001454 <UART_SetConfig+0x1e0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d02a      	beq.n	80013e2 <UART_SetConfig+0x16e>
 800138c:	4a32      	ldr	r2, [pc, #200]	; (8001458 <UART_SetConfig+0x1e4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d027      	beq.n	80013e2 <UART_SetConfig+0x16e>
      ret = HAL_ERROR;
 8001392:	2001      	movs	r0, #1
 8001394:	e7da      	b.n	800134c <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001396:	f7ff febb 	bl	8001110 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800139a:	6863      	ldr	r3, [r4, #4]
 800139c:	085b      	lsrs	r3, r3, #1
 800139e:	e002      	b.n	80013a6 <UART_SetConfig+0x132>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80013a0:	6863      	ldr	r3, [r4, #4]
 80013a2:	0858      	lsrs	r0, r3, #1
 80013a4:	4b2d      	ldr	r3, [pc, #180]	; (800145c <UART_SetConfig+0x1e8>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80013a6:	18c0      	adds	r0, r0, r3
 80013a8:	6861      	ldr	r1, [r4, #4]
 80013aa:	f7fe febf 	bl	800012c <__udivsi3>
 80013ae:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80013b0:	0003      	movs	r3, r0
 80013b2:	4a23      	ldr	r2, [pc, #140]	; (8001440 <UART_SetConfig+0x1cc>)
 80013b4:	3b10      	subs	r3, #16
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d8eb      	bhi.n	8001392 <UART_SetConfig+0x11e>
      huart->Instance->BRR = usartdiv;
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	60d8      	str	r0, [r3, #12]
 80013be:	e7c4      	b.n	800134a <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetSysClockFreq();
 80013c0:	f7ff fdde 	bl	8000f80 <HAL_RCC_GetSysClockFreq>
 80013c4:	e7e9      	b.n	800139a <UART_SetConfig+0x126>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80013c6:	6863      	ldr	r3, [r4, #4]
 80013c8:	0858      	lsrs	r0, r3, #1
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	e7ea      	b.n	80013a6 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	4299      	cmp	r1, r3
 80013d6:	d1f6      	bne.n	80013c6 <UART_SetConfig+0x152>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80013d8:	6863      	ldr	r3, [r4, #4]
 80013da:	0858      	lsrs	r0, r3, #1
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	025b      	lsls	r3, r3, #9
 80013e0:	e7a0      	b.n	8001324 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013e2:	2380      	movs	r3, #128	; 0x80
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	4299      	cmp	r1, r3
 80013e8:	d1d5      	bne.n	8001396 <UART_SetConfig+0x122>
        pclk = HAL_RCC_GetPCLK1Freq();
 80013ea:	f7ff fe91 	bl	8001110 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80013ee:	6863      	ldr	r3, [r4, #4]
 80013f0:	0040      	lsls	r0, r0, #1
 80013f2:	085b      	lsrs	r3, r3, #1
 80013f4:	e796      	b.n	8001324 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	4299      	cmp	r1, r3
 80013fc:	d1e0      	bne.n	80013c0 <UART_SetConfig+0x14c>
        pclk = HAL_RCC_GetSysClockFreq();
 80013fe:	f7ff fdbf 	bl	8000f80 <HAL_RCC_GetSysClockFreq>
 8001402:	e7f4      	b.n	80013ee <UART_SetConfig+0x17a>
    switch (clocksource)
 8001404:	2808      	cmp	r0, #8
 8001406:	d8c4      	bhi.n	8001392 <UART_SetConfig+0x11e>
 8001408:	f7fe fe86 	bl	8000118 <__gnu_thumb1_case_shi>
 800140c:	ffc3ffef 	.word	0xffc3ffef
 8001410:	ffc3ff89 	.word	0xffc3ff89
 8001414:	ffc3fff9 	.word	0xffc3fff9
 8001418:	ffc3ffc3 	.word	0xffc3ffc3
 800141c:	ffe6      	.short	0xffe6
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	efff69f3 	.word	0xefff69f3
 8001424:	ffffcfff 	.word	0xffffcfff
 8001428:	fffff4ff 	.word	0xfffff4ff
 800142c:	40013800 	.word	0x40013800
 8001430:	40021000 	.word	0x40021000
 8001434:	08002884 	.word	0x08002884
 8001438:	40004400 	.word	0x40004400
 800143c:	00f42400 	.word	0x00f42400
 8001440:	0000ffef 	.word	0x0000ffef
 8001444:	40004800 	.word	0x40004800
 8001448:	40004c00 	.word	0x40004c00
 800144c:	40005000 	.word	0x40005000
 8001450:	40011400 	.word	0x40011400
 8001454:	40011800 	.word	0x40011800
 8001458:	40011c00 	.word	0x40011c00
 800145c:	007a1200 	.word	0x007a1200

08001460 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001460:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001462:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001464:	07da      	lsls	r2, r3, #31
 8001466:	d506      	bpl.n	8001476 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001468:	6801      	ldr	r1, [r0, #0]
 800146a:	4c28      	ldr	r4, [pc, #160]	; (800150c <UART_AdvFeatureConfig+0xac>)
 800146c:	684a      	ldr	r2, [r1, #4]
 800146e:	4022      	ands	r2, r4
 8001470:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001472:	4322      	orrs	r2, r4
 8001474:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001476:	079a      	lsls	r2, r3, #30
 8001478:	d506      	bpl.n	8001488 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800147a:	6801      	ldr	r1, [r0, #0]
 800147c:	4c24      	ldr	r4, [pc, #144]	; (8001510 <UART_AdvFeatureConfig+0xb0>)
 800147e:	684a      	ldr	r2, [r1, #4]
 8001480:	4022      	ands	r2, r4
 8001482:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001484:	4322      	orrs	r2, r4
 8001486:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001488:	075a      	lsls	r2, r3, #29
 800148a:	d506      	bpl.n	800149a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800148c:	6801      	ldr	r1, [r0, #0]
 800148e:	4c21      	ldr	r4, [pc, #132]	; (8001514 <UART_AdvFeatureConfig+0xb4>)
 8001490:	684a      	ldr	r2, [r1, #4]
 8001492:	4022      	ands	r2, r4
 8001494:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001496:	4322      	orrs	r2, r4
 8001498:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800149a:	071a      	lsls	r2, r3, #28
 800149c:	d506      	bpl.n	80014ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800149e:	6801      	ldr	r1, [r0, #0]
 80014a0:	4c1d      	ldr	r4, [pc, #116]	; (8001518 <UART_AdvFeatureConfig+0xb8>)
 80014a2:	684a      	ldr	r2, [r1, #4]
 80014a4:	4022      	ands	r2, r4
 80014a6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80014a8:	4322      	orrs	r2, r4
 80014aa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80014ac:	06da      	lsls	r2, r3, #27
 80014ae:	d506      	bpl.n	80014be <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80014b0:	6801      	ldr	r1, [r0, #0]
 80014b2:	4c1a      	ldr	r4, [pc, #104]	; (800151c <UART_AdvFeatureConfig+0xbc>)
 80014b4:	688a      	ldr	r2, [r1, #8]
 80014b6:	4022      	ands	r2, r4
 80014b8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80014ba:	4322      	orrs	r2, r4
 80014bc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80014be:	069a      	lsls	r2, r3, #26
 80014c0:	d506      	bpl.n	80014d0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80014c2:	6801      	ldr	r1, [r0, #0]
 80014c4:	4c16      	ldr	r4, [pc, #88]	; (8001520 <UART_AdvFeatureConfig+0xc0>)
 80014c6:	688a      	ldr	r2, [r1, #8]
 80014c8:	4022      	ands	r2, r4
 80014ca:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80014cc:	4322      	orrs	r2, r4
 80014ce:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80014d0:	065a      	lsls	r2, r3, #25
 80014d2:	d510      	bpl.n	80014f6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80014d4:	6801      	ldr	r1, [r0, #0]
 80014d6:	4d13      	ldr	r5, [pc, #76]	; (8001524 <UART_AdvFeatureConfig+0xc4>)
 80014d8:	684a      	ldr	r2, [r1, #4]
 80014da:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80014dc:	402a      	ands	r2, r5
 80014de:	4322      	orrs	r2, r4
 80014e0:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80014e2:	2280      	movs	r2, #128	; 0x80
 80014e4:	0352      	lsls	r2, r2, #13
 80014e6:	4294      	cmp	r4, r2
 80014e8:	d105      	bne.n	80014f6 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80014ea:	684a      	ldr	r2, [r1, #4]
 80014ec:	4c0e      	ldr	r4, [pc, #56]	; (8001528 <UART_AdvFeatureConfig+0xc8>)
 80014ee:	4022      	ands	r2, r4
 80014f0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80014f2:	4322      	orrs	r2, r4
 80014f4:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80014f6:	061b      	lsls	r3, r3, #24
 80014f8:	d506      	bpl.n	8001508 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80014fa:	6802      	ldr	r2, [r0, #0]
 80014fc:	490b      	ldr	r1, [pc, #44]	; (800152c <UART_AdvFeatureConfig+0xcc>)
 80014fe:	6853      	ldr	r3, [r2, #4]
 8001500:	400b      	ands	r3, r1
 8001502:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001504:	430b      	orrs	r3, r1
 8001506:	6053      	str	r3, [r2, #4]
  }
}
 8001508:	bd30      	pop	{r4, r5, pc}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	fffdffff 	.word	0xfffdffff
 8001510:	fffeffff 	.word	0xfffeffff
 8001514:	fffbffff 	.word	0xfffbffff
 8001518:	ffff7fff 	.word	0xffff7fff
 800151c:	ffffefff 	.word	0xffffefff
 8001520:	ffffdfff 	.word	0xffffdfff
 8001524:	ffefffff 	.word	0xffefffff
 8001528:	ff9fffff 	.word	0xff9fffff
 800152c:	fff7ffff 	.word	0xfff7ffff

08001530 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001532:	2780      	movs	r7, #128	; 0x80
{
 8001534:	0004      	movs	r4, r0
 8001536:	000e      	movs	r6, r1
 8001538:	0015      	movs	r5, r2
 800153a:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800153c:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800153e:	6822      	ldr	r2, [r4, #0]
 8001540:	69d3      	ldr	r3, [r2, #28]
 8001542:	4033      	ands	r3, r6
 8001544:	1b9b      	subs	r3, r3, r6
 8001546:	4259      	negs	r1, r3
 8001548:	414b      	adcs	r3, r1
 800154a:	42ab      	cmp	r3, r5
 800154c:	d001      	beq.n	8001552 <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800154e:	2000      	movs	r0, #0
 8001550:	e01c      	b.n	800158c <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8001552:	9b08      	ldr	r3, [sp, #32]
 8001554:	3301      	adds	r3, #1
 8001556:	d0f3      	beq.n	8001540 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001558:	f7fe feb4 	bl	80002c4 <HAL_GetTick>
 800155c:	9b01      	ldr	r3, [sp, #4]
 800155e:	9a08      	ldr	r2, [sp, #32]
 8001560:	1ac0      	subs	r0, r0, r3
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	4282      	cmp	r2, r0
 8001566:	d301      	bcc.n	800156c <UART_WaitOnFlagUntilTimeout+0x3c>
 8001568:	2a00      	cmp	r2, #0
 800156a:	d110      	bne.n	800158e <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4913      	ldr	r1, [pc, #76]	; (80015bc <UART_WaitOnFlagUntilTimeout+0x8c>)
 8001570:	400a      	ands	r2, r1
 8001572:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	31a3      	adds	r1, #163	; 0xa3
 8001578:	31ff      	adds	r1, #255	; 0xff
 800157a:	438a      	bics	r2, r1
 800157c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800157e:	2320      	movs	r3, #32
 8001580:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001582:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8001584:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8001586:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8001588:	3470      	adds	r4, #112	; 0x70
 800158a:	7023      	strb	r3, [r4, #0]
}
 800158c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800158e:	2104      	movs	r1, #4
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	420a      	tst	r2, r1
 8001594:	d0d3      	beq.n	800153e <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001596:	69da      	ldr	r2, [r3, #28]
 8001598:	423a      	tst	r2, r7
 800159a:	d0d0      	beq.n	800153e <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800159c:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4906      	ldr	r1, [pc, #24]	; (80015bc <UART_WaitOnFlagUntilTimeout+0x8c>)
 80015a2:	400a      	ands	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	31a3      	adds	r1, #163	; 0xa3
 80015aa:	31ff      	adds	r1, #255	; 0xff
 80015ac:	438a      	bics	r2, r1
 80015ae:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80015b0:	2320      	movs	r3, #32
 80015b2:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80015b4:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80015b6:	67e3      	str	r3, [r4, #124]	; 0x7c
 80015b8:	e7e4      	b.n	8001584 <UART_WaitOnFlagUntilTimeout+0x54>
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	fffffe5f 	.word	0xfffffe5f

080015c0 <HAL_UART_Transmit>:
{
 80015c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c2:	b087      	sub	sp, #28
 80015c4:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 80015c6:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 80015c8:	0004      	movs	r4, r0
 80015ca:	000d      	movs	r5, r1
 80015cc:	0017      	movs	r7, r2
    return HAL_BUSY;
 80015ce:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80015d0:	2b20      	cmp	r3, #32
 80015d2:	d149      	bne.n	8001668 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 80015d4:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80015d6:	2900      	cmp	r1, #0
 80015d8:	d046      	beq.n	8001668 <HAL_UART_Transmit+0xa8>
 80015da:	2a00      	cmp	r2, #0
 80015dc:	d044      	beq.n	8001668 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	68a2      	ldr	r2, [r4, #8]
 80015e2:	015b      	lsls	r3, r3, #5
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d104      	bne.n	80015f2 <HAL_UART_Transmit+0x32>
 80015e8:	6923      	ldr	r3, [r4, #16]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 80015ee:	4201      	tst	r1, r0
 80015f0:	d13a      	bne.n	8001668 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 80015f2:	0023      	movs	r3, r4
 80015f4:	3370      	adds	r3, #112	; 0x70
 80015f6:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80015f8:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80015fa:	2a01      	cmp	r2, #1
 80015fc:	d034      	beq.n	8001668 <HAL_UART_Transmit+0xa8>
 80015fe:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001600:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 8001602:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001604:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001606:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001608:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 800160a:	f7fe fe5b 	bl	80002c4 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800160e:	0023      	movs	r3, r4
 8001610:	3350      	adds	r3, #80	; 0x50
 8001612:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8001614:	3302      	adds	r3, #2
 8001616:	9303      	str	r3, [sp, #12]
 8001618:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800161e:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001620:	015b      	lsls	r3, r3, #5
 8001622:	429a      	cmp	r2, r3
 8001624:	d104      	bne.n	8001630 <HAL_UART_Transmit+0x70>
 8001626:	6923      	ldr	r3, [r4, #16]
 8001628:	42b3      	cmp	r3, r6
 800162a:	d101      	bne.n	8001630 <HAL_UART_Transmit+0x70>
 800162c:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800162e:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8001630:	0023      	movs	r3, r4
 8001632:	3352      	adds	r3, #82	; 0x52
 8001634:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001636:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8001638:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 800163e:	2a00      	cmp	r2, #0
 8001640:	d10a      	bne.n	8001658 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001642:	2140      	movs	r1, #64	; 0x40
 8001644:	0020      	movs	r0, r4
 8001646:	f7ff ff73 	bl	8001530 <UART_WaitOnFlagUntilTimeout>
 800164a:	2800      	cmp	r0, #0
 800164c:	d10b      	bne.n	8001666 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 800164e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001650:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8001652:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 8001654:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001656:	e007      	b.n	8001668 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001658:	2200      	movs	r2, #0
 800165a:	2180      	movs	r1, #128	; 0x80
 800165c:	0020      	movs	r0, r4
 800165e:	f7ff ff67 	bl	8001530 <UART_WaitOnFlagUntilTimeout>
 8001662:	2800      	cmp	r0, #0
 8001664:	d002      	beq.n	800166c <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 8001666:	2003      	movs	r0, #3
}
 8001668:	b007      	add	sp, #28
 800166a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800166c:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800166e:	2d00      	cmp	r5, #0
 8001670:	d10b      	bne.n	800168a <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001672:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8001674:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001676:	05db      	lsls	r3, r3, #23
 8001678:	0ddb      	lsrs	r3, r3, #23
 800167a:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800167c:	9b03      	ldr	r3, [sp, #12]
 800167e:	9a03      	ldr	r2, [sp, #12]
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	3b01      	subs	r3, #1
 8001684:	b29b      	uxth	r3, r3
 8001686:	8013      	strh	r3, [r2, #0]
 8001688:	e7d2      	b.n	8001630 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800168a:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 800168c:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800168e:	8513      	strh	r3, [r2, #40]	; 0x28
 8001690:	e7f4      	b.n	800167c <HAL_UART_Transmit+0xbc>
	...

08001694 <UART_CheckIdleState>:
{
 8001694:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001696:	2600      	movs	r6, #0
{
 8001698:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800169a:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800169c:	f7fe fe12 	bl	80002c4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80016a0:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80016a2:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	071b      	lsls	r3, r3, #28
 80016a8:	d415      	bmi.n	80016d6 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80016aa:	6823      	ldr	r3, [r4, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	075b      	lsls	r3, r3, #29
 80016b0:	d50a      	bpl.n	80016c8 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80016b2:	2180      	movs	r1, #128	; 0x80
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <UART_CheckIdleState+0x5c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	03c9      	lsls	r1, r1, #15
 80016bc:	002b      	movs	r3, r5
 80016be:	0020      	movs	r0, r4
 80016c0:	f7ff ff36 	bl	8001530 <UART_WaitOnFlagUntilTimeout>
 80016c4:	2800      	cmp	r0, #0
 80016c6:	d111      	bne.n	80016ec <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80016c8:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80016ca:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80016cc:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80016ce:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80016d0:	3470      	adds	r4, #112	; 0x70
 80016d2:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80016d4:	e00b      	b.n	80016ee <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80016d6:	2180      	movs	r1, #128	; 0x80
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <UART_CheckIdleState+0x5c>)
 80016da:	0032      	movs	r2, r6
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	0389      	lsls	r1, r1, #14
 80016e0:	0003      	movs	r3, r0
 80016e2:	0020      	movs	r0, r4
 80016e4:	f7ff ff24 	bl	8001530 <UART_WaitOnFlagUntilTimeout>
 80016e8:	2800      	cmp	r0, #0
 80016ea:	d0de      	beq.n	80016aa <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80016ec:	2003      	movs	r0, #3
}
 80016ee:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80016f0:	01ffffff 	.word	0x01ffffff

080016f4 <HAL_UART_Init>:
{
 80016f4:	b510      	push	{r4, lr}
 80016f6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80016f8:	d101      	bne.n	80016fe <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80016fa:	2001      	movs	r0, #1
}
 80016fc:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80016fe:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001700:	2b00      	cmp	r3, #0
 8001702:	d104      	bne.n	800170e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001704:	0002      	movs	r2, r0
 8001706:	3270      	adds	r2, #112	; 0x70
 8001708:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800170a:	f000 fbf3 	bl	8001ef4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800170e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001710:	2101      	movs	r1, #1
 8001712:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001714:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001716:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001718:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800171a:	438b      	bics	r3, r1
 800171c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800171e:	f7ff fda9 	bl	8001274 <UART_SetConfig>
 8001722:	2801      	cmp	r0, #1
 8001724:	d0e9      	beq.n	80016fa <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001728:	2b00      	cmp	r3, #0
 800172a:	d002      	beq.n	8001732 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 800172c:	0020      	movs	r0, r4
 800172e:	f7ff fe97 	bl	8001460 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	4907      	ldr	r1, [pc, #28]	; (8001754 <HAL_UART_Init+0x60>)
 8001736:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001738:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800173a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800173c:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800173e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	438a      	bics	r2, r1
 8001744:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001746:	2201      	movs	r2, #1
 8001748:	6819      	ldr	r1, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800174e:	f7ff ffa1 	bl	8001694 <UART_CheckIdleState>
 8001752:	e7d3      	b.n	80016fc <HAL_UART_Init+0x8>
 8001754:	ffffb7ff 	.word	0xffffb7ff

08001758 <readRegister>:





uint8_t readRegister( I2C_HandleTypeDef* hi2c, uint8_t address) {
 8001758:	b570      	push	{r4, r5, r6, lr}
 800175a:	220f      	movs	r2, #15

	uint8_t value;

	HAL_I2C_Master_Transmit(hi2c,TSL2561_Address<<1,&address,1,1000);
 800175c:	26fa      	movs	r6, #250	; 0xfa
    HAL_I2C_Master_Receive(hi2c,TSL2561_Address<<1,&value,1,1000);
 800175e:	2417      	movs	r4, #23
uint8_t readRegister( I2C_HandleTypeDef* hi2c, uint8_t address) {
 8001760:	0005      	movs	r5, r0
 8001762:	b086      	sub	sp, #24
 8001764:	446a      	add	r2, sp
	HAL_I2C_Master_Transmit(hi2c,TSL2561_Address<<1,&address,1,1000);
 8001766:	00b6      	lsls	r6, r6, #2
uint8_t readRegister( I2C_HandleTypeDef* hi2c, uint8_t address) {
 8001768:	7011      	strb	r1, [r2, #0]
    HAL_I2C_Master_Receive(hi2c,TSL2561_Address<<1,&value,1,1000);
 800176a:	446c      	add	r4, sp
	HAL_I2C_Master_Transmit(hi2c,TSL2561_Address<<1,&address,1,1000);
 800176c:	9600      	str	r6, [sp, #0]
 800176e:	2301      	movs	r3, #1
 8001770:	2152      	movs	r1, #82	; 0x52
 8001772:	f7ff f83d 	bl	80007f0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(hi2c,TSL2561_Address<<1,&value,1,1000);
 8001776:	9600      	str	r6, [sp, #0]
 8001778:	2301      	movs	r3, #1
 800177a:	0022      	movs	r2, r4
 800177c:	2152      	movs	r1, #82	; 0x52
 800177e:	0028      	movs	r0, r5
 8001780:	f7ff f8cc 	bl	800091c <HAL_I2C_Master_Receive>

    return value;
 8001784:	7820      	ldrb	r0, [r4, #0]
}
 8001786:	b006      	add	sp, #24
 8001788:	bd70      	pop	{r4, r5, r6, pc}

0800178a <writeRegister>:

void writeRegister( I2C_HandleTypeDef* hi2c, uint8_t address, uint8_t val) {
 800178a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dataraw[2];

	dataraw[0]=address<<1;
	dataraw[1]=val;

	HAL_I2C_Master_Transmit(hi2c,TSL2561_Address<<1,(uint8_t *)dataraw,2,1000);
 800178c:	23fa      	movs	r3, #250	; 0xfa
	dataraw[0]=address<<1;
 800178e:	ac03      	add	r4, sp, #12
 8001790:	0049      	lsls	r1, r1, #1
	HAL_I2C_Master_Transmit(hi2c,TSL2561_Address<<1,(uint8_t *)dataraw,2,1000);
 8001792:	009b      	lsls	r3, r3, #2
	dataraw[0]=address<<1;
 8001794:	7021      	strb	r1, [r4, #0]
	dataraw[1]=val;
 8001796:	7062      	strb	r2, [r4, #1]
	HAL_I2C_Master_Transmit(hi2c,TSL2561_Address<<1,(uint8_t *)dataraw,2,1000);
 8001798:	2152      	movs	r1, #82	; 0x52
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	0022      	movs	r2, r4
 800179e:	2302      	movs	r3, #2
 80017a0:	f7ff f826 	bl	80007f0 <HAL_I2C_Master_Transmit>
}
 80017a4:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
	...

080017a8 <getLux>:

void getLux(I2C_HandleTypeDef* hi2c) {
 80017a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	//read bytes from registers
    CH0_LOW = readRegister(hi2c, TSL2561_Channal0L);
 80017aa:	218c      	movs	r1, #140	; 0x8c
void getLux(I2C_HandleTypeDef* hi2c) {
 80017ac:	0007      	movs	r7, r0
    CH0_LOW = readRegister(hi2c, TSL2561_Channal0L);
 80017ae:	f7ff ffd3 	bl	8001758 <readRegister>
 80017b2:	4d10      	ldr	r5, [pc, #64]	; (80017f4 <getLux+0x4c>)
    CH0_HIGH = readRegister(hi2c, TSL2561_Channal0H);
 80017b4:	218d      	movs	r1, #141	; 0x8d
    CH0_LOW = readRegister(hi2c, TSL2561_Channal0L);
 80017b6:	7028      	strb	r0, [r5, #0]
    CH0_HIGH = readRegister(hi2c, TSL2561_Channal0H);
 80017b8:	0038      	movs	r0, r7
 80017ba:	f7ff ffcd 	bl	8001758 <readRegister>
 80017be:	4e0e      	ldr	r6, [pc, #56]	; (80017f8 <getLux+0x50>)
    CH1_LOW = readRegister( hi2c, TSL2561_Channal1L);
 80017c0:	218e      	movs	r1, #142	; 0x8e
    CH0_HIGH = readRegister(hi2c, TSL2561_Channal0H);
 80017c2:	7030      	strb	r0, [r6, #0]
    CH1_LOW = readRegister( hi2c, TSL2561_Channal1L);
 80017c4:	0038      	movs	r0, r7
 80017c6:	f7ff ffc7 	bl	8001758 <readRegister>
 80017ca:	4c0c      	ldr	r4, [pc, #48]	; (80017fc <getLux+0x54>)
    CH1_HIGH = readRegister( hi2c, TSL2561_Channal1H);
 80017cc:	218f      	movs	r1, #143	; 0x8f
    CH1_LOW = readRegister( hi2c, TSL2561_Channal1L);
 80017ce:	7020      	strb	r0, [r4, #0]
    CH1_HIGH = readRegister( hi2c, TSL2561_Channal1H);
 80017d0:	0038      	movs	r0, r7
 80017d2:	f7ff ffc1 	bl	8001758 <readRegister>
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <getLux+0x58>)

    ch0 = (CH0_HIGH << 8) | CH0_LOW;
 80017d8:	7832      	ldrb	r2, [r6, #0]
    CH1_HIGH = readRegister( hi2c, TSL2561_Channal1H);
 80017da:	7018      	strb	r0, [r3, #0]
    ch0 = (CH0_HIGH << 8) | CH0_LOW;
 80017dc:	782b      	ldrb	r3, [r5, #0]
 80017de:	0212      	lsls	r2, r2, #8
 80017e0:	4313      	orrs	r3, r2
 80017e2:	4a08      	ldr	r2, [pc, #32]	; (8001804 <getLux+0x5c>)
    ch1 = (CH1_HIGH << 8) | CH1_LOW;
 80017e4:	0200      	lsls	r0, r0, #8
    ch0 = (CH0_HIGH << 8) | CH0_LOW;
 80017e6:	8013      	strh	r3, [r2, #0]
    ch1 = (CH1_HIGH << 8) | CH1_LOW;
 80017e8:	7823      	ldrb	r3, [r4, #0]
 80017ea:	4318      	orrs	r0, r3
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <getLux+0x60>)
 80017ee:	8018      	strh	r0, [r3, #0]
}
 80017f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	200000b8 	.word	0x200000b8
 80017f8:	200000c9 	.word	0x200000c9
 80017fc:	200000c0 	.word	0x200000c0
 8001800:	200000c8 	.word	0x200000c8
 8001804:	200000ca 	.word	0x200000ca
 8001808:	200000d0 	.word	0x200000d0

0800180c <init_light>:

// initialization of the registers
void init_light(I2C_HandleTypeDef* hi2c) {
 800180c:	b510      	push	{r4, lr}
 800180e:	0004      	movs	r4, r0

	writeRegister( hi2c,TSL2561_Control, 0x03); // POWER UP
 8001810:	2203      	movs	r2, #3
 8001812:	2180      	movs	r1, #128	; 0x80
 8001814:	f7ff ffb9 	bl	800178a <writeRegister>
    writeRegister( hi2c,TSL2561_Timing, 0x00); //No High Gain (1x), integration time of 13ms
 8001818:	0020      	movs	r0, r4
 800181a:	2200      	movs	r2, #0
 800181c:	2181      	movs	r1, #129	; 0x81
 800181e:	f7ff ffb4 	bl	800178a <writeRegister>
    writeRegister( hi2c,TSL2561_Interrupt, 0x00); //No interruption
 8001822:	0020      	movs	r0, r4
 8001824:	2200      	movs	r2, #0
 8001826:	2186      	movs	r1, #134	; 0x86
 8001828:	f7ff ffaf 	bl	800178a <writeRegister>
    writeRegister( hi2c,TSL2561_Control, 0x00); // POWER Down
 800182c:	2200      	movs	r2, #0
 800182e:	2180      	movs	r1, #128	; 0x80
 8001830:	0020      	movs	r0, r4
 8001832:	f7ff ffaa 	bl	800178a <writeRegister>

}
 8001836:	bd10      	pop	{r4, pc}

08001838 <readIRLuminosity>:

// read Infrared channel value only, not convert to lux.
uint16_t readIRLuminosity(I2C_HandleTypeDef* hi2c) {
 8001838:	b570      	push	{r4, r5, r6, lr}
 800183a:	0004      	movs	r4, r0

	writeRegister( hi2c,TSL2561_Control, 0x03); // POWER UP
 800183c:	2203      	movs	r2, #3
 800183e:	2180      	movs	r1, #128	; 0x80
 8001840:	f7ff ffa3 	bl	800178a <writeRegister>

    getLux(hi2c);
 8001844:	0020      	movs	r0, r4
 8001846:	f7ff ffaf 	bl	80017a8 <getLux>

    writeRegister( hi2c,TSL2561_Control, 0x00); // POWER Down
 800184a:	0020      	movs	r0, r4
 800184c:	2200      	movs	r2, #0
 800184e:	2180      	movs	r1, #128	; 0x80
 8001850:	f7ff ff9b 	bl	800178a <writeRegister>

    if (ch1 == 0) {
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <readIRLuminosity+0x44>)
 8001856:	881c      	ldrh	r4, [r3, #0]
 8001858:	2c00      	cmp	r4, #0
 800185a:	d00c      	beq.n	8001876 <readIRLuminosity+0x3e>
        return 0;
    }

    if (ch0 / ch1 < 2 && ch0 > 4900) {
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <readIRLuminosity+0x48>)
 800185e:	0021      	movs	r1, r4
 8001860:	881d      	ldrh	r5, [r3, #0]
 8001862:	0028      	movs	r0, r5
 8001864:	f7fe fc62 	bl	800012c <__udivsi3>
 8001868:	b280      	uxth	r0, r0
 800186a:	2801      	cmp	r0, #1
 800186c:	d803      	bhi.n	8001876 <readIRLuminosity+0x3e>
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <readIRLuminosity+0x4c>)
 8001870:	429d      	cmp	r5, r3
 8001872:	d900      	bls.n	8001876 <readIRLuminosity+0x3e>
        return -1;  //ch0 out of range, but ch1 not. the lux is not valid in this situation.
 8001874:	4c04      	ldr	r4, [pc, #16]	; (8001888 <readIRLuminosity+0x50>)
    }
    return ch1;
}
 8001876:	0020      	movs	r0, r4
 8001878:	bd70      	pop	{r4, r5, r6, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	200000d0 	.word	0x200000d0
 8001880:	200000ca 	.word	0x200000ca
 8001884:	00001324 	.word	0x00001324
 8001888:	0000ffff 	.word	0x0000ffff

0800188c <readFSpecLuminosity>:

//read Full Spectrum channel value only,  not convert to lux.
uint16_t readFSpecLuminosity(I2C_HandleTypeDef* hi2c) {
 800188c:	b510      	push	{r4, lr}
 800188e:	0004      	movs	r4, r0

    writeRegister(hi2c,TSL2561_Control, 0x03); // POWER UP
 8001890:	2203      	movs	r2, #3
 8001892:	2180      	movs	r1, #128	; 0x80
 8001894:	f7ff ff79 	bl	800178a <writeRegister>

    getLux(hi2c);
 8001898:	0020      	movs	r0, r4
 800189a:	f7ff ff85 	bl	80017a8 <getLux>

    writeRegister(hi2c, TSL2561_Control, 0x00); // POWER Down
 800189e:	0020      	movs	r0, r4

    if (ch1 == 0) {
        return 0;
 80018a0:	2400      	movs	r4, #0
    writeRegister(hi2c, TSL2561_Control, 0x00); // POWER Down
 80018a2:	2180      	movs	r1, #128	; 0x80
 80018a4:	2200      	movs	r2, #0
 80018a6:	f7ff ff70 	bl	800178a <writeRegister>
    if (ch1 == 0) {
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <readFSpecLuminosity+0x44>)
 80018ac:	8819      	ldrh	r1, [r3, #0]
 80018ae:	42a1      	cmp	r1, r4
 80018b0:	d00b      	beq.n	80018ca <readFSpecLuminosity+0x3e>
    }
    if (ch0 / ch1 < 2 && ch0 > 4900) {
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <readFSpecLuminosity+0x48>)
 80018b4:	881c      	ldrh	r4, [r3, #0]
 80018b6:	0020      	movs	r0, r4
 80018b8:	f7fe fc38 	bl	800012c <__udivsi3>
 80018bc:	b280      	uxth	r0, r0
 80018be:	2801      	cmp	r0, #1
 80018c0:	d803      	bhi.n	80018ca <readFSpecLuminosity+0x3e>
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <readFSpecLuminosity+0x4c>)
 80018c4:	429c      	cmp	r4, r3
 80018c6:	d900      	bls.n	80018ca <readFSpecLuminosity+0x3e>
        return -1;  //ch0 out of range, but ch1 not. the lux is not valid in this situation.
 80018c8:	4c04      	ldr	r4, [pc, #16]	; (80018dc <readFSpecLuminosity+0x50>)
    }
    return ch0;
}
 80018ca:	0020      	movs	r0, r4
 80018cc:	bd10      	pop	{r4, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	200000d0 	.word	0x200000d0
 80018d4:	200000ca 	.word	0x200000ca
 80018d8:	00001324 	.word	0x00001324
 80018dc:	0000ffff 	.word	0x0000ffff

080018e0 <calculateLux>:
    }
    return calculateLux(0, 0, 0);  //T package, no gain, 13ms
}

// explain in the datasheet
unsigned long calculateLux(unsigned int iGain, unsigned int tInt, int iType) {
 80018e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e2:	0016      	movs	r6, r2
 80018e4:	4b57      	ldr	r3, [pc, #348]	; (8001a44 <calculateLux+0x164>)
    switch (tInt) {
 80018e6:	2900      	cmp	r1, #0
 80018e8:	d004      	beq.n	80018f4 <calculateLux+0x14>
 80018ea:	2901      	cmp	r1, #1
 80018ec:	d031      	beq.n	8001952 <calculateLux+0x72>
            break;
        case 1: // 101 msec
            chScale = CHSCALE_TINT1;
            break;
        default: // assume no scaling
            chScale = (1 << CH_SCALE);
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	00d2      	lsls	r2, r2, #3
 80018f2:	e000      	b.n	80018f6 <calculateLux+0x16>
            chScale = CHSCALE_TINT0;
 80018f4:	4a54      	ldr	r2, [pc, #336]	; (8001a48 <calculateLux+0x168>)
            chScale = (1 << CH_SCALE);
 80018f6:	601a      	str	r2, [r3, #0]
            break;
    }
    if (!iGain) {
 80018f8:	2800      	cmp	r0, #0
 80018fa:	d102      	bne.n	8001902 <calculateLux+0x22>
        chScale = chScale << 4;    // scale 1X to 16X
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	0112      	lsls	r2, r2, #4
 8001900:	601a      	str	r2, [r3, #0]
    }
    // scale the channel values
    channel0 = (ch0 * chScale) >> CH_SCALE;
 8001902:	681c      	ldr	r4, [r3, #0]
 8001904:	4b51      	ldr	r3, [pc, #324]	; (8001a4c <calculateLux+0x16c>)
 8001906:	4f52      	ldr	r7, [pc, #328]	; (8001a50 <calculateLux+0x170>)
 8001908:	8818      	ldrh	r0, [r3, #0]
 800190a:	4b52      	ldr	r3, [pc, #328]	; (8001a54 <calculateLux+0x174>)
 800190c:	4360      	muls	r0, r4
 800190e:	0a85      	lsrs	r5, r0, #10
 8001910:	601d      	str	r5, [r3, #0]
    channel1 = (ch1 * chScale) >> CH_SCALE;
 8001912:	4b51      	ldr	r3, [pc, #324]	; (8001a58 <calculateLux+0x178>)
 8001914:	8818      	ldrh	r0, [r3, #0]
 8001916:	4b51      	ldr	r3, [pc, #324]	; (8001a5c <calculateLux+0x17c>)
 8001918:	4344      	muls	r4, r0
 800191a:	0aa4      	lsrs	r4, r4, #10
 800191c:	601c      	str	r4, [r3, #0]

    ratio1 = 0;
    if (channel0 != 0) {
 800191e:	2d00      	cmp	r5, #0
 8001920:	d119      	bne.n	8001956 <calculateLux+0x76>
    ratio1 = 0;
 8001922:	603d      	str	r5, [r7, #0]
        ratio1 = (channel1 << (RATIO_SCALE + 1)) / channel0;
    }
    // round the ratio value
    unsigned long ratio = (ratio1 + 1) >> 1;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	494e      	ldr	r1, [pc, #312]	; (8001a60 <calculateLux+0x180>)
 8001928:	3301      	adds	r3, #1
 800192a:	085b      	lsrs	r3, r3, #1
 800192c:	4a4d      	ldr	r2, [pc, #308]	; (8001a64 <calculateLux+0x184>)

    switch (iType) {
 800192e:	2e00      	cmp	r6, #0
 8001930:	d017      	beq.n	8001962 <calculateLux+0x82>
 8001932:	2e01      	cmp	r6, #1
 8001934:	d04e      	beq.n	80019d4 <calculateLux+0xf4>
    }
    temp = ((channel0 * b) - (channel1 * m));
    if (temp < 0) {
        temp = 0;
    }
    temp += (1 << (LUX_SCALE - 1));
 8001936:	2380      	movs	r3, #128	; 0x80
    temp = ((channel0 * b) - (channel1 * m));
 8001938:	6808      	ldr	r0, [r1, #0]
    temp += (1 << (LUX_SCALE - 1));
 800193a:	019b      	lsls	r3, r3, #6
    temp = ((channel0 * b) - (channel1 * m));
 800193c:	4368      	muls	r0, r5
    temp += (1 << (LUX_SCALE - 1));
 800193e:	18c1      	adds	r1, r0, r3
    temp = ((channel0 * b) - (channel1 * m));
 8001940:	6810      	ldr	r0, [r2, #0]
    temp += (1 << (LUX_SCALE - 1));
 8001942:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <calculateLux+0x188>)
    temp = ((channel0 * b) - (channel1 * m));
 8001944:	4360      	muls	r0, r4
    temp += (1 << (LUX_SCALE - 1));
 8001946:	1a08      	subs	r0, r1, r0
 8001948:	6018      	str	r0, [r3, #0]
    // strip off fractional portion
    lux = temp >> LUX_SCALE;
 800194a:	4b48      	ldr	r3, [pc, #288]	; (8001a6c <calculateLux+0x18c>)
 800194c:	0b80      	lsrs	r0, r0, #14
 800194e:	6018      	str	r0, [r3, #0]

    return (lux);
}
 8001950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            chScale = CHSCALE_TINT1;
 8001952:	4a47      	ldr	r2, [pc, #284]	; (8001a70 <calculateLux+0x190>)
 8001954:	e7cf      	b.n	80018f6 <calculateLux+0x16>
        ratio1 = (channel1 << (RATIO_SCALE + 1)) / channel0;
 8001956:	02a0      	lsls	r0, r4, #10
 8001958:	0029      	movs	r1, r5
 800195a:	f7fe fbe7 	bl	800012c <__udivsi3>
 800195e:	6038      	str	r0, [r7, #0]
 8001960:	e7e0      	b.n	8001924 <calculateLux+0x44>
            if ((ratio >= 0) && (ratio <= K1T)) {
 8001962:	2b40      	cmp	r3, #64	; 0x40
 8001964:	d805      	bhi.n	8001972 <calculateLux+0x92>
                b = B1T;
 8001966:	23f9      	movs	r3, #249	; 0xf9
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	600b      	str	r3, [r1, #0]
                m = M1T;
 800196c:	3b34      	subs	r3, #52	; 0x34
                m = M7C;
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	e7e1      	b.n	8001936 <calculateLux+0x56>
            } else if (ratio <= K2T) {
 8001972:	2b80      	cmp	r3, #128	; 0x80
 8001974:	d804      	bhi.n	8001980 <calculateLux+0xa0>
                b = B2T;
 8001976:	2385      	movs	r3, #133	; 0x85
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	600b      	str	r3, [r1, #0]
                m = M2T;
 800197c:	4b3d      	ldr	r3, [pc, #244]	; (8001a74 <calculateLux+0x194>)
 800197e:	e7f6      	b.n	800196e <calculateLux+0x8e>
            } else if (ratio <= K3T) {
 8001980:	2bc0      	cmp	r3, #192	; 0xc0
 8001982:	d803      	bhi.n	800198c <calculateLux+0xac>
                b = B3T;
 8001984:	4b3c      	ldr	r3, [pc, #240]	; (8001a78 <calculateLux+0x198>)
 8001986:	600b      	str	r3, [r1, #0]
                m = M3T;
 8001988:	4b3c      	ldr	r3, [pc, #240]	; (8001a7c <calculateLux+0x19c>)
 800198a:	e7f0      	b.n	800196e <calculateLux+0x8e>
            } else if (ratio <= K4T) {
 800198c:	2080      	movs	r0, #128	; 0x80
 800198e:	0040      	lsls	r0, r0, #1
 8001990:	4283      	cmp	r3, r0
 8001992:	d804      	bhi.n	800199e <calculateLux+0xbe>
                b = B4T;
 8001994:	239c      	movs	r3, #156	; 0x9c
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	600b      	str	r3, [r1, #0]
                m = M4T;
 800199a:	4b39      	ldr	r3, [pc, #228]	; (8001a80 <calculateLux+0x1a0>)
 800199c:	e7e7      	b.n	800196e <calculateLux+0x8e>
            } else if (ratio <= K5T) {
 800199e:	209c      	movs	r0, #156	; 0x9c
 80019a0:	0040      	lsls	r0, r0, #1
 80019a2:	4283      	cmp	r3, r0
 80019a4:	d804      	bhi.n	80019b0 <calculateLux+0xd0>
                b = B5T;
 80019a6:	2370      	movs	r3, #112	; 0x70
 80019a8:	33ff      	adds	r3, #255	; 0xff
 80019aa:	600b      	str	r3, [r1, #0]
                m = M5T;
 80019ac:	338d      	adds	r3, #141	; 0x8d
 80019ae:	e7de      	b.n	800196e <calculateLux+0x8e>
            } else if (ratio <= K6T) {
 80019b0:	20cd      	movs	r0, #205	; 0xcd
 80019b2:	0040      	lsls	r0, r0, #1
 80019b4:	4283      	cmp	r3, r0
 80019b6:	d803      	bhi.n	80019c0 <calculateLux+0xe0>
                b = B6T;
 80019b8:	23d2      	movs	r3, #210	; 0xd2
 80019ba:	600b      	str	r3, [r1, #0]
                m = M6T;
 80019bc:	3329      	adds	r3, #41	; 0x29
 80019be:	e7d6      	b.n	800196e <calculateLux+0x8e>
            } else if (ratio <= K7T) {
 80019c0:	4830      	ldr	r0, [pc, #192]	; (8001a84 <calculateLux+0x1a4>)
 80019c2:	4283      	cmp	r3, r0
 80019c4:	d803      	bhi.n	80019ce <calculateLux+0xee>
                b = B7T;
 80019c6:	2318      	movs	r3, #24
 80019c8:	600b      	str	r3, [r1, #0]
                m = M7T;
 80019ca:	3b06      	subs	r3, #6
 80019cc:	e7cf      	b.n	800196e <calculateLux+0x8e>
                b = B8T;
 80019ce:	600e      	str	r6, [r1, #0]
                m = M8T;
 80019d0:	6016      	str	r6, [r2, #0]
 80019d2:	e7b0      	b.n	8001936 <calculateLux+0x56>
            if ((ratio >= 0) && (ratio <= K1C)) {
 80019d4:	2b43      	cmp	r3, #67	; 0x43
 80019d6:	d805      	bhi.n	80019e4 <calculateLux+0x104>
                b = B1C;
 80019d8:	2381      	movs	r3, #129	; 0x81
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	600b      	str	r3, [r1, #0]
                m = M1C;
 80019de:	23ae      	movs	r3, #174	; 0xae
                m = M6C;
 80019e0:	33ff      	adds	r3, #255	; 0xff
 80019e2:	e7c4      	b.n	800196e <calculateLux+0x8e>
            } else if (ratio <= K2C) {
 80019e4:	2b85      	cmp	r3, #133	; 0x85
 80019e6:	d804      	bhi.n	80019f2 <calculateLux+0x112>
                b = B2C;
 80019e8:	238a      	movs	r3, #138	; 0x8a
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	600b      	str	r3, [r1, #0]
                m = M2C;
 80019ee:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <calculateLux+0x1a8>)
 80019f0:	e7bd      	b.n	800196e <calculateLux+0x8e>
            } else if (ratio <= K3C) {
 80019f2:	2bc8      	cmp	r3, #200	; 0xc8
 80019f4:	d803      	bhi.n	80019fe <calculateLux+0x11e>
                b = B3C;
 80019f6:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <calculateLux+0x1ac>)
 80019f8:	600b      	str	r3, [r1, #0]
                m = M3C;
 80019fa:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <calculateLux+0x1b0>)
 80019fc:	e7b7      	b.n	800196e <calculateLux+0x8e>
            } else if (ratio <= K4C) {
 80019fe:	2085      	movs	r0, #133	; 0x85
 8001a00:	0040      	lsls	r0, r0, #1
 8001a02:	4283      	cmp	r3, r0
 8001a04:	d803      	bhi.n	8001a0e <calculateLux+0x12e>
                b = B4C;
 8001a06:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <calculateLux+0x1b4>)
 8001a08:	600b      	str	r3, [r1, #0]
                m = M4C;
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <calculateLux+0x1b8>)
 8001a0c:	e7af      	b.n	800196e <calculateLux+0x8e>
            } else if (ratio <= K5C) {
 8001a0e:	204e      	movs	r0, #78	; 0x4e
 8001a10:	30ff      	adds	r0, #255	; 0xff
 8001a12:	4283      	cmp	r3, r0
 8001a14:	d804      	bhi.n	8001a20 <calculateLux+0x140>
                b = B5C;
 8001a16:	2378      	movs	r3, #120	; 0x78
 8001a18:	33ff      	adds	r3, #255	; 0xff
 8001a1a:	600b      	str	r3, [r1, #0]
                m = M5C;
 8001a1c:	23de      	movs	r3, #222	; 0xde
 8001a1e:	e7df      	b.n	80019e0 <calculateLux+0x100>
            } else if (ratio <= K6C) {
 8001a20:	20cd      	movs	r0, #205	; 0xcd
 8001a22:	0040      	lsls	r0, r0, #1
 8001a24:	4283      	cmp	r3, r0
 8001a26:	d804      	bhi.n	8001a32 <calculateLux+0x152>
                b = B6C;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	33ff      	adds	r3, #255	; 0xff
 8001a2c:	600b      	str	r3, [r1, #0]
                m = M6C;
 8001a2e:	2328      	movs	r3, #40	; 0x28
 8001a30:	e7d6      	b.n	80019e0 <calculateLux+0x100>
            } else if (ratio <= K7C) {
 8001a32:	4814      	ldr	r0, [pc, #80]	; (8001a84 <calculateLux+0x1a4>)
 8001a34:	4283      	cmp	r3, r0
 8001a36:	d900      	bls.n	8001a3a <calculateLux+0x15a>
 8001a38:	e77d      	b.n	8001936 <calculateLux+0x56>
                b = B7C;
 8001a3a:	2337      	movs	r3, #55	; 0x37
 8001a3c:	600b      	str	r3, [r1, #0]
                m = M7C;
 8001a3e:	3b0c      	subs	r3, #12
 8001a40:	e795      	b.n	800196e <calculateLux+0x8e>
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	200000a8 	.word	0x200000a8
 8001a48:	00007517 	.word	0x00007517
 8001a4c:	200000ca 	.word	0x200000ca
 8001a50:	200000b4 	.word	0x200000b4
 8001a54:	200000cc 	.word	0x200000cc
 8001a58:	200000d0 	.word	0x200000d0
 8001a5c:	200000b0 	.word	0x200000b0
 8001a60:	200000ac 	.word	0x200000ac
 8001a64:	200000d4 	.word	0x200000d4
 8001a68:	200000bc 	.word	0x200000bc
 8001a6c:	200000c4 	.word	0x200000c4
 8001a70:	00000fe7 	.word	0x00000fe7
 8001a74:	000002d1 	.word	0x000002d1
 8001a78:	0000023f 	.word	0x0000023f
 8001a7c:	0000037b 	.word	0x0000037b
 8001a80:	000003fe 	.word	0x000003fe
 8001a84:	0000029a 	.word	0x0000029a
 8001a88:	000002c1 	.word	0x000002c1
 8001a8c:	00000253 	.word	0x00000253
 8001a90:	00000363 	.word	0x00000363
 8001a94:	00000282 	.word	0x00000282
 8001a98:	000003df 	.word	0x000003df

08001a9c <readVisibleLux>:
signed long readVisibleLux(I2C_HandleTypeDef* hi2c) {
 8001a9c:	b510      	push	{r4, lr}
 8001a9e:	0004      	movs	r4, r0
    writeRegister( hi2c,TSL2561_Control, 0x03); // POWER UP
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	2180      	movs	r1, #128	; 0x80
 8001aa4:	f7ff fe71 	bl	800178a <writeRegister>
    getLux(hi2c);
 8001aa8:	0020      	movs	r0, r4
 8001aaa:	f7ff fe7d 	bl	80017a8 <getLux>
    writeRegister( hi2c,TSL2561_Control, 0x00); // POWER Down
 8001aae:	2180      	movs	r1, #128	; 0x80
 8001ab0:	0020      	movs	r0, r4
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f7ff fe69 	bl	800178a <writeRegister>
        return 0;
 8001ab8:	2000      	movs	r0, #0
    if (ch1 == 0) {
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <readVisibleLux+0x50>)
 8001abc:	8819      	ldrh	r1, [r3, #0]
 8001abe:	4281      	cmp	r1, r0
 8001ac0:	d00f      	beq.n	8001ae2 <readVisibleLux+0x46>
    if (ch0 / ch1 < 2 && ch0 > 4900) {
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <readVisibleLux+0x54>)
 8001ac4:	881c      	ldrh	r4, [r3, #0]
 8001ac6:	0020      	movs	r0, r4
 8001ac8:	f7fe fb30 	bl	800012c <__udivsi3>
 8001acc:	b280      	uxth	r0, r0
 8001ace:	2801      	cmp	r0, #1
 8001ad0:	d802      	bhi.n	8001ad8 <readVisibleLux+0x3c>
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <readVisibleLux+0x58>)
 8001ad4:	429c      	cmp	r4, r3
 8001ad6:	d805      	bhi.n	8001ae4 <readVisibleLux+0x48>
    return calculateLux(0, 0, 0);  //T package, no gain, 13ms
 8001ad8:	2200      	movs	r2, #0
 8001ada:	0011      	movs	r1, r2
 8001adc:	0010      	movs	r0, r2
 8001ade:	f7ff feff 	bl	80018e0 <calculateLux>
}
 8001ae2:	bd10      	pop	{r4, pc}
        return -1;  //ch0 out of range, but ch1 not. the lux is not valid in this situation.
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	4240      	negs	r0, r0
 8001ae8:	e7fb      	b.n	8001ae2 <readVisibleLux+0x46>
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	200000d0 	.word	0x200000d0
 8001af0:	200000ca 	.word	0x200000ca
 8001af4:	00001324 	.word	0x00001324

08001af8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001af8:	b530      	push	{r4, r5, lr}
 8001afa:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	2214      	movs	r2, #20
 8001afe:	2100      	movs	r1, #0
 8001b00:	a805      	add	r0, sp, #20
 8001b02:	f000 fa82 	bl	800200a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b06:	2080      	movs	r0, #128	; 0x80
 8001b08:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <MX_GPIO_Init+0x94>)
 8001b0a:	0300      	lsls	r0, r0, #12
 8001b0c:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b0e:	2590      	movs	r5, #144	; 0x90
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b10:	4301      	orrs	r1, r0
 8001b12:	6159      	str	r1, [r3, #20]
 8001b14:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b16:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b18:	4002      	ands	r2, r0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b1a:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1c:	9201      	str	r2, [sp, #4]
 8001b1e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b20:	6959      	ldr	r1, [r3, #20]
 8001b22:	03c0      	lsls	r0, r0, #15
 8001b24:	4301      	orrs	r1, r0
 8001b26:	6159      	str	r1, [r3, #20]
 8001b28:	695a      	ldr	r2, [r3, #20]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b2c:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b30:	9202      	str	r2, [sp, #8]
 8001b32:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b34:	6959      	ldr	r1, [r3, #20]
 8001b36:	0280      	lsls	r0, r0, #10
 8001b38:	4301      	orrs	r1, r0
 8001b3a:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b40:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	4002      	ands	r2, r0
 8001b44:	9203      	str	r2, [sp, #12]
 8001b46:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b48:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b4a:	0028      	movs	r0, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	615a      	str	r2, [r3, #20]
 8001b50:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b54:	400b      	ands	r3, r1
 8001b56:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b58:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b5c:	f7fe fcd0 	bl	8000500 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	019b      	lsls	r3, r3, #6
 8001b64:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <MX_GPIO_Init+0x98>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b68:	a905      	add	r1, sp, #20
 8001b6a:	480a      	ldr	r0, [pc, #40]	; (8001b94 <MX_GPIO_Init+0x9c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b6c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b70:	f7fe fc0a 	bl	8000388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b74:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b76:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b78:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7c:	3b1f      	subs	r3, #31
 8001b7e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b84:	f7fe fc00 	bl	8000388 <HAL_GPIO_Init>

}
 8001b88:	b00b      	add	sp, #44	; 0x2c
 8001b8a:	bd30      	pop	{r4, r5, pc}
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	10210000 	.word	0x10210000
 8001b94:	48000800 	.word	0x48000800

08001b98 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b98:	b510      	push	{r4, lr}

  hi2c1.Instance = I2C1;
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001b9c:	4c13      	ldr	r4, [pc, #76]	; (8001bec <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b9e:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8001ba0:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ba4:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 8001ba6:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ba8:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001baa:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8001bac:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bae:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001bb0:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bb2:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bb4:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bb6:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bb8:	f7fe fdc4 	bl	8000744 <HAL_I2C_Init>
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8001bc0:	f000 f93e 	bl	8001e40 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	0020      	movs	r0, r4
 8001bc8:	f7fe ff40 	bl	8000a4c <HAL_I2CEx_ConfigAnalogFilter>
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8001bd0:	f000 f936 	bl	8001e40 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	0020      	movs	r0, r4
 8001bd8:	f7fe ff5e 	bl	8000a98 <HAL_I2CEx_ConfigDigitalFilter>
 8001bdc:	2800      	cmp	r0, #0
 8001bde:	d001      	beq.n	8001be4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001be0:	f000 f92e 	bl	8001e40 <Error_Handler>
  }

}
 8001be4:	bd10      	pop	{r4, pc}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	40005400 	.word	0x40005400
 8001bec:	200000d8 	.word	0x200000d8
 8001bf0:	2000090e 	.word	0x2000090e

08001bf4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bf4:	b510      	push	{r4, lr}
 8001bf6:	0004      	movs	r4, r0
 8001bf8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfa:	2214      	movs	r2, #20
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	a803      	add	r0, sp, #12
 8001c00:	f000 fa03 	bl	800200a <memset>
  if(i2cHandle->Instance==I2C1)
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <HAL_I2C_MspInit+0x60>)
 8001c06:	6822      	ldr	r2, [r4, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d120      	bne.n	8001c4e <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0c:	2180      	movs	r1, #128	; 0x80
 8001c0e:	4c12      	ldr	r4, [pc, #72]	; (8001c58 <HAL_I2C_MspInit+0x64>)
 8001c10:	02c9      	lsls	r1, r1, #11
 8001c12:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c14:	4811      	ldr	r0, [pc, #68]	; (8001c5c <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	430a      	orrs	r2, r1
 8001c18:	6162      	str	r2, [r4, #20]
 8001c1a:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c1c:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	400b      	ands	r3, r1
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c24:	23c0      	movs	r3, #192	; 0xc0
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c2a:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c2e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c30:	3b11      	subs	r3, #17
 8001c32:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c34:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001c36:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c38:	f7fe fba6 	bl	8000388 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c3c:	2180      	movs	r1, #128	; 0x80
 8001c3e:	69e2      	ldr	r2, [r4, #28]
 8001c40:	0389      	lsls	r1, r1, #14
 8001c42:	430a      	orrs	r2, r1
 8001c44:	61e2      	str	r2, [r4, #28]
 8001c46:	69e3      	ldr	r3, [r4, #28]
 8001c48:	400b      	ands	r3, r1
 8001c4a:	9302      	str	r3, [sp, #8]
 8001c4c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c4e:	b008      	add	sp, #32
 8001c50:	bd10      	pop	{r4, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	40005400 	.word	0x40005400
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	48000400 	.word	0x48000400

08001c60 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}
/* Fonction qui permet d'afficher une chaîne de caractères sur l'écran LCD */
void lcd_print(char *str)
{
 8001c60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//I2C_HandleTypeDef* Handle = I2Cx;
    char data[2];
    data[0] = 0x40;
 8001c62:	2340      	movs	r3, #64	; 0x40
    int i=0;
    while(str[i] != '\0')
    {
            data[1] = str[i];
            HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001c64:	26fa      	movs	r6, #250	; 0xfa
 8001c66:	0004      	movs	r4, r0
    data[0] = 0x40;
 8001c68:	ad03      	add	r5, sp, #12
 8001c6a:	702b      	strb	r3, [r5, #0]
            HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001c6c:	00b6      	lsls	r6, r6, #2
 8001c6e:	3401      	adds	r4, #1
    while(str[i] != '\0')
 8001c70:	1e63      	subs	r3, r4, #1
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d100      	bne.n	8001c7a <lcd_print+0x1a>
            i++;
   }
}
 8001c78:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
            data[1] = str[i];
 8001c7a:	706b      	strb	r3, [r5, #1]
            HAL_I2C_Master_Transmit(&hi2c1,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001c7c:	002a      	movs	r2, r5
 8001c7e:	9600      	str	r6, [sp, #0]
 8001c80:	2302      	movs	r3, #2
 8001c82:	217c      	movs	r1, #124	; 0x7c
 8001c84:	4801      	ldr	r0, [pc, #4]	; (8001c8c <lcd_print+0x2c>)
 8001c86:	f7fe fdb3 	bl	80007f0 <HAL_I2C_Master_Transmit>
 8001c8a:	e7f0      	b.n	8001c6e <lcd_print+0xe>
 8001c8c:	200000d8 	.word	0x200000d8

08001c90 <lcd_locate>:
/* Fonction qui permet de positionner le curseur */
void lcd_locate(I2C_HandleTypeDef* I2Cx,char col, char row)
{
 8001c90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	I2C_HandleTypeDef* Handle = I2Cx;
    if(row == 0)
    {
        col = col | 0x80;
 8001c92:	2380      	movs	r3, #128	; 0x80
    if(row == 0)
 8001c94:	2a00      	cmp	r2, #0
 8001c96:	d000      	beq.n	8001c9a <lcd_locate+0xa>
    }
    else
    {
        col = col | 0xc0;
 8001c98:	23c0      	movs	r3, #192	; 0xc0
 8001c9a:	4319      	orrs	r1, r3
    }

    char data[2];
    data[0] = 0x80;
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	aa03      	add	r2, sp, #12
 8001ca0:	7013      	strb	r3, [r2, #0]
    data[1] = col;
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001ca2:	23fa      	movs	r3, #250	; 0xfa
 8001ca4:	009b      	lsls	r3, r3, #2
    data[1] = col;
 8001ca6:	7051      	strb	r1, [r2, #1]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	217c      	movs	r1, #124	; 0x7c
 8001cac:	2302      	movs	r3, #2
 8001cae:	f7fe fd9f 	bl	80007f0 <HAL_I2C_Master_Transmit>
}
 8001cb2:	b005      	add	sp, #20
 8001cb4:	bd00      	pop	{pc}
	...

08001cb8 <lcd_clear>:

void lcd_clear()
{
 8001cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t data[2];
	data[0] = 0x80;
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	aa03      	add	r2, sp, #12
 8001cbe:	7013      	strb	r3, [r2, #0]
	data[1] = LCD_CLEARDISPLAY; // On efface ce qui est affiché sur l'écran
 8001cc0:	3b7f      	subs	r3, #127	; 0x7f
 8001cc2:	7053      	strb	r3, [r2, #1]
    HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001cc4:	23fa      	movs	r3, #250	; 0xfa
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	217c      	movs	r1, #124	; 0x7c
 8001ccc:	2302      	movs	r3, #2
 8001cce:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <lcd_clear+0x28>)
 8001cd0:	f7fe fd8e 	bl	80007f0 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	f7fe fafb 	bl	80002d0 <HAL_Delay>
}
 8001cda:	b005      	add	sp, #20
 8001cdc:	bd00      	pop	{pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	200000d8 	.word	0x200000d8

08001ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce4:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce6:	2610      	movs	r6, #16
{
 8001ce8:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cea:	2234      	movs	r2, #52	; 0x34
 8001cec:	2100      	movs	r1, #0
 8001cee:	a80b      	add	r0, sp, #44	; 0x2c
 8001cf0:	f000 f98b 	bl	800200a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cf4:	0032      	movs	r2, r6
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4668      	mov	r0, sp
 8001cfa:	f000 f986 	bl	800200a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cfe:	221c      	movs	r2, #28
 8001d00:	2100      	movs	r1, #0
 8001d02:	a804      	add	r0, sp, #16
 8001d04:	f000 f981 	bl	800200a <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001d0e:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d10:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d12:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001d14:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d16:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d18:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d1a:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001d1c:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d1e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d20:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8001d22:	9517      	str	r5, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d24:	f7fe fedc 	bl	8000ae0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d28:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d2a:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d2c:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d2e:	0029      	movs	r1, r5
 8001d30:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d32:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d34:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d36:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d38:	f7ff f95e 	bl	8000ff8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001d3c:	2322      	movs	r3, #34	; 0x22
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d3e:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001d40:	9304      	str	r3, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d42:	9407      	str	r4, [sp, #28]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001d44:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d46:	f7ff f9f3 	bl	8001130 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001d4a:	b018      	add	sp, #96	; 0x60
 8001d4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001d50 <main>:
{
 8001d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 8001d52:	f7fe fa9b 	bl	800028c <HAL_Init>
	  HAL_UART_Transmit(&huart2, (uint8_t *)Data_lum, sprintf((char *)Data_lum, "lum:%ld ",(uint32_t )(lum)), 1000);
 8001d56:	27fa      	movs	r7, #250	; 0xfa
  SystemClock_Config();
 8001d58:	f7ff ffc4 	bl	8001ce4 <SystemClock_Config>
  MX_GPIO_Init();
 8001d5c:	f7ff fecc 	bl	8001af8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d60:	f7ff ff1a 	bl	8001b98 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001d64:	f000 f8aa 	bl	8001ebc <MX_USART2_UART_Init>
init_light(&hi2c1);
 8001d68:	482a      	ldr	r0, [pc, #168]	; (8001e14 <main+0xc4>)
 8001d6a:	f7ff fd4f 	bl	800180c <init_light>
	  HAL_UART_Transmit(&huart2, (uint8_t *)Data_lum, sprintf((char *)Data_lum, "lum:%ld ",(uint32_t )(lum)), 1000);
 8001d6e:	00bf      	lsls	r7, r7, #2
	  lum=readVisibleLux(&hi2c1);
 8001d70:	4c28      	ldr	r4, [pc, #160]	; (8001e14 <main+0xc4>)
 8001d72:	0020      	movs	r0, r4
 8001d74:	f7ff fe92 	bl	8001a9c <readVisibleLux>
 8001d78:	4e27      	ldr	r6, [pc, #156]	; (8001e18 <main+0xc8>)
 8001d7a:	6030      	str	r0, [r6, #0]
	  FS=readFSpecLuminosity(&hi2c1);
 8001d7c:	0020      	movs	r0, r4
 8001d7e:	f7ff fd85 	bl	800188c <readFSpecLuminosity>
 8001d82:	4d26      	ldr	r5, [pc, #152]	; (8001e1c <main+0xcc>)
 8001d84:	6028      	str	r0, [r5, #0]
	  IR=readIRLuminosity(&hi2c1) ;
 8001d86:	0020      	movs	r0, r4
 8001d88:	f7ff fd56 	bl	8001838 <readIRLuminosity>
 8001d8c:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <main+0xd0>)
	  HAL_UART_Transmit(&huart2, (uint8_t *)Data_lum, sprintf((char *)Data_lum, "lum:%ld ",(uint32_t )(lum)), 1000);
 8001d8e:	6832      	ldr	r2, [r6, #0]
	  IR=readIRLuminosity(&hi2c1) ;
 8001d90:	6018      	str	r0, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)Data_lum, sprintf((char *)Data_lum, "lum:%ld ",(uint32_t )(lum)), 1000);
 8001d92:	4924      	ldr	r1, [pc, #144]	; (8001e24 <main+0xd4>)
 8001d94:	4824      	ldr	r0, [pc, #144]	; (8001e28 <main+0xd8>)
 8001d96:	f000 f941 	bl	800201c <siprintf>
 8001d9a:	003b      	movs	r3, r7
 8001d9c:	b282      	uxth	r2, r0
 8001d9e:	4922      	ldr	r1, [pc, #136]	; (8001e28 <main+0xd8>)
 8001da0:	4822      	ldr	r0, [pc, #136]	; (8001e2c <main+0xdc>)
 8001da2:	f7ff fc0d 	bl	80015c0 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t *)Data_FS, sprintf((char *)Data_FS, "FS:%ld ",(uint32_t )(FS)), 1000);
 8001da6:	4e22      	ldr	r6, [pc, #136]	; (8001e30 <main+0xe0>)
 8001da8:	682a      	ldr	r2, [r5, #0]
 8001daa:	4922      	ldr	r1, [pc, #136]	; (8001e34 <main+0xe4>)
 8001dac:	0030      	movs	r0, r6
 8001dae:	f000 f935 	bl	800201c <siprintf>
 8001db2:	003b      	movs	r3, r7
 8001db4:	b282      	uxth	r2, r0
 8001db6:	0031      	movs	r1, r6
 8001db8:	481c      	ldr	r0, [pc, #112]	; (8001e2c <main+0xdc>)
 8001dba:	f7ff fc01 	bl	80015c0 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t *)Data_IR, sprintf((char *)Data_IR, "IR:%ld ",(uint32_t )(IR)), 1000);
 8001dbe:	4d1e      	ldr	r5, [pc, #120]	; (8001e38 <main+0xe8>)
 8001dc0:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <main+0xd0>)
 8001dc2:	491e      	ldr	r1, [pc, #120]	; (8001e3c <main+0xec>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	0028      	movs	r0, r5
 8001dc8:	f000 f928 	bl	800201c <siprintf>
 8001dcc:	003b      	movs	r3, r7
 8001dce:	b282      	uxth	r2, r0
 8001dd0:	0029      	movs	r1, r5
 8001dd2:	4816      	ldr	r0, [pc, #88]	; (8001e2c <main+0xdc>)
 8001dd4:	f7ff fbf4 	bl	80015c0 <HAL_UART_Transmit>
	  lcd_clear();
 8001dd8:	f7ff ff6e 	bl	8001cb8 <lcd_clear>
		  lcd_locate(&hi2c1,0,0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	0020      	movs	r0, r4
 8001de0:	0011      	movs	r1, r2
 8001de2:	f7ff ff55 	bl	8001c90 <lcd_locate>
		  lcd_print((char *)Data_lum);
 8001de6:	4810      	ldr	r0, [pc, #64]	; (8001e28 <main+0xd8>)
 8001de8:	f7ff ff3a 	bl	8001c60 <lcd_print>
		  lcd_locate(&hi2c1,0,1);
 8001dec:	2201      	movs	r2, #1
 8001dee:	2100      	movs	r1, #0
 8001df0:	0020      	movs	r0, r4
 8001df2:	f7ff ff4d 	bl	8001c90 <lcd_locate>
		  lcd_print((char *)Data_FS);
 8001df6:	0030      	movs	r0, r6
 8001df8:	f7ff ff32 	bl	8001c60 <lcd_print>
		  lcd_locate(&hi2c1,9,1);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	2109      	movs	r1, #9
 8001e00:	0020      	movs	r0, r4
 8001e02:	f7ff ff45 	bl	8001c90 <lcd_locate>
		  lcd_print((char *)Data_IR);
 8001e06:	0028      	movs	r0, r5
 8001e08:	f7ff ff2a 	bl	8001c60 <lcd_print>
		  HAL_Delay(1000);
 8001e0c:	0038      	movs	r0, r7
 8001e0e:	f7fe fa5f 	bl	80002d0 <HAL_Delay>
 8001e12:	e7ad      	b.n	8001d70 <main+0x20>
 8001e14:	200000d8 	.word	0x200000d8
 8001e18:	20000094 	.word	0x20000094
 8001e1c:	2000008c 	.word	0x2000008c
 8001e20:	20000090 	.word	0x20000090
 8001e24:	08002888 	.word	0x08002888
 8001e28:	20000324 	.word	0x20000324
 8001e2c:	20000424 	.word	0x20000424
 8001e30:	20000224 	.word	0x20000224
 8001e34:	08002891 	.word	0x08002891
 8001e38:	20000124 	.word	0x20000124
 8001e3c:	08002899 	.word	0x08002899

08001e40 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e40:	4770      	bx	lr
	...

08001e44 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e44:	2001      	movs	r0, #1
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_MspInit+0x2c>)
{
 8001e48:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4a:	6999      	ldr	r1, [r3, #24]
 8001e4c:	4301      	orrs	r1, r0
 8001e4e:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e50:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e54:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e56:	4002      	ands	r2, r0
 8001e58:	9200      	str	r2, [sp, #0]
 8001e5a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5c:	69da      	ldr	r2, [r3, #28]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	61da      	str	r2, [r3, #28]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	400b      	ands	r3, r1
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6a:	b002      	add	sp, #8
 8001e6c:	4770      	bx	lr
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	40021000 	.word	0x40021000

08001e74 <NMI_Handler>:
 8001e74:	4770      	bx	lr

08001e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e76:	e7fe      	b.n	8001e76 <HardFault_Handler>

08001e78 <SVC_Handler>:
 8001e78:	4770      	bx	lr

08001e7a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7a:	4770      	bx	lr

08001e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e7e:	f7fe fa15 	bl	80002ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e82:	bd10      	pop	{r4, pc}

08001e84 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <_sbrk+0x2c>)
{
 8001e86:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8001e88:	6819      	ldr	r1, [r3, #0]
{
 8001e8a:	0002      	movs	r2, r0
	if (heap_end == 0)
 8001e8c:	2900      	cmp	r1, #0
 8001e8e:	d101      	bne.n	8001e94 <_sbrk+0x10>
		heap_end = &end;
 8001e90:	4908      	ldr	r1, [pc, #32]	; (8001eb4 <_sbrk+0x30>)
 8001e92:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001e94:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001e96:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001e98:	1882      	adds	r2, r0, r2
 8001e9a:	428a      	cmp	r2, r1
 8001e9c:	d906      	bls.n	8001eac <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001e9e:	f000 f881 	bl	8001fa4 <__errno>
 8001ea2:	230c      	movs	r3, #12
 8001ea4:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001eaa:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8001eac:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8001eae:	e7fc      	b.n	8001eaa <_sbrk+0x26>
 8001eb0:	20000098 	.word	0x20000098
 8001eb4:	200004a8 	.word	0x200004a8

08001eb8 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001eb8:	4770      	bx	lr
	...

08001ebc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8001ebc:	480b      	ldr	r0, [pc, #44]	; (8001eec <MX_USART2_UART_Init+0x30>)
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_USART2_UART_Init+0x34>)
{
 8001ec0:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8001ec2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001ec4:	23e1      	movs	r3, #225	; 0xe1
 8001ec6:	025b      	lsls	r3, r3, #9
 8001ec8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eca:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ecc:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ece:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ed2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ed4:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eda:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001edc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ede:	f7ff fc09 	bl	80016f4 <HAL_UART_Init>
 8001ee2:	2800      	cmp	r0, #0
 8001ee4:	d001      	beq.n	8001eea <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
 8001ee6:	f7ff ffab 	bl	8001e40 <Error_Handler>
  }

}
 8001eea:	bd10      	pop	{r4, pc}
 8001eec:	20000424 	.word	0x20000424
 8001ef0:	40004400 	.word	0x40004400

08001ef4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ef4:	b510      	push	{r4, lr}
 8001ef6:	0004      	movs	r4, r0
 8001ef8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efa:	2214      	movs	r2, #20
 8001efc:	2100      	movs	r1, #0
 8001efe:	a803      	add	r0, sp, #12
 8001f00:	f000 f883 	bl	800200a <memset>
  if(uartHandle->Instance==USART2)
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <HAL_UART_MspInit+0x54>)
 8001f06:	6822      	ldr	r2, [r4, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d11b      	bne.n	8001f44 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f0c:	2280      	movs	r2, #128	; 0x80
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <HAL_UART_MspInit+0x58>)
 8001f10:	0292      	lsls	r2, r2, #10
 8001f12:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f16:	4311      	orrs	r1, r2
 8001f18:	61d9      	str	r1, [r3, #28]
 8001f1a:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f1e:	4011      	ands	r1, r2
 8001f20:	9101      	str	r1, [sp, #4]
 8001f22:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f24:	6959      	ldr	r1, [r3, #20]
 8001f26:	4311      	orrs	r1, r2
 8001f28:	6159      	str	r1, [r3, #20]
 8001f2a:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2c:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	401a      	ands	r2, r3
 8001f30:	9202      	str	r2, [sp, #8]
 8001f32:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f34:	230c      	movs	r3, #12
 8001f36:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	3b0a      	subs	r3, #10
 8001f3a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f40:	f7fe fa22 	bl	8000388 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f44:	b008      	add	sp, #32
 8001f46:	bd10      	pop	{r4, pc}
 8001f48:	40004400 	.word	0x40004400
 8001f4c:	40021000 	.word	0x40021000

08001f50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f50:	480d      	ldr	r0, [pc, #52]	; (8001f88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f52:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f54:	480d      	ldr	r0, [pc, #52]	; (8001f8c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f56:	490e      	ldr	r1, [pc, #56]	; (8001f90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f58:	4a0e      	ldr	r2, [pc, #56]	; (8001f94 <LoopForever+0xe>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f5c:	e002      	b.n	8001f64 <LoopCopyDataInit>

08001f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f62:	3304      	adds	r3, #4

08001f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f68:	d3f9      	bcc.n	8001f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6a:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f6c:	4c0b      	ldr	r4, [pc, #44]	; (8001f9c <LoopForever+0x16>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f70:	e001      	b.n	8001f76 <LoopFillZerobss>

08001f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f74:	3204      	adds	r2, #4

08001f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f78:	d3fb      	bcc.n	8001f72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f7a:	f7ff ff9d 	bl	8001eb8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001f7e:	f000 f817 	bl	8001fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f82:	f7ff fee5 	bl	8001d50 <main>

08001f86 <LoopForever>:

LoopForever:
    b LoopForever
 8001f86:	e7fe      	b.n	8001f86 <LoopForever>
  ldr   r0, =_estack
 8001f88:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f90:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f94:	080028f4 	.word	0x080028f4
  ldr r2, =_sbss
 8001f98:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001f9c:	200004a8 	.word	0x200004a8

08001fa0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fa0:	e7fe      	b.n	8001fa0 <ADC1_COMP_IRQHandler>
	...

08001fa4 <__errno>:
 8001fa4:	4b01      	ldr	r3, [pc, #4]	; (8001fac <__errno+0x8>)
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	4770      	bx	lr
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	2000000c 	.word	0x2000000c

08001fb0 <__libc_init_array>:
 8001fb0:	b570      	push	{r4, r5, r6, lr}
 8001fb2:	2600      	movs	r6, #0
 8001fb4:	4d0c      	ldr	r5, [pc, #48]	; (8001fe8 <__libc_init_array+0x38>)
 8001fb6:	4c0d      	ldr	r4, [pc, #52]	; (8001fec <__libc_init_array+0x3c>)
 8001fb8:	1b64      	subs	r4, r4, r5
 8001fba:	10a4      	asrs	r4, r4, #2
 8001fbc:	42a6      	cmp	r6, r4
 8001fbe:	d109      	bne.n	8001fd4 <__libc_init_array+0x24>
 8001fc0:	2600      	movs	r6, #0
 8001fc2:	f000 fc43 	bl	800284c <_init>
 8001fc6:	4d0a      	ldr	r5, [pc, #40]	; (8001ff0 <__libc_init_array+0x40>)
 8001fc8:	4c0a      	ldr	r4, [pc, #40]	; (8001ff4 <__libc_init_array+0x44>)
 8001fca:	1b64      	subs	r4, r4, r5
 8001fcc:	10a4      	asrs	r4, r4, #2
 8001fce:	42a6      	cmp	r6, r4
 8001fd0:	d105      	bne.n	8001fde <__libc_init_array+0x2e>
 8001fd2:	bd70      	pop	{r4, r5, r6, pc}
 8001fd4:	00b3      	lsls	r3, r6, #2
 8001fd6:	58eb      	ldr	r3, [r5, r3]
 8001fd8:	4798      	blx	r3
 8001fda:	3601      	adds	r6, #1
 8001fdc:	e7ee      	b.n	8001fbc <__libc_init_array+0xc>
 8001fde:	00b3      	lsls	r3, r6, #2
 8001fe0:	58eb      	ldr	r3, [r5, r3]
 8001fe2:	4798      	blx	r3
 8001fe4:	3601      	adds	r6, #1
 8001fe6:	e7f2      	b.n	8001fce <__libc_init_array+0x1e>
 8001fe8:	080028ec 	.word	0x080028ec
 8001fec:	080028ec 	.word	0x080028ec
 8001ff0:	080028ec 	.word	0x080028ec
 8001ff4:	080028f0 	.word	0x080028f0

08001ff8 <memcpy>:
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	b510      	push	{r4, lr}
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d100      	bne.n	8002002 <memcpy+0xa>
 8002000:	bd10      	pop	{r4, pc}
 8002002:	5ccc      	ldrb	r4, [r1, r3]
 8002004:	54c4      	strb	r4, [r0, r3]
 8002006:	3301      	adds	r3, #1
 8002008:	e7f8      	b.n	8001ffc <memcpy+0x4>

0800200a <memset>:
 800200a:	0003      	movs	r3, r0
 800200c:	1882      	adds	r2, r0, r2
 800200e:	4293      	cmp	r3, r2
 8002010:	d100      	bne.n	8002014 <memset+0xa>
 8002012:	4770      	bx	lr
 8002014:	7019      	strb	r1, [r3, #0]
 8002016:	3301      	adds	r3, #1
 8002018:	e7f9      	b.n	800200e <memset+0x4>
	...

0800201c <siprintf>:
 800201c:	b40e      	push	{r1, r2, r3}
 800201e:	b510      	push	{r4, lr}
 8002020:	b09d      	sub	sp, #116	; 0x74
 8002022:	a902      	add	r1, sp, #8
 8002024:	9002      	str	r0, [sp, #8]
 8002026:	6108      	str	r0, [r1, #16]
 8002028:	480b      	ldr	r0, [pc, #44]	; (8002058 <siprintf+0x3c>)
 800202a:	2482      	movs	r4, #130	; 0x82
 800202c:	6088      	str	r0, [r1, #8]
 800202e:	6148      	str	r0, [r1, #20]
 8002030:	2001      	movs	r0, #1
 8002032:	4240      	negs	r0, r0
 8002034:	ab1f      	add	r3, sp, #124	; 0x7c
 8002036:	81c8      	strh	r0, [r1, #14]
 8002038:	4808      	ldr	r0, [pc, #32]	; (800205c <siprintf+0x40>)
 800203a:	cb04      	ldmia	r3!, {r2}
 800203c:	00a4      	lsls	r4, r4, #2
 800203e:	6800      	ldr	r0, [r0, #0]
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	818c      	strh	r4, [r1, #12]
 8002044:	f000 f86e 	bl	8002124 <_svfiprintf_r>
 8002048:	2300      	movs	r3, #0
 800204a:	9a02      	ldr	r2, [sp, #8]
 800204c:	7013      	strb	r3, [r2, #0]
 800204e:	b01d      	add	sp, #116	; 0x74
 8002050:	bc10      	pop	{r4}
 8002052:	bc08      	pop	{r3}
 8002054:	b003      	add	sp, #12
 8002056:	4718      	bx	r3
 8002058:	7fffffff 	.word	0x7fffffff
 800205c:	2000000c 	.word	0x2000000c

08002060 <__ssputs_r>:
 8002060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002062:	688e      	ldr	r6, [r1, #8]
 8002064:	b085      	sub	sp, #20
 8002066:	0007      	movs	r7, r0
 8002068:	000c      	movs	r4, r1
 800206a:	9203      	str	r2, [sp, #12]
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	429e      	cmp	r6, r3
 8002070:	d839      	bhi.n	80020e6 <__ssputs_r+0x86>
 8002072:	2390      	movs	r3, #144	; 0x90
 8002074:	898a      	ldrh	r2, [r1, #12]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	421a      	tst	r2, r3
 800207a:	d034      	beq.n	80020e6 <__ssputs_r+0x86>
 800207c:	2503      	movs	r5, #3
 800207e:	6909      	ldr	r1, [r1, #16]
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	1a5b      	subs	r3, r3, r1
 8002084:	9302      	str	r3, [sp, #8]
 8002086:	6963      	ldr	r3, [r4, #20]
 8002088:	9802      	ldr	r0, [sp, #8]
 800208a:	435d      	muls	r5, r3
 800208c:	0feb      	lsrs	r3, r5, #31
 800208e:	195d      	adds	r5, r3, r5
 8002090:	9b01      	ldr	r3, [sp, #4]
 8002092:	106d      	asrs	r5, r5, #1
 8002094:	3301      	adds	r3, #1
 8002096:	181b      	adds	r3, r3, r0
 8002098:	42ab      	cmp	r3, r5
 800209a:	d900      	bls.n	800209e <__ssputs_r+0x3e>
 800209c:	001d      	movs	r5, r3
 800209e:	0553      	lsls	r3, r2, #21
 80020a0:	d532      	bpl.n	8002108 <__ssputs_r+0xa8>
 80020a2:	0029      	movs	r1, r5
 80020a4:	0038      	movs	r0, r7
 80020a6:	f000 fb31 	bl	800270c <_malloc_r>
 80020aa:	1e06      	subs	r6, r0, #0
 80020ac:	d109      	bne.n	80020c2 <__ssputs_r+0x62>
 80020ae:	230c      	movs	r3, #12
 80020b0:	603b      	str	r3, [r7, #0]
 80020b2:	2340      	movs	r3, #64	; 0x40
 80020b4:	2001      	movs	r0, #1
 80020b6:	89a2      	ldrh	r2, [r4, #12]
 80020b8:	4240      	negs	r0, r0
 80020ba:	4313      	orrs	r3, r2
 80020bc:	81a3      	strh	r3, [r4, #12]
 80020be:	b005      	add	sp, #20
 80020c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c2:	9a02      	ldr	r2, [sp, #8]
 80020c4:	6921      	ldr	r1, [r4, #16]
 80020c6:	f7ff ff97 	bl	8001ff8 <memcpy>
 80020ca:	89a3      	ldrh	r3, [r4, #12]
 80020cc:	4a14      	ldr	r2, [pc, #80]	; (8002120 <__ssputs_r+0xc0>)
 80020ce:	401a      	ands	r2, r3
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	4313      	orrs	r3, r2
 80020d4:	81a3      	strh	r3, [r4, #12]
 80020d6:	9b02      	ldr	r3, [sp, #8]
 80020d8:	6126      	str	r6, [r4, #16]
 80020da:	18f6      	adds	r6, r6, r3
 80020dc:	6026      	str	r6, [r4, #0]
 80020de:	6165      	str	r5, [r4, #20]
 80020e0:	9e01      	ldr	r6, [sp, #4]
 80020e2:	1aed      	subs	r5, r5, r3
 80020e4:	60a5      	str	r5, [r4, #8]
 80020e6:	9b01      	ldr	r3, [sp, #4]
 80020e8:	42b3      	cmp	r3, r6
 80020ea:	d200      	bcs.n	80020ee <__ssputs_r+0x8e>
 80020ec:	001e      	movs	r6, r3
 80020ee:	0032      	movs	r2, r6
 80020f0:	9903      	ldr	r1, [sp, #12]
 80020f2:	6820      	ldr	r0, [r4, #0]
 80020f4:	f000 faad 	bl	8002652 <memmove>
 80020f8:	68a3      	ldr	r3, [r4, #8]
 80020fa:	2000      	movs	r0, #0
 80020fc:	1b9b      	subs	r3, r3, r6
 80020fe:	60a3      	str	r3, [r4, #8]
 8002100:	6823      	ldr	r3, [r4, #0]
 8002102:	199e      	adds	r6, r3, r6
 8002104:	6026      	str	r6, [r4, #0]
 8002106:	e7da      	b.n	80020be <__ssputs_r+0x5e>
 8002108:	002a      	movs	r2, r5
 800210a:	0038      	movs	r0, r7
 800210c:	f000 fb5c 	bl	80027c8 <_realloc_r>
 8002110:	1e06      	subs	r6, r0, #0
 8002112:	d1e0      	bne.n	80020d6 <__ssputs_r+0x76>
 8002114:	6921      	ldr	r1, [r4, #16]
 8002116:	0038      	movs	r0, r7
 8002118:	f000 faae 	bl	8002678 <_free_r>
 800211c:	e7c7      	b.n	80020ae <__ssputs_r+0x4e>
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	fffffb7f 	.word	0xfffffb7f

08002124 <_svfiprintf_r>:
 8002124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002126:	b09f      	sub	sp, #124	; 0x7c
 8002128:	9002      	str	r0, [sp, #8]
 800212a:	9305      	str	r3, [sp, #20]
 800212c:	898b      	ldrh	r3, [r1, #12]
 800212e:	000f      	movs	r7, r1
 8002130:	0016      	movs	r6, r2
 8002132:	061b      	lsls	r3, r3, #24
 8002134:	d511      	bpl.n	800215a <_svfiprintf_r+0x36>
 8002136:	690b      	ldr	r3, [r1, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10e      	bne.n	800215a <_svfiprintf_r+0x36>
 800213c:	2140      	movs	r1, #64	; 0x40
 800213e:	f000 fae5 	bl	800270c <_malloc_r>
 8002142:	6038      	str	r0, [r7, #0]
 8002144:	6138      	str	r0, [r7, #16]
 8002146:	2800      	cmp	r0, #0
 8002148:	d105      	bne.n	8002156 <_svfiprintf_r+0x32>
 800214a:	230c      	movs	r3, #12
 800214c:	9a02      	ldr	r2, [sp, #8]
 800214e:	3801      	subs	r0, #1
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	b01f      	add	sp, #124	; 0x7c
 8002154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002156:	2340      	movs	r3, #64	; 0x40
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	2300      	movs	r3, #0
 800215c:	ad06      	add	r5, sp, #24
 800215e:	616b      	str	r3, [r5, #20]
 8002160:	3320      	adds	r3, #32
 8002162:	766b      	strb	r3, [r5, #25]
 8002164:	3310      	adds	r3, #16
 8002166:	76ab      	strb	r3, [r5, #26]
 8002168:	0034      	movs	r4, r6
 800216a:	7823      	ldrb	r3, [r4, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d147      	bne.n	8002200 <_svfiprintf_r+0xdc>
 8002170:	1ba3      	subs	r3, r4, r6
 8002172:	9304      	str	r3, [sp, #16]
 8002174:	d00d      	beq.n	8002192 <_svfiprintf_r+0x6e>
 8002176:	1ba3      	subs	r3, r4, r6
 8002178:	0032      	movs	r2, r6
 800217a:	0039      	movs	r1, r7
 800217c:	9802      	ldr	r0, [sp, #8]
 800217e:	f7ff ff6f 	bl	8002060 <__ssputs_r>
 8002182:	1c43      	adds	r3, r0, #1
 8002184:	d100      	bne.n	8002188 <_svfiprintf_r+0x64>
 8002186:	e0b5      	b.n	80022f4 <_svfiprintf_r+0x1d0>
 8002188:	696a      	ldr	r2, [r5, #20]
 800218a:	9b04      	ldr	r3, [sp, #16]
 800218c:	4694      	mov	ip, r2
 800218e:	4463      	add	r3, ip
 8002190:	616b      	str	r3, [r5, #20]
 8002192:	7823      	ldrb	r3, [r4, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d100      	bne.n	800219a <_svfiprintf_r+0x76>
 8002198:	e0ac      	b.n	80022f4 <_svfiprintf_r+0x1d0>
 800219a:	2201      	movs	r2, #1
 800219c:	2300      	movs	r3, #0
 800219e:	4252      	negs	r2, r2
 80021a0:	606a      	str	r2, [r5, #4]
 80021a2:	a902      	add	r1, sp, #8
 80021a4:	3254      	adds	r2, #84	; 0x54
 80021a6:	1852      	adds	r2, r2, r1
 80021a8:	3401      	adds	r4, #1
 80021aa:	602b      	str	r3, [r5, #0]
 80021ac:	60eb      	str	r3, [r5, #12]
 80021ae:	60ab      	str	r3, [r5, #8]
 80021b0:	7013      	strb	r3, [r2, #0]
 80021b2:	65ab      	str	r3, [r5, #88]	; 0x58
 80021b4:	4e58      	ldr	r6, [pc, #352]	; (8002318 <_svfiprintf_r+0x1f4>)
 80021b6:	2205      	movs	r2, #5
 80021b8:	7821      	ldrb	r1, [r4, #0]
 80021ba:	0030      	movs	r0, r6
 80021bc:	f000 fa3e 	bl	800263c <memchr>
 80021c0:	1c62      	adds	r2, r4, #1
 80021c2:	2800      	cmp	r0, #0
 80021c4:	d120      	bne.n	8002208 <_svfiprintf_r+0xe4>
 80021c6:	6829      	ldr	r1, [r5, #0]
 80021c8:	06cb      	lsls	r3, r1, #27
 80021ca:	d504      	bpl.n	80021d6 <_svfiprintf_r+0xb2>
 80021cc:	2353      	movs	r3, #83	; 0x53
 80021ce:	ae02      	add	r6, sp, #8
 80021d0:	3020      	adds	r0, #32
 80021d2:	199b      	adds	r3, r3, r6
 80021d4:	7018      	strb	r0, [r3, #0]
 80021d6:	070b      	lsls	r3, r1, #28
 80021d8:	d504      	bpl.n	80021e4 <_svfiprintf_r+0xc0>
 80021da:	2353      	movs	r3, #83	; 0x53
 80021dc:	202b      	movs	r0, #43	; 0x2b
 80021de:	ae02      	add	r6, sp, #8
 80021e0:	199b      	adds	r3, r3, r6
 80021e2:	7018      	strb	r0, [r3, #0]
 80021e4:	7823      	ldrb	r3, [r4, #0]
 80021e6:	2b2a      	cmp	r3, #42	; 0x2a
 80021e8:	d016      	beq.n	8002218 <_svfiprintf_r+0xf4>
 80021ea:	2000      	movs	r0, #0
 80021ec:	210a      	movs	r1, #10
 80021ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021f0:	7822      	ldrb	r2, [r4, #0]
 80021f2:	3a30      	subs	r2, #48	; 0x30
 80021f4:	2a09      	cmp	r2, #9
 80021f6:	d955      	bls.n	80022a4 <_svfiprintf_r+0x180>
 80021f8:	2800      	cmp	r0, #0
 80021fa:	d015      	beq.n	8002228 <_svfiprintf_r+0x104>
 80021fc:	9309      	str	r3, [sp, #36]	; 0x24
 80021fe:	e013      	b.n	8002228 <_svfiprintf_r+0x104>
 8002200:	2b25      	cmp	r3, #37	; 0x25
 8002202:	d0b5      	beq.n	8002170 <_svfiprintf_r+0x4c>
 8002204:	3401      	adds	r4, #1
 8002206:	e7b0      	b.n	800216a <_svfiprintf_r+0x46>
 8002208:	2301      	movs	r3, #1
 800220a:	1b80      	subs	r0, r0, r6
 800220c:	4083      	lsls	r3, r0
 800220e:	6829      	ldr	r1, [r5, #0]
 8002210:	0014      	movs	r4, r2
 8002212:	430b      	orrs	r3, r1
 8002214:	602b      	str	r3, [r5, #0]
 8002216:	e7cd      	b.n	80021b4 <_svfiprintf_r+0x90>
 8002218:	9b05      	ldr	r3, [sp, #20]
 800221a:	1d18      	adds	r0, r3, #4
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	9005      	str	r0, [sp, #20]
 8002220:	2b00      	cmp	r3, #0
 8002222:	db39      	blt.n	8002298 <_svfiprintf_r+0x174>
 8002224:	9309      	str	r3, [sp, #36]	; 0x24
 8002226:	0014      	movs	r4, r2
 8002228:	7823      	ldrb	r3, [r4, #0]
 800222a:	2b2e      	cmp	r3, #46	; 0x2e
 800222c:	d10b      	bne.n	8002246 <_svfiprintf_r+0x122>
 800222e:	7863      	ldrb	r3, [r4, #1]
 8002230:	1c62      	adds	r2, r4, #1
 8002232:	2b2a      	cmp	r3, #42	; 0x2a
 8002234:	d13e      	bne.n	80022b4 <_svfiprintf_r+0x190>
 8002236:	9b05      	ldr	r3, [sp, #20]
 8002238:	3402      	adds	r4, #2
 800223a:	1d1a      	adds	r2, r3, #4
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	9205      	str	r2, [sp, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	db34      	blt.n	80022ae <_svfiprintf_r+0x18a>
 8002244:	9307      	str	r3, [sp, #28]
 8002246:	4e35      	ldr	r6, [pc, #212]	; (800231c <_svfiprintf_r+0x1f8>)
 8002248:	7821      	ldrb	r1, [r4, #0]
 800224a:	2203      	movs	r2, #3
 800224c:	0030      	movs	r0, r6
 800224e:	f000 f9f5 	bl	800263c <memchr>
 8002252:	2800      	cmp	r0, #0
 8002254:	d006      	beq.n	8002264 <_svfiprintf_r+0x140>
 8002256:	2340      	movs	r3, #64	; 0x40
 8002258:	1b80      	subs	r0, r0, r6
 800225a:	4083      	lsls	r3, r0
 800225c:	682a      	ldr	r2, [r5, #0]
 800225e:	3401      	adds	r4, #1
 8002260:	4313      	orrs	r3, r2
 8002262:	602b      	str	r3, [r5, #0]
 8002264:	7821      	ldrb	r1, [r4, #0]
 8002266:	2206      	movs	r2, #6
 8002268:	482d      	ldr	r0, [pc, #180]	; (8002320 <_svfiprintf_r+0x1fc>)
 800226a:	1c66      	adds	r6, r4, #1
 800226c:	7629      	strb	r1, [r5, #24]
 800226e:	f000 f9e5 	bl	800263c <memchr>
 8002272:	2800      	cmp	r0, #0
 8002274:	d046      	beq.n	8002304 <_svfiprintf_r+0x1e0>
 8002276:	4b2b      	ldr	r3, [pc, #172]	; (8002324 <_svfiprintf_r+0x200>)
 8002278:	2b00      	cmp	r3, #0
 800227a:	d12f      	bne.n	80022dc <_svfiprintf_r+0x1b8>
 800227c:	6829      	ldr	r1, [r5, #0]
 800227e:	9b05      	ldr	r3, [sp, #20]
 8002280:	2207      	movs	r2, #7
 8002282:	05c9      	lsls	r1, r1, #23
 8002284:	d528      	bpl.n	80022d8 <_svfiprintf_r+0x1b4>
 8002286:	189b      	adds	r3, r3, r2
 8002288:	4393      	bics	r3, r2
 800228a:	3308      	adds	r3, #8
 800228c:	9305      	str	r3, [sp, #20]
 800228e:	696b      	ldr	r3, [r5, #20]
 8002290:	9a03      	ldr	r2, [sp, #12]
 8002292:	189b      	adds	r3, r3, r2
 8002294:	616b      	str	r3, [r5, #20]
 8002296:	e767      	b.n	8002168 <_svfiprintf_r+0x44>
 8002298:	425b      	negs	r3, r3
 800229a:	60eb      	str	r3, [r5, #12]
 800229c:	2302      	movs	r3, #2
 800229e:	430b      	orrs	r3, r1
 80022a0:	602b      	str	r3, [r5, #0]
 80022a2:	e7c0      	b.n	8002226 <_svfiprintf_r+0x102>
 80022a4:	434b      	muls	r3, r1
 80022a6:	3401      	adds	r4, #1
 80022a8:	189b      	adds	r3, r3, r2
 80022aa:	2001      	movs	r0, #1
 80022ac:	e7a0      	b.n	80021f0 <_svfiprintf_r+0xcc>
 80022ae:	2301      	movs	r3, #1
 80022b0:	425b      	negs	r3, r3
 80022b2:	e7c7      	b.n	8002244 <_svfiprintf_r+0x120>
 80022b4:	2300      	movs	r3, #0
 80022b6:	0014      	movs	r4, r2
 80022b8:	200a      	movs	r0, #10
 80022ba:	001a      	movs	r2, r3
 80022bc:	606b      	str	r3, [r5, #4]
 80022be:	7821      	ldrb	r1, [r4, #0]
 80022c0:	3930      	subs	r1, #48	; 0x30
 80022c2:	2909      	cmp	r1, #9
 80022c4:	d903      	bls.n	80022ce <_svfiprintf_r+0x1aa>
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0bd      	beq.n	8002246 <_svfiprintf_r+0x122>
 80022ca:	9207      	str	r2, [sp, #28]
 80022cc:	e7bb      	b.n	8002246 <_svfiprintf_r+0x122>
 80022ce:	4342      	muls	r2, r0
 80022d0:	3401      	adds	r4, #1
 80022d2:	1852      	adds	r2, r2, r1
 80022d4:	2301      	movs	r3, #1
 80022d6:	e7f2      	b.n	80022be <_svfiprintf_r+0x19a>
 80022d8:	3307      	adds	r3, #7
 80022da:	e7d5      	b.n	8002288 <_svfiprintf_r+0x164>
 80022dc:	ab05      	add	r3, sp, #20
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	003a      	movs	r2, r7
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <_svfiprintf_r+0x204>)
 80022e4:	0029      	movs	r1, r5
 80022e6:	9802      	ldr	r0, [sp, #8]
 80022e8:	e000      	b.n	80022ec <_svfiprintf_r+0x1c8>
 80022ea:	bf00      	nop
 80022ec:	9003      	str	r0, [sp, #12]
 80022ee:	9b03      	ldr	r3, [sp, #12]
 80022f0:	3301      	adds	r3, #1
 80022f2:	d1cc      	bne.n	800228e <_svfiprintf_r+0x16a>
 80022f4:	89bb      	ldrh	r3, [r7, #12]
 80022f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80022f8:	065b      	lsls	r3, r3, #25
 80022fa:	d400      	bmi.n	80022fe <_svfiprintf_r+0x1da>
 80022fc:	e729      	b.n	8002152 <_svfiprintf_r+0x2e>
 80022fe:	2001      	movs	r0, #1
 8002300:	4240      	negs	r0, r0
 8002302:	e726      	b.n	8002152 <_svfiprintf_r+0x2e>
 8002304:	ab05      	add	r3, sp, #20
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	003a      	movs	r2, r7
 800230a:	4b07      	ldr	r3, [pc, #28]	; (8002328 <_svfiprintf_r+0x204>)
 800230c:	0029      	movs	r1, r5
 800230e:	9802      	ldr	r0, [sp, #8]
 8002310:	f000 f87a 	bl	8002408 <_printf_i>
 8002314:	e7ea      	b.n	80022ec <_svfiprintf_r+0x1c8>
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	080028b9 	.word	0x080028b9
 800231c:	080028bf 	.word	0x080028bf
 8002320:	080028c3 	.word	0x080028c3
 8002324:	00000000 	.word	0x00000000
 8002328:	08002061 	.word	0x08002061

0800232c <_printf_common>:
 800232c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800232e:	0015      	movs	r5, r2
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	688a      	ldr	r2, [r1, #8]
 8002334:	690b      	ldr	r3, [r1, #16]
 8002336:	9000      	str	r0, [sp, #0]
 8002338:	000c      	movs	r4, r1
 800233a:	4293      	cmp	r3, r2
 800233c:	da00      	bge.n	8002340 <_printf_common+0x14>
 800233e:	0013      	movs	r3, r2
 8002340:	0022      	movs	r2, r4
 8002342:	602b      	str	r3, [r5, #0]
 8002344:	3243      	adds	r2, #67	; 0x43
 8002346:	7812      	ldrb	r2, [r2, #0]
 8002348:	2a00      	cmp	r2, #0
 800234a:	d001      	beq.n	8002350 <_printf_common+0x24>
 800234c:	3301      	adds	r3, #1
 800234e:	602b      	str	r3, [r5, #0]
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	069b      	lsls	r3, r3, #26
 8002354:	d502      	bpl.n	800235c <_printf_common+0x30>
 8002356:	682b      	ldr	r3, [r5, #0]
 8002358:	3302      	adds	r3, #2
 800235a:	602b      	str	r3, [r5, #0]
 800235c:	2706      	movs	r7, #6
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	401f      	ands	r7, r3
 8002362:	d027      	beq.n	80023b4 <_printf_common+0x88>
 8002364:	0023      	movs	r3, r4
 8002366:	3343      	adds	r3, #67	; 0x43
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	1e5a      	subs	r2, r3, #1
 800236c:	4193      	sbcs	r3, r2
 800236e:	6822      	ldr	r2, [r4, #0]
 8002370:	0692      	lsls	r2, r2, #26
 8002372:	d430      	bmi.n	80023d6 <_printf_common+0xaa>
 8002374:	0022      	movs	r2, r4
 8002376:	9901      	ldr	r1, [sp, #4]
 8002378:	3243      	adds	r2, #67	; 0x43
 800237a:	9800      	ldr	r0, [sp, #0]
 800237c:	9e08      	ldr	r6, [sp, #32]
 800237e:	47b0      	blx	r6
 8002380:	1c43      	adds	r3, r0, #1
 8002382:	d025      	beq.n	80023d0 <_printf_common+0xa4>
 8002384:	2306      	movs	r3, #6
 8002386:	6820      	ldr	r0, [r4, #0]
 8002388:	682a      	ldr	r2, [r5, #0]
 800238a:	68e1      	ldr	r1, [r4, #12]
 800238c:	4003      	ands	r3, r0
 800238e:	2500      	movs	r5, #0
 8002390:	2b04      	cmp	r3, #4
 8002392:	d103      	bne.n	800239c <_printf_common+0x70>
 8002394:	1a8d      	subs	r5, r1, r2
 8002396:	43eb      	mvns	r3, r5
 8002398:	17db      	asrs	r3, r3, #31
 800239a:	401d      	ands	r5, r3
 800239c:	68a3      	ldr	r3, [r4, #8]
 800239e:	6922      	ldr	r2, [r4, #16]
 80023a0:	4293      	cmp	r3, r2
 80023a2:	dd01      	ble.n	80023a8 <_printf_common+0x7c>
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	18ed      	adds	r5, r5, r3
 80023a8:	2700      	movs	r7, #0
 80023aa:	42bd      	cmp	r5, r7
 80023ac:	d120      	bne.n	80023f0 <_printf_common+0xc4>
 80023ae:	2000      	movs	r0, #0
 80023b0:	e010      	b.n	80023d4 <_printf_common+0xa8>
 80023b2:	3701      	adds	r7, #1
 80023b4:	68e3      	ldr	r3, [r4, #12]
 80023b6:	682a      	ldr	r2, [r5, #0]
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	429f      	cmp	r7, r3
 80023bc:	dad2      	bge.n	8002364 <_printf_common+0x38>
 80023be:	0022      	movs	r2, r4
 80023c0:	2301      	movs	r3, #1
 80023c2:	3219      	adds	r2, #25
 80023c4:	9901      	ldr	r1, [sp, #4]
 80023c6:	9800      	ldr	r0, [sp, #0]
 80023c8:	9e08      	ldr	r6, [sp, #32]
 80023ca:	47b0      	blx	r6
 80023cc:	1c43      	adds	r3, r0, #1
 80023ce:	d1f0      	bne.n	80023b2 <_printf_common+0x86>
 80023d0:	2001      	movs	r0, #1
 80023d2:	4240      	negs	r0, r0
 80023d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80023d6:	2030      	movs	r0, #48	; 0x30
 80023d8:	18e1      	adds	r1, r4, r3
 80023da:	3143      	adds	r1, #67	; 0x43
 80023dc:	7008      	strb	r0, [r1, #0]
 80023de:	0021      	movs	r1, r4
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	3145      	adds	r1, #69	; 0x45
 80023e4:	7809      	ldrb	r1, [r1, #0]
 80023e6:	18a2      	adds	r2, r4, r2
 80023e8:	3243      	adds	r2, #67	; 0x43
 80023ea:	3302      	adds	r3, #2
 80023ec:	7011      	strb	r1, [r2, #0]
 80023ee:	e7c1      	b.n	8002374 <_printf_common+0x48>
 80023f0:	0022      	movs	r2, r4
 80023f2:	2301      	movs	r3, #1
 80023f4:	321a      	adds	r2, #26
 80023f6:	9901      	ldr	r1, [sp, #4]
 80023f8:	9800      	ldr	r0, [sp, #0]
 80023fa:	9e08      	ldr	r6, [sp, #32]
 80023fc:	47b0      	blx	r6
 80023fe:	1c43      	adds	r3, r0, #1
 8002400:	d0e6      	beq.n	80023d0 <_printf_common+0xa4>
 8002402:	3701      	adds	r7, #1
 8002404:	e7d1      	b.n	80023aa <_printf_common+0x7e>
	...

08002408 <_printf_i>:
 8002408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800240a:	b08b      	sub	sp, #44	; 0x2c
 800240c:	9206      	str	r2, [sp, #24]
 800240e:	000a      	movs	r2, r1
 8002410:	3243      	adds	r2, #67	; 0x43
 8002412:	9307      	str	r3, [sp, #28]
 8002414:	9005      	str	r0, [sp, #20]
 8002416:	9204      	str	r2, [sp, #16]
 8002418:	7e0a      	ldrb	r2, [r1, #24]
 800241a:	000c      	movs	r4, r1
 800241c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800241e:	2a6e      	cmp	r2, #110	; 0x6e
 8002420:	d100      	bne.n	8002424 <_printf_i+0x1c>
 8002422:	e08f      	b.n	8002544 <_printf_i+0x13c>
 8002424:	d817      	bhi.n	8002456 <_printf_i+0x4e>
 8002426:	2a63      	cmp	r2, #99	; 0x63
 8002428:	d02c      	beq.n	8002484 <_printf_i+0x7c>
 800242a:	d808      	bhi.n	800243e <_printf_i+0x36>
 800242c:	2a00      	cmp	r2, #0
 800242e:	d100      	bne.n	8002432 <_printf_i+0x2a>
 8002430:	e099      	b.n	8002566 <_printf_i+0x15e>
 8002432:	2a58      	cmp	r2, #88	; 0x58
 8002434:	d054      	beq.n	80024e0 <_printf_i+0xd8>
 8002436:	0026      	movs	r6, r4
 8002438:	3642      	adds	r6, #66	; 0x42
 800243a:	7032      	strb	r2, [r6, #0]
 800243c:	e029      	b.n	8002492 <_printf_i+0x8a>
 800243e:	2a64      	cmp	r2, #100	; 0x64
 8002440:	d001      	beq.n	8002446 <_printf_i+0x3e>
 8002442:	2a69      	cmp	r2, #105	; 0x69
 8002444:	d1f7      	bne.n	8002436 <_printf_i+0x2e>
 8002446:	6821      	ldr	r1, [r4, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	0608      	lsls	r0, r1, #24
 800244c:	d523      	bpl.n	8002496 <_printf_i+0x8e>
 800244e:	1d11      	adds	r1, r2, #4
 8002450:	6019      	str	r1, [r3, #0]
 8002452:	6815      	ldr	r5, [r2, #0]
 8002454:	e025      	b.n	80024a2 <_printf_i+0x9a>
 8002456:	2a73      	cmp	r2, #115	; 0x73
 8002458:	d100      	bne.n	800245c <_printf_i+0x54>
 800245a:	e088      	b.n	800256e <_printf_i+0x166>
 800245c:	d808      	bhi.n	8002470 <_printf_i+0x68>
 800245e:	2a6f      	cmp	r2, #111	; 0x6f
 8002460:	d029      	beq.n	80024b6 <_printf_i+0xae>
 8002462:	2a70      	cmp	r2, #112	; 0x70
 8002464:	d1e7      	bne.n	8002436 <_printf_i+0x2e>
 8002466:	2220      	movs	r2, #32
 8002468:	6809      	ldr	r1, [r1, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	6022      	str	r2, [r4, #0]
 800246e:	e003      	b.n	8002478 <_printf_i+0x70>
 8002470:	2a75      	cmp	r2, #117	; 0x75
 8002472:	d020      	beq.n	80024b6 <_printf_i+0xae>
 8002474:	2a78      	cmp	r2, #120	; 0x78
 8002476:	d1de      	bne.n	8002436 <_printf_i+0x2e>
 8002478:	0022      	movs	r2, r4
 800247a:	2178      	movs	r1, #120	; 0x78
 800247c:	3245      	adds	r2, #69	; 0x45
 800247e:	7011      	strb	r1, [r2, #0]
 8002480:	4a6c      	ldr	r2, [pc, #432]	; (8002634 <_printf_i+0x22c>)
 8002482:	e030      	b.n	80024e6 <_printf_i+0xde>
 8002484:	000e      	movs	r6, r1
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	3642      	adds	r6, #66	; 0x42
 800248a:	1d11      	adds	r1, r2, #4
 800248c:	6019      	str	r1, [r3, #0]
 800248e:	6813      	ldr	r3, [r2, #0]
 8002490:	7033      	strb	r3, [r6, #0]
 8002492:	2301      	movs	r3, #1
 8002494:	e079      	b.n	800258a <_printf_i+0x182>
 8002496:	0649      	lsls	r1, r1, #25
 8002498:	d5d9      	bpl.n	800244e <_printf_i+0x46>
 800249a:	1d11      	adds	r1, r2, #4
 800249c:	6019      	str	r1, [r3, #0]
 800249e:	2300      	movs	r3, #0
 80024a0:	5ed5      	ldrsh	r5, [r2, r3]
 80024a2:	2d00      	cmp	r5, #0
 80024a4:	da03      	bge.n	80024ae <_printf_i+0xa6>
 80024a6:	232d      	movs	r3, #45	; 0x2d
 80024a8:	9a04      	ldr	r2, [sp, #16]
 80024aa:	426d      	negs	r5, r5
 80024ac:	7013      	strb	r3, [r2, #0]
 80024ae:	4b62      	ldr	r3, [pc, #392]	; (8002638 <_printf_i+0x230>)
 80024b0:	270a      	movs	r7, #10
 80024b2:	9303      	str	r3, [sp, #12]
 80024b4:	e02f      	b.n	8002516 <_printf_i+0x10e>
 80024b6:	6820      	ldr	r0, [r4, #0]
 80024b8:	6819      	ldr	r1, [r3, #0]
 80024ba:	0605      	lsls	r5, r0, #24
 80024bc:	d503      	bpl.n	80024c6 <_printf_i+0xbe>
 80024be:	1d08      	adds	r0, r1, #4
 80024c0:	6018      	str	r0, [r3, #0]
 80024c2:	680d      	ldr	r5, [r1, #0]
 80024c4:	e005      	b.n	80024d2 <_printf_i+0xca>
 80024c6:	0640      	lsls	r0, r0, #25
 80024c8:	d5f9      	bpl.n	80024be <_printf_i+0xb6>
 80024ca:	680d      	ldr	r5, [r1, #0]
 80024cc:	1d08      	adds	r0, r1, #4
 80024ce:	6018      	str	r0, [r3, #0]
 80024d0:	b2ad      	uxth	r5, r5
 80024d2:	4b59      	ldr	r3, [pc, #356]	; (8002638 <_printf_i+0x230>)
 80024d4:	2708      	movs	r7, #8
 80024d6:	9303      	str	r3, [sp, #12]
 80024d8:	2a6f      	cmp	r2, #111	; 0x6f
 80024da:	d018      	beq.n	800250e <_printf_i+0x106>
 80024dc:	270a      	movs	r7, #10
 80024de:	e016      	b.n	800250e <_printf_i+0x106>
 80024e0:	3145      	adds	r1, #69	; 0x45
 80024e2:	700a      	strb	r2, [r1, #0]
 80024e4:	4a54      	ldr	r2, [pc, #336]	; (8002638 <_printf_i+0x230>)
 80024e6:	9203      	str	r2, [sp, #12]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	6821      	ldr	r1, [r4, #0]
 80024ec:	1d10      	adds	r0, r2, #4
 80024ee:	6018      	str	r0, [r3, #0]
 80024f0:	6815      	ldr	r5, [r2, #0]
 80024f2:	0608      	lsls	r0, r1, #24
 80024f4:	d522      	bpl.n	800253c <_printf_i+0x134>
 80024f6:	07cb      	lsls	r3, r1, #31
 80024f8:	d502      	bpl.n	8002500 <_printf_i+0xf8>
 80024fa:	2320      	movs	r3, #32
 80024fc:	4319      	orrs	r1, r3
 80024fe:	6021      	str	r1, [r4, #0]
 8002500:	2710      	movs	r7, #16
 8002502:	2d00      	cmp	r5, #0
 8002504:	d103      	bne.n	800250e <_printf_i+0x106>
 8002506:	2320      	movs	r3, #32
 8002508:	6822      	ldr	r2, [r4, #0]
 800250a:	439a      	bics	r2, r3
 800250c:	6022      	str	r2, [r4, #0]
 800250e:	0023      	movs	r3, r4
 8002510:	2200      	movs	r2, #0
 8002512:	3343      	adds	r3, #67	; 0x43
 8002514:	701a      	strb	r2, [r3, #0]
 8002516:	6863      	ldr	r3, [r4, #4]
 8002518:	60a3      	str	r3, [r4, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	db5c      	blt.n	80025d8 <_printf_i+0x1d0>
 800251e:	2204      	movs	r2, #4
 8002520:	6821      	ldr	r1, [r4, #0]
 8002522:	4391      	bics	r1, r2
 8002524:	6021      	str	r1, [r4, #0]
 8002526:	2d00      	cmp	r5, #0
 8002528:	d158      	bne.n	80025dc <_printf_i+0x1d4>
 800252a:	9e04      	ldr	r6, [sp, #16]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d064      	beq.n	80025fa <_printf_i+0x1f2>
 8002530:	0026      	movs	r6, r4
 8002532:	9b03      	ldr	r3, [sp, #12]
 8002534:	3642      	adds	r6, #66	; 0x42
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	7033      	strb	r3, [r6, #0]
 800253a:	e05e      	b.n	80025fa <_printf_i+0x1f2>
 800253c:	0648      	lsls	r0, r1, #25
 800253e:	d5da      	bpl.n	80024f6 <_printf_i+0xee>
 8002540:	b2ad      	uxth	r5, r5
 8002542:	e7d8      	b.n	80024f6 <_printf_i+0xee>
 8002544:	6809      	ldr	r1, [r1, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	0608      	lsls	r0, r1, #24
 800254a:	d505      	bpl.n	8002558 <_printf_i+0x150>
 800254c:	1d11      	adds	r1, r2, #4
 800254e:	6019      	str	r1, [r3, #0]
 8002550:	6813      	ldr	r3, [r2, #0]
 8002552:	6962      	ldr	r2, [r4, #20]
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	e006      	b.n	8002566 <_printf_i+0x15e>
 8002558:	0649      	lsls	r1, r1, #25
 800255a:	d5f7      	bpl.n	800254c <_printf_i+0x144>
 800255c:	1d11      	adds	r1, r2, #4
 800255e:	6019      	str	r1, [r3, #0]
 8002560:	6813      	ldr	r3, [r2, #0]
 8002562:	8aa2      	ldrh	r2, [r4, #20]
 8002564:	801a      	strh	r2, [r3, #0]
 8002566:	2300      	movs	r3, #0
 8002568:	9e04      	ldr	r6, [sp, #16]
 800256a:	6123      	str	r3, [r4, #16]
 800256c:	e054      	b.n	8002618 <_printf_i+0x210>
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	1d11      	adds	r1, r2, #4
 8002572:	6019      	str	r1, [r3, #0]
 8002574:	6816      	ldr	r6, [r2, #0]
 8002576:	2100      	movs	r1, #0
 8002578:	6862      	ldr	r2, [r4, #4]
 800257a:	0030      	movs	r0, r6
 800257c:	f000 f85e 	bl	800263c <memchr>
 8002580:	2800      	cmp	r0, #0
 8002582:	d001      	beq.n	8002588 <_printf_i+0x180>
 8002584:	1b80      	subs	r0, r0, r6
 8002586:	6060      	str	r0, [r4, #4]
 8002588:	6863      	ldr	r3, [r4, #4]
 800258a:	6123      	str	r3, [r4, #16]
 800258c:	2300      	movs	r3, #0
 800258e:	9a04      	ldr	r2, [sp, #16]
 8002590:	7013      	strb	r3, [r2, #0]
 8002592:	e041      	b.n	8002618 <_printf_i+0x210>
 8002594:	6923      	ldr	r3, [r4, #16]
 8002596:	0032      	movs	r2, r6
 8002598:	9906      	ldr	r1, [sp, #24]
 800259a:	9805      	ldr	r0, [sp, #20]
 800259c:	9d07      	ldr	r5, [sp, #28]
 800259e:	47a8      	blx	r5
 80025a0:	1c43      	adds	r3, r0, #1
 80025a2:	d043      	beq.n	800262c <_printf_i+0x224>
 80025a4:	6823      	ldr	r3, [r4, #0]
 80025a6:	2500      	movs	r5, #0
 80025a8:	079b      	lsls	r3, r3, #30
 80025aa:	d40f      	bmi.n	80025cc <_printf_i+0x1c4>
 80025ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025ae:	68e0      	ldr	r0, [r4, #12]
 80025b0:	4298      	cmp	r0, r3
 80025b2:	da3d      	bge.n	8002630 <_printf_i+0x228>
 80025b4:	0018      	movs	r0, r3
 80025b6:	e03b      	b.n	8002630 <_printf_i+0x228>
 80025b8:	0022      	movs	r2, r4
 80025ba:	2301      	movs	r3, #1
 80025bc:	3219      	adds	r2, #25
 80025be:	9906      	ldr	r1, [sp, #24]
 80025c0:	9805      	ldr	r0, [sp, #20]
 80025c2:	9e07      	ldr	r6, [sp, #28]
 80025c4:	47b0      	blx	r6
 80025c6:	1c43      	adds	r3, r0, #1
 80025c8:	d030      	beq.n	800262c <_printf_i+0x224>
 80025ca:	3501      	adds	r5, #1
 80025cc:	68e3      	ldr	r3, [r4, #12]
 80025ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	429d      	cmp	r5, r3
 80025d4:	dbf0      	blt.n	80025b8 <_printf_i+0x1b0>
 80025d6:	e7e9      	b.n	80025ac <_printf_i+0x1a4>
 80025d8:	2d00      	cmp	r5, #0
 80025da:	d0a9      	beq.n	8002530 <_printf_i+0x128>
 80025dc:	9e04      	ldr	r6, [sp, #16]
 80025de:	0028      	movs	r0, r5
 80025e0:	0039      	movs	r1, r7
 80025e2:	f7fd fe29 	bl	8000238 <__aeabi_uidivmod>
 80025e6:	9b03      	ldr	r3, [sp, #12]
 80025e8:	3e01      	subs	r6, #1
 80025ea:	5c5b      	ldrb	r3, [r3, r1]
 80025ec:	0028      	movs	r0, r5
 80025ee:	7033      	strb	r3, [r6, #0]
 80025f0:	0039      	movs	r1, r7
 80025f2:	f7fd fd9b 	bl	800012c <__udivsi3>
 80025f6:	1e05      	subs	r5, r0, #0
 80025f8:	d1f1      	bne.n	80025de <_printf_i+0x1d6>
 80025fa:	2f08      	cmp	r7, #8
 80025fc:	d109      	bne.n	8002612 <_printf_i+0x20a>
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	07db      	lsls	r3, r3, #31
 8002602:	d506      	bpl.n	8002612 <_printf_i+0x20a>
 8002604:	6863      	ldr	r3, [r4, #4]
 8002606:	6922      	ldr	r2, [r4, #16]
 8002608:	4293      	cmp	r3, r2
 800260a:	dc02      	bgt.n	8002612 <_printf_i+0x20a>
 800260c:	2330      	movs	r3, #48	; 0x30
 800260e:	3e01      	subs	r6, #1
 8002610:	7033      	strb	r3, [r6, #0]
 8002612:	9b04      	ldr	r3, [sp, #16]
 8002614:	1b9b      	subs	r3, r3, r6
 8002616:	6123      	str	r3, [r4, #16]
 8002618:	9b07      	ldr	r3, [sp, #28]
 800261a:	aa09      	add	r2, sp, #36	; 0x24
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	0021      	movs	r1, r4
 8002620:	9b06      	ldr	r3, [sp, #24]
 8002622:	9805      	ldr	r0, [sp, #20]
 8002624:	f7ff fe82 	bl	800232c <_printf_common>
 8002628:	1c43      	adds	r3, r0, #1
 800262a:	d1b3      	bne.n	8002594 <_printf_i+0x18c>
 800262c:	2001      	movs	r0, #1
 800262e:	4240      	negs	r0, r0
 8002630:	b00b      	add	sp, #44	; 0x2c
 8002632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002634:	080028db 	.word	0x080028db
 8002638:	080028ca 	.word	0x080028ca

0800263c <memchr>:
 800263c:	b2c9      	uxtb	r1, r1
 800263e:	1882      	adds	r2, r0, r2
 8002640:	4290      	cmp	r0, r2
 8002642:	d101      	bne.n	8002648 <memchr+0xc>
 8002644:	2000      	movs	r0, #0
 8002646:	4770      	bx	lr
 8002648:	7803      	ldrb	r3, [r0, #0]
 800264a:	428b      	cmp	r3, r1
 800264c:	d0fb      	beq.n	8002646 <memchr+0xa>
 800264e:	3001      	adds	r0, #1
 8002650:	e7f6      	b.n	8002640 <memchr+0x4>

08002652 <memmove>:
 8002652:	b510      	push	{r4, lr}
 8002654:	4288      	cmp	r0, r1
 8002656:	d902      	bls.n	800265e <memmove+0xc>
 8002658:	188b      	adds	r3, r1, r2
 800265a:	4298      	cmp	r0, r3
 800265c:	d308      	bcc.n	8002670 <memmove+0x1e>
 800265e:	2300      	movs	r3, #0
 8002660:	429a      	cmp	r2, r3
 8002662:	d007      	beq.n	8002674 <memmove+0x22>
 8002664:	5ccc      	ldrb	r4, [r1, r3]
 8002666:	54c4      	strb	r4, [r0, r3]
 8002668:	3301      	adds	r3, #1
 800266a:	e7f9      	b.n	8002660 <memmove+0xe>
 800266c:	5c8b      	ldrb	r3, [r1, r2]
 800266e:	5483      	strb	r3, [r0, r2]
 8002670:	3a01      	subs	r2, #1
 8002672:	d2fb      	bcs.n	800266c <memmove+0x1a>
 8002674:	bd10      	pop	{r4, pc}
	...

08002678 <_free_r>:
 8002678:	b570      	push	{r4, r5, r6, lr}
 800267a:	0005      	movs	r5, r0
 800267c:	2900      	cmp	r1, #0
 800267e:	d010      	beq.n	80026a2 <_free_r+0x2a>
 8002680:	1f0c      	subs	r4, r1, #4
 8002682:	6823      	ldr	r3, [r4, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	da00      	bge.n	800268a <_free_r+0x12>
 8002688:	18e4      	adds	r4, r4, r3
 800268a:	0028      	movs	r0, r5
 800268c:	f000 f8d4 	bl	8002838 <__malloc_lock>
 8002690:	4a1d      	ldr	r2, [pc, #116]	; (8002708 <_free_r+0x90>)
 8002692:	6813      	ldr	r3, [r2, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d105      	bne.n	80026a4 <_free_r+0x2c>
 8002698:	6063      	str	r3, [r4, #4]
 800269a:	6014      	str	r4, [r2, #0]
 800269c:	0028      	movs	r0, r5
 800269e:	f000 f8cc 	bl	800283a <__malloc_unlock>
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
 80026a4:	42a3      	cmp	r3, r4
 80026a6:	d909      	bls.n	80026bc <_free_r+0x44>
 80026a8:	6821      	ldr	r1, [r4, #0]
 80026aa:	1860      	adds	r0, r4, r1
 80026ac:	4283      	cmp	r3, r0
 80026ae:	d1f3      	bne.n	8002698 <_free_r+0x20>
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	1841      	adds	r1, r0, r1
 80026b6:	6021      	str	r1, [r4, #0]
 80026b8:	e7ee      	b.n	8002698 <_free_r+0x20>
 80026ba:	0013      	movs	r3, r2
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	2a00      	cmp	r2, #0
 80026c0:	d001      	beq.n	80026c6 <_free_r+0x4e>
 80026c2:	42a2      	cmp	r2, r4
 80026c4:	d9f9      	bls.n	80026ba <_free_r+0x42>
 80026c6:	6819      	ldr	r1, [r3, #0]
 80026c8:	1858      	adds	r0, r3, r1
 80026ca:	42a0      	cmp	r0, r4
 80026cc:	d10b      	bne.n	80026e6 <_free_r+0x6e>
 80026ce:	6820      	ldr	r0, [r4, #0]
 80026d0:	1809      	adds	r1, r1, r0
 80026d2:	1858      	adds	r0, r3, r1
 80026d4:	6019      	str	r1, [r3, #0]
 80026d6:	4282      	cmp	r2, r0
 80026d8:	d1e0      	bne.n	800269c <_free_r+0x24>
 80026da:	6810      	ldr	r0, [r2, #0]
 80026dc:	6852      	ldr	r2, [r2, #4]
 80026de:	1841      	adds	r1, r0, r1
 80026e0:	6019      	str	r1, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	e7da      	b.n	800269c <_free_r+0x24>
 80026e6:	42a0      	cmp	r0, r4
 80026e8:	d902      	bls.n	80026f0 <_free_r+0x78>
 80026ea:	230c      	movs	r3, #12
 80026ec:	602b      	str	r3, [r5, #0]
 80026ee:	e7d5      	b.n	800269c <_free_r+0x24>
 80026f0:	6821      	ldr	r1, [r4, #0]
 80026f2:	1860      	adds	r0, r4, r1
 80026f4:	4282      	cmp	r2, r0
 80026f6:	d103      	bne.n	8002700 <_free_r+0x88>
 80026f8:	6810      	ldr	r0, [r2, #0]
 80026fa:	6852      	ldr	r2, [r2, #4]
 80026fc:	1841      	adds	r1, r0, r1
 80026fe:	6021      	str	r1, [r4, #0]
 8002700:	6062      	str	r2, [r4, #4]
 8002702:	605c      	str	r4, [r3, #4]
 8002704:	e7ca      	b.n	800269c <_free_r+0x24>
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	2000009c 	.word	0x2000009c

0800270c <_malloc_r>:
 800270c:	2303      	movs	r3, #3
 800270e:	b570      	push	{r4, r5, r6, lr}
 8002710:	1ccd      	adds	r5, r1, #3
 8002712:	439d      	bics	r5, r3
 8002714:	3508      	adds	r5, #8
 8002716:	0006      	movs	r6, r0
 8002718:	2d0c      	cmp	r5, #12
 800271a:	d21e      	bcs.n	800275a <_malloc_r+0x4e>
 800271c:	250c      	movs	r5, #12
 800271e:	42a9      	cmp	r1, r5
 8002720:	d81d      	bhi.n	800275e <_malloc_r+0x52>
 8002722:	0030      	movs	r0, r6
 8002724:	f000 f888 	bl	8002838 <__malloc_lock>
 8002728:	4a25      	ldr	r2, [pc, #148]	; (80027c0 <_malloc_r+0xb4>)
 800272a:	6814      	ldr	r4, [r2, #0]
 800272c:	0021      	movs	r1, r4
 800272e:	2900      	cmp	r1, #0
 8002730:	d119      	bne.n	8002766 <_malloc_r+0x5a>
 8002732:	4c24      	ldr	r4, [pc, #144]	; (80027c4 <_malloc_r+0xb8>)
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d103      	bne.n	8002742 <_malloc_r+0x36>
 800273a:	0030      	movs	r0, r6
 800273c:	f000 f86a 	bl	8002814 <_sbrk_r>
 8002740:	6020      	str	r0, [r4, #0]
 8002742:	0029      	movs	r1, r5
 8002744:	0030      	movs	r0, r6
 8002746:	f000 f865 	bl	8002814 <_sbrk_r>
 800274a:	1c43      	adds	r3, r0, #1
 800274c:	d12c      	bne.n	80027a8 <_malloc_r+0x9c>
 800274e:	230c      	movs	r3, #12
 8002750:	0030      	movs	r0, r6
 8002752:	6033      	str	r3, [r6, #0]
 8002754:	f000 f871 	bl	800283a <__malloc_unlock>
 8002758:	e003      	b.n	8002762 <_malloc_r+0x56>
 800275a:	2d00      	cmp	r5, #0
 800275c:	dadf      	bge.n	800271e <_malloc_r+0x12>
 800275e:	230c      	movs	r3, #12
 8002760:	6033      	str	r3, [r6, #0]
 8002762:	2000      	movs	r0, #0
 8002764:	bd70      	pop	{r4, r5, r6, pc}
 8002766:	680b      	ldr	r3, [r1, #0]
 8002768:	1b5b      	subs	r3, r3, r5
 800276a:	d41a      	bmi.n	80027a2 <_malloc_r+0x96>
 800276c:	2b0b      	cmp	r3, #11
 800276e:	d903      	bls.n	8002778 <_malloc_r+0x6c>
 8002770:	600b      	str	r3, [r1, #0]
 8002772:	18cc      	adds	r4, r1, r3
 8002774:	6025      	str	r5, [r4, #0]
 8002776:	e003      	b.n	8002780 <_malloc_r+0x74>
 8002778:	428c      	cmp	r4, r1
 800277a:	d10e      	bne.n	800279a <_malloc_r+0x8e>
 800277c:	6863      	ldr	r3, [r4, #4]
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	0030      	movs	r0, r6
 8002782:	f000 f85a 	bl	800283a <__malloc_unlock>
 8002786:	0020      	movs	r0, r4
 8002788:	2207      	movs	r2, #7
 800278a:	300b      	adds	r0, #11
 800278c:	1d23      	adds	r3, r4, #4
 800278e:	4390      	bics	r0, r2
 8002790:	1ac3      	subs	r3, r0, r3
 8002792:	d0e7      	beq.n	8002764 <_malloc_r+0x58>
 8002794:	425a      	negs	r2, r3
 8002796:	50e2      	str	r2, [r4, r3]
 8002798:	e7e4      	b.n	8002764 <_malloc_r+0x58>
 800279a:	684b      	ldr	r3, [r1, #4]
 800279c:	6063      	str	r3, [r4, #4]
 800279e:	000c      	movs	r4, r1
 80027a0:	e7ee      	b.n	8002780 <_malloc_r+0x74>
 80027a2:	000c      	movs	r4, r1
 80027a4:	6849      	ldr	r1, [r1, #4]
 80027a6:	e7c2      	b.n	800272e <_malloc_r+0x22>
 80027a8:	2303      	movs	r3, #3
 80027aa:	1cc4      	adds	r4, r0, #3
 80027ac:	439c      	bics	r4, r3
 80027ae:	42a0      	cmp	r0, r4
 80027b0:	d0e0      	beq.n	8002774 <_malloc_r+0x68>
 80027b2:	1a21      	subs	r1, r4, r0
 80027b4:	0030      	movs	r0, r6
 80027b6:	f000 f82d 	bl	8002814 <_sbrk_r>
 80027ba:	1c43      	adds	r3, r0, #1
 80027bc:	d1da      	bne.n	8002774 <_malloc_r+0x68>
 80027be:	e7c6      	b.n	800274e <_malloc_r+0x42>
 80027c0:	2000009c 	.word	0x2000009c
 80027c4:	200000a0 	.word	0x200000a0

080027c8 <_realloc_r>:
 80027c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ca:	0007      	movs	r7, r0
 80027cc:	000d      	movs	r5, r1
 80027ce:	0016      	movs	r6, r2
 80027d0:	2900      	cmp	r1, #0
 80027d2:	d105      	bne.n	80027e0 <_realloc_r+0x18>
 80027d4:	0011      	movs	r1, r2
 80027d6:	f7ff ff99 	bl	800270c <_malloc_r>
 80027da:	0004      	movs	r4, r0
 80027dc:	0020      	movs	r0, r4
 80027de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027e0:	2a00      	cmp	r2, #0
 80027e2:	d103      	bne.n	80027ec <_realloc_r+0x24>
 80027e4:	f7ff ff48 	bl	8002678 <_free_r>
 80027e8:	0034      	movs	r4, r6
 80027ea:	e7f7      	b.n	80027dc <_realloc_r+0x14>
 80027ec:	f000 f826 	bl	800283c <_malloc_usable_size_r>
 80027f0:	002c      	movs	r4, r5
 80027f2:	4286      	cmp	r6, r0
 80027f4:	d9f2      	bls.n	80027dc <_realloc_r+0x14>
 80027f6:	0031      	movs	r1, r6
 80027f8:	0038      	movs	r0, r7
 80027fa:	f7ff ff87 	bl	800270c <_malloc_r>
 80027fe:	1e04      	subs	r4, r0, #0
 8002800:	d0ec      	beq.n	80027dc <_realloc_r+0x14>
 8002802:	0029      	movs	r1, r5
 8002804:	0032      	movs	r2, r6
 8002806:	f7ff fbf7 	bl	8001ff8 <memcpy>
 800280a:	0029      	movs	r1, r5
 800280c:	0038      	movs	r0, r7
 800280e:	f7ff ff33 	bl	8002678 <_free_r>
 8002812:	e7e3      	b.n	80027dc <_realloc_r+0x14>

08002814 <_sbrk_r>:
 8002814:	2300      	movs	r3, #0
 8002816:	b570      	push	{r4, r5, r6, lr}
 8002818:	4c06      	ldr	r4, [pc, #24]	; (8002834 <_sbrk_r+0x20>)
 800281a:	0005      	movs	r5, r0
 800281c:	0008      	movs	r0, r1
 800281e:	6023      	str	r3, [r4, #0]
 8002820:	f7ff fb30 	bl	8001e84 <_sbrk>
 8002824:	1c43      	adds	r3, r0, #1
 8002826:	d103      	bne.n	8002830 <_sbrk_r+0x1c>
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d000      	beq.n	8002830 <_sbrk_r+0x1c>
 800282e:	602b      	str	r3, [r5, #0]
 8002830:	bd70      	pop	{r4, r5, r6, pc}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	200004a4 	.word	0x200004a4

08002838 <__malloc_lock>:
 8002838:	4770      	bx	lr

0800283a <__malloc_unlock>:
 800283a:	4770      	bx	lr

0800283c <_malloc_usable_size_r>:
 800283c:	1f0b      	subs	r3, r1, #4
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	1f18      	subs	r0, r3, #4
 8002842:	2b00      	cmp	r3, #0
 8002844:	da01      	bge.n	800284a <_malloc_usable_size_r+0xe>
 8002846:	580b      	ldr	r3, [r1, r0]
 8002848:	18c0      	adds	r0, r0, r3
 800284a:	4770      	bx	lr

0800284c <_init>:
 800284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002852:	bc08      	pop	{r3}
 8002854:	469e      	mov	lr, r3
 8002856:	4770      	bx	lr

08002858 <_fini>:
 8002858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800285e:	bc08      	pop	{r3}
 8002860:	469e      	mov	lr, r3
 8002862:	4770      	bx	lr
